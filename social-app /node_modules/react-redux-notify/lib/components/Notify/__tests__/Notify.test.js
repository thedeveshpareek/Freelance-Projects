'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _Notify = require('../index.js');

var _Notifications = require('../../../modules/Notifications.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Notify', function () {
  var handleRemove = jest.fn();
  var handleRemoveAll = jest.fn();
  var notification1 = {
    id: 1,
    message: 'Notification 1!',
    type: _Notifications.NOTIFICATION_TYPE_SUCCESS,
    duration: 0,
    canDismiss: true,
    icon: _react2.default.createElement('i', { className: 'fa fa-check' })
  };
  var notification2 = {
    id: 2,
    message: 'Notification 2!',
    type: _Notifications.NOTIFICATION_TYPE_INFO,
    duration: 0,
    canDismiss: true,
    icon: _react2.default.createElement('i', { className: 'fa fa-check' })
  };
  var notification3 = {
    id: 3,
    message: 'Notification 3!',
    type: _Notifications.NOTIFICATION_TYPE_ERROR,
    duration: 0,
    canDismiss: true,
    icon: _react2.default.createElement('i', { className: 'fa fa-check' })
  };
  var props = {
    notifications: [],
    remove: handleRemove,
    removeAll: handleRemoveAll
  };

  it('renders with required props', function () {
    var component = (0, _enzyme.mount)(_react2.default.createElement(_Notify.Notify, props));
    expect(component).toMatchSnapshot();
  });

  it('renders notifications', function () {
    var tProps = (0, _extends3.default)({}, props, {
      notifications: [notification1, notification2]
    });
    var component = (0, _enzyme.mount)(_react2.default.createElement(_Notify.Notify, tProps));
    // TODO: Fix this, not sure whats going on here, but children's length
    // doesn't seem to be correct, even though the output in the
    // snapshot is correct.
    // expect(component.find(".wrapper").children()).toHaveLength(2);
    expect(component).toMatchSnapshot();
  });

  it('renders first notification without closeAll if showCloseAllBtn is false', function () {
    var tProps = (0, _extends3.default)({}, props, {
      notifications: [notification1, notification2],
      showCloseAllBtn: false
    });
    var component = (0, _enzyme.mount)(_react2.default.createElement(_Notify.Notify, tProps));
    expect(component).toMatchSnapshot();
    expect(component.find('.close-all')).toHaveLength(0);
  });

  it('renders first notification with closeAll if showCloseAllBtn is true', function () {
    var tProps = (0, _extends3.default)({}, props, {
      notifications: [notification1, notification2],
      showCloseAllBtn: true
    });
    var component = (0, _enzyme.mount)(_react2.default.createElement(_Notify.Notify, tProps));
    expect(component).toMatchSnapshot();
    expect(component.find('.close-all')).toHaveLength(1);
  });

  it('renders custom notifications', function () {
    var MyCustomNotificationComponent = function MyCustomNotificationComponent(_ref) {
      var message = _ref.message,
          canDismiss = _ref.canDismiss,
          id = _ref.id,
          handleDismiss = _ref.handleDismiss;

      var styles = {
        margin: '5px 0',
        padding: '2px 5px',
        border: '1px solid #333',
        float: 'right',
        clear: 'right',
        width: '330px',
        boxSizing: 'border-box'
      };
      if (canDismiss) {
        styles = (0, _assign2.default)({}, styles, { cursor: 'pointer' });
      }
      return _react2.default.createElement(
        'div',
        {
          onClick: function onClick() {
            if (canDismiss) {
              handleDismiss(id);
            }
          },
          style: styles
        },
        message
      );
    };
    var tProps = (0, _extends3.default)({}, props, {
      notificationComponent: MyCustomNotificationComponent,
      notifications: [notification1]
    });
    var component = (0, _enzyme.mount)(_react2.default.createElement(_Notify.Notify, tProps));
    expect(component).toMatchSnapshot();
    expect(component.contains(MyCustomNotificationComponent)).toEqual(true);
  });

  it('renders with the correct className when customStyles is used', function () {
    var tProps = (0, _extends3.default)({}, props, {
      customStyles: {
        containerCustomPosition: 'CustomPosition'
      },
      position: 'CustomPosition'
    });
    var component = (0, _enzyme.mount)(_react2.default.createElement(_Notify.Notify, tProps));
    expect(component.find('.CustomPosition')).toHaveLength(1);
    expect(component).toMatchSnapshot();
  });

  it('passes the correct props to each notification', function () {
    var tProps = (0, _extends3.default)({}, props, {
      notifications: [notification1, notification2, notification3]
    });
    var component = (0, _enzyme.mount)(_react2.default.createElement(_Notify.Notify, tProps));
    expect(component.find((0, _extends3.default)({}, notification1, { isFirst: true }))).toHaveLength(1);
    expect(component.find((0, _extends3.default)({}, notification2, { isFirst: false }))).toHaveLength(1);
    expect(component.find((0, _extends3.default)({}, notification3, { isFirst: false }))).toHaveLength(1);
  });

  it('calls removeAll with the correct arguments', function () {
    var tProps = (0, _extends3.default)({}, props, {
      notifications: [notification1, notification2, notification3]
    });
    var component = (0, _enzyme.mount)(_react2.default.createElement(_Notify.Notify, tProps));
    component.find('.close-all').simulate('click');
    expect(handleRemoveAll).toHaveBeenCalled();
    component.setProps({ forceClose: true });
    component.find('.close-all').simulate('click');
    expect(handleRemoveAll).lastCalledWith(true);
  });

  it('calls remove with the correct arguments', function () {
    var tProps = (0, _extends3.default)({}, props, { notifications: [notification1] });
    var component = (0, _enzyme.mount)(_react2.default.createElement(_Notify.Notify, tProps));
    component.find('.close').first().simulate('click');
    expect(handleRemove).toHaveBeenCalled();
  });

  it('unmounts without error', function () {
    var component = (0, _enzyme.mount)(_react2.default.createElement(_Notify.Notify, props));
    var instance = component.instance();
    expect(instance.defaultNode).not.toEqual(null);
    component.unmount();
    expect(instance.defaultNode).toEqual(null);
    expect(component).toMatchSnapshot();
  });
});