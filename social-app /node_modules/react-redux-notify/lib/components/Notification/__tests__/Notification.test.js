'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _Notification = require('../index.js');

var _Notifications = require('../../../modules/Notifications.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Notification', function () {
  var ID = Date.now();
  var handleDismissClick = jest.fn();
  var handleDismissAllClick = jest.fn();
  var props = {
    id: ID,
    message: 'Hello There!',
    type: _Notifications.NOTIFICATION_TYPE_SUCCESS,
    isFirst: false,
    duration: 0,
    handleDismiss: handleDismissClick,
    handleDismissAll: handleDismissAllClick,
    localization: {
      closeAllBtnText: 'Close All',
      acceptBtnText: 'Accept',
      denyBtnText: 'Deny'
    },
    customStyles: {}
  };

  it('renders with default props', function () {
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, props));
    expect(component).toMatchSnapshot();
  });

  it('renders with an element for the icon when an element is passed', function () {
    var tProps = (0, _extends3.default)({}, props, { icon: _react2.default.createElement('i', { className: 'fa fa-fire' }) });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    expect(component).toMatchSnapshot();
  });

  it('renders with an string for the icon when a string is passed', function () {
    var tProps = (0, _extends3.default)({}, props, { icon: String.fromCharCode(183) });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    expect(component).toMatchSnapshot();
  });

  it('renders an accept button with an a title and an icon className and calls function on click', function () {
    var tProps = (0, _extends3.default)({}, props, {
      canDismiss: false,
      acceptBtn: {
        handler: jest.fn(),
        icon: 'fa fa-thumbs-up',
        title: 'Accept'
      }
    });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    expect(component).toMatchSnapshot();
  });

  it('renders an accept button without a title and an icon element ', function () {
    var tProps = (0, _extends3.default)({}, props, {
      canDismiss: false,
      acceptBtn: {
        handler: jest.fn(),
        icon: _react2.default.createElement('i', { className: 'fa fa-thumbs-up' })
      }
    });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    expect(component).toMatchSnapshot();
  });

  it('renders a deny button with an a title and an icon className', function () {
    var tProps = (0, _extends3.default)({}, props, {
      canDismiss: false,
      denyBtn: {
        handler: jest.fn(),
        icon: 'fa fa-thumbs-down',
        title: 'Deny'
      }
    });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    expect(component).toMatchSnapshot();
  });

  it('renders a deny button without a title and an icon element ', function () {
    var tProps = (0, _extends3.default)({}, props, {
      canDismiss: false,
      denyBtn: {
        handler: jest.fn(),
        icon: _react2.default.createElement('i', { className: 'fa fa-thumbs-down' })
      }
    });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    expect(component).toMatchSnapshot();
  });

  it('renders with a close all button', function () {
    var tProps = (0, _extends3.default)({}, props, { isFirst: true });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    expect(component.find('.close-all').text()).toBe('Close All');
    expect(component).toMatchSnapshot();
  });

  it('renders with a duration greater than 0', function () {
    var tProps = (0, _extends3.default)({}, props, { duration: 2000 });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    expect(component).toMatchSnapshot();
  });

  it('calls handleDismiss after duration expires', function () {
    jest.useFakeTimers();
    var tProps = (0, _extends3.default)({}, props, { duration: 2000 });
    // eslint-disable-next-line no-unused-vars
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    setTimeout(function () {
      expect(handleDismissClick).toHaveBeenCalled();
    }, 2000);
    jest.runAllTimers();
  });

  it('calls the button handler function when clicked', function () {
    var acceptBtnHandler = jest.fn();
    var denyBtnHandler = jest.fn();
    var tProps = (0, _extends3.default)({}, props, {
      canDismiss: false,
      denyBtn: {
        handler: denyBtnHandler,
        icon: _react2.default.createElement('i', { className: 'fa fa-thumbs-down' }),
        title: 'Deny'
      },
      acceptBtn: {
        handler: acceptBtnHandler,
        icon: 'fa fa-thumbs-up',
        title: 'Accept'
      }
    });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    var buttons = component.find('.actionBtn');
    var acceptBtn = buttons.first();
    var denyBtn = buttons.last();
    acceptBtn.simulate('click');
    expect(acceptBtnHandler).toBeCalledWith(undefined, (0, _extends3.default)({}, tProps, { showCloseAllBtn: true }));
    denyBtn.simulate('click');
    expect(denyBtnHandler).toBeCalledWith(undefined, (0, _extends3.default)({}, tProps, { showCloseAllBtn: true }));
  });

  it('calls handleDismiss onclick', function () {
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, props));
    component.find('.close').simulate('click');
    expect(handleDismissClick).toHaveBeenCalled();
  });

  it('calls handleDismissAll onclick', function () {
    var tProps = (0, _extends3.default)({}, props, { isFirst: true });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    component.find('.close-all').simulate('click');
    expect(handleDismissAllClick).toHaveBeenCalled();
  });

  it('renders custom localization text for accept and deny buttons', function () {
    var acceptBtnHandler = jest.fn();
    var denyBtnHandler = jest.fn();
    var tProps = (0, _extends3.default)({}, props, {
      localization: {
        closeAllBtnText: 'Close All',
        acceptBtnText: 'Yes',
        denyBtnText: 'No'
      },
      canDismiss: false,
      denyBtn: {
        handler: denyBtnHandler,
        icon: false
      },
      acceptBtn: {
        handler: acceptBtnHandler,
        icon: false
      },
      isFirst: true
    });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    var buttons = component.find('.actionBtn');
    expect(buttons.first().text()).toBe('Yes');
    expect(buttons.last().text()).toBe('No');
    expect(component).toMatchSnapshot();
  });

  it('renders custom localization text for close all', function () {
    var tProps = (0, _extends3.default)({}, props, {
      localization: {
        closeAllBtnText: 'Close dem all',
        acceptBtnText: 'Yes',
        denyBtnText: 'No'
      },
      isFirst: true
    });
    var component = (0, _enzyme.shallow)(_react2.default.createElement(_Notification.Notification, tProps));
    expect(component.find('.close-all').text()).toBe('Close dem all');
    expect(component).toMatchSnapshot();
  });
});