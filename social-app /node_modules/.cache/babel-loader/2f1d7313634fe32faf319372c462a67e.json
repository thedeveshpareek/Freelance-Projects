{"ast":null,"code":"var _jsxFileName = \"/Users/devsmac/Downloads/fx-frontend/src/components/helper/Comments.jsx\";\nimport React, { useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Dropdown, Image, Media, Form, Button } from \"react-bootstrap\";\nimport { EditorState, convertToRaw, Modifier } from \"draft-js\";\nimport { saveCommentStart } from \"../../store/actions/CommentsAction\";\nimport { translate, t } from \"react-multi-lang\";\nimport { Picker, EmojiData } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport PostEditor from \"../Post/postMentions/PostEditor\";\n\nconst Comments = props => {\n  const mentionsRef = useRef();\n  const [editorContentState, setEditorContentstate] = useState(\"\");\n  const [editorHtmlContent, setEditorHtmlContent] = useState(\"\");\n  const [emojiPickerState, SetEmojiPicker] = useState(false);\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  const [commentActiveIndex, setCommentActiveIndex] = useState(null);\n\n  const handleCommentSubmit = event => {\n    event.preventDefault();\n    props.dispatch(saveCommentStart({\n      comment: editorHtmlContent,\n      post_id: props.post.post_id\n    })); // setCommentInputData({});\n\n    setEditorState(EditorState.createEmpty());\n  };\n\n  function triggerPicker(event) {\n    event.preventDefault();\n    SetEmojiPicker(!emojiPickerState);\n  }\n\n  const handleEmojiSelect = emoji => {\n    SetEmojiPicker(false);\n    setEditorState(insertCharacter(emoji.native, editorState));\n  };\n\n  const handleCommentActiveIndex = index => {\n    setCommentActiveIndex(index);\n  };\n\n  const insertCharacter = (emoji, editorState) => {\n    const currentContent = editorState.getCurrentContent();\n    const currentSelection = editorState.getSelection();\n    const newContent = Modifier.insertText(currentContent, currentSelection, emoji);\n    const newEditorState = EditorState.push(editorState, newContent, \"insert-characters\");\n    return EditorState.forceSelection(newEditorState, newContent.getSelectionAfter());\n  };\n\n  const focusEditor = () => {\n    console.log('one');\n    setCommentActiveIndex(props.currentIndex);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment-box\",\n    onFocus: () => focusEditor(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment-box-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"form-inline\",\n    action: \"\",\n    onSubmit: handleCommentSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-picture\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    className: \"title-container-1\",\n    to: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    src: localStorage.getItem(\"user_picture\"),\n    className: \"user-image img-responsive\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }))), commentActiveIndex == props.currentIndex ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PostEditor, {\n    className: \"PostEditor__input\",\n    placeholder: t(\"new_comment_placeholder\"),\n    ref: mentionsRef,\n    getEditorRawContent: setEditorContentstate,\n    getEditorHtmlContent: setEditorHtmlContent,\n    dispatch: props.dispatch,\n    editorState: editorState,\n    setEditorState: setEditorState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"empty-comment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Add comments here ...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-unstyled reply-action-icons position-relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Media, {\n    as: \"li\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"#\",\n    onClick: handleCommentSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    className: \"comment-send-icon\",\n    src: window.location.origin + \"/assets/images/icons/comment-send-icon.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Media, {\n    as: \"li\",\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"g-btn m-rounded emojiButtoon p-0 pr-2\",\n    onClick: triggerPicker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"far fa-smile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 33\n    }\n  }))), emojiPickerState && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"emojiWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Picker, {\n    title: \"\",\n    emoji: \"point_up\",\n    onSelect: emoji => handleEmojiSelect(emoji),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  }))))));\n};\n\nconst mapStateToPros = state => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch\n  };\n}\n\nexport default connect(mapStateToPros, mapDispatchToProps)(translate(Comments));","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/components/helper/Comments.jsx"],"names":["React","useRef","useState","Link","connect","Dropdown","Image","Media","Form","Button","EditorState","convertToRaw","Modifier","saveCommentStart","translate","t","Picker","EmojiData","PostEditor","Comments","props","mentionsRef","editorContentState","setEditorContentstate","editorHtmlContent","setEditorHtmlContent","emojiPickerState","SetEmojiPicker","editorState","setEditorState","createEmpty","commentActiveIndex","setCommentActiveIndex","handleCommentSubmit","event","preventDefault","dispatch","comment","post_id","post","triggerPicker","handleEmojiSelect","emoji","insertCharacter","native","handleCommentActiveIndex","index","currentContent","getCurrentContent","currentSelection","getSelection","newContent","insertText","newEditorState","push","forceSelection","getSelectionAfter","focusEditor","console","log","currentIndex","localStorage","getItem","window","location","origin","mapStateToPros","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n    Dropdown,Image,Media,Form,Button,\n} from \"react-bootstrap\";\nimport { EditorState, convertToRaw, Modifier } from \"draft-js\";\nimport {\n    saveCommentStart,\n} from \"../../store/actions/CommentsAction\";\nimport { translate, t } from \"react-multi-lang\";\nimport { Picker, EmojiData } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport PostEditor from \"../Post/postMentions/PostEditor\";\n\nconst Comments = (props) => {\n\n    const mentionsRef = useRef();\n\n    const [editorContentState, setEditorContentstate] = useState(\"\");\n\n    const [editorHtmlContent, setEditorHtmlContent] = useState(\"\");\n\n    const [emojiPickerState, SetEmojiPicker] = useState(false);\n\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n\n    const [commentActiveIndex, setCommentActiveIndex] = useState(null);\n\n    const handleCommentSubmit = (event) => {\n        event.preventDefault();\n        props.dispatch(\n          saveCommentStart({\n            comment: editorHtmlContent,\n            post_id: props.post.post_id,\n          })\n        );\n        // setCommentInputData({});\n        setEditorState(EditorState.createEmpty());\n    };\n\n      \n    function triggerPicker(event) {\n        event.preventDefault();\n        SetEmojiPicker(!emojiPickerState);\n    }\n    \n    const handleEmojiSelect = (emoji) => {\n        SetEmojiPicker(false);\n        setEditorState(insertCharacter(emoji.native, editorState));\n    };\n    \n    const handleCommentActiveIndex = (index) => {\n        setCommentActiveIndex(index);\n    };\n\n    const insertCharacter = (emoji, editorState) => {\n\n        const currentContent = editorState.getCurrentContent();\n        const currentSelection = editorState.getSelection();\n    \n        const newContent = Modifier.insertText(\n            currentContent,\n            currentSelection,\n            emoji\n        );\n    \n        const newEditorState = EditorState.push(\n            editorState,\n            newContent,\n            \"insert-characters\"\n        );\n    \n        return EditorState.forceSelection(\n            newEditorState,\n            newContent.getSelectionAfter()\n        );\n    };\n\n    const focusEditor = () => {\n        console.log('one');\n        setCommentActiveIndex(props.currentIndex);\n    };\n\n    return (\n        <div className=\"comment-box\" onFocus={() => focusEditor()}>\n            <div className=\"comment-box-form\">\n                <Form\n                    className=\"form-inline\"\n                    action=\"\"\n                    onSubmit={handleCommentSubmit}\n                >\n                    <div className=\"user-picture\">\n                        <Link className=\"title-container-1\" to=\"#\">\n                            <Image\n                            src={localStorage.getItem(\"user_picture\")}\n                            className=\"user-image img-responsive\"\n                            />\n                        </Link>\n                    </div>\n                    {commentActiveIndex == props.currentIndex ? \n                    <div className=\"text-box\">\n                        <PostEditor\n                            className=\"PostEditor__input\"\n                            placeholder={t(\"new_comment_placeholder\")}\n                            ref={mentionsRef}\n                            getEditorRawContent={setEditorContentstate}\n                            getEditorHtmlContent={setEditorHtmlContent}\n                            dispatch={props.dispatch}\n                            editorState={editorState}\n                            setEditorState={setEditorState}\n                        />\n                    </div>\n                    : \n                        <div className=\"empty-comment\">\n                            <input type='text' placeholder=\"Add comments here ...\" />\n                        </div>\n                    }\n                    <ul className=\"list-unstyled reply-action-icons position-relative\">\n                        <Media as=\"li\">\n                            <Link to=\"#\" onClick={handleCommentSubmit}>\n                                {/* <i className=\"fas fa-paper-plane\"></i> */}\n                                <Image\n                                    className=\"comment-send-icon\"\n                                    src={\n                                    window.location.origin +\n                                    \"/assets/images/icons/comment-send-icon.png\"\n                                    }\n                                />\n                            </Link>\n                        </Media>\n                        <Media as=\"li\" className=\"m-0\">\n                            <button\n                            type=\"button\"\n                            className=\"g-btn m-rounded emojiButtoon p-0 pr-2\"\n                            onClick={triggerPicker}\n                            >\n                                <i className=\"far fa-smile\"></i>\n                            </button>\n                        </Media>\n                        {emojiPickerState && (\n                            <div className=\"emojiWrapper\">\n                                <Picker\n                                    title=\"\"\n                                    emoji=\"point_up\"\n                                    onSelect={(emoji) => handleEmojiSelect(emoji)}\n                                />\n                            </div>\n                        )}\n                    </ul>\n                </Form>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToPros = (state) => ({\n  \n});\n\nfunction mapDispatchToProps(dispatch) {\n  return { dispatch };\n}\n\nexport default connect(\n  mapStateToPros,\n  mapDispatchToProps\n)(translate(Comments));\n"]},"metadata":{},"sourceType":"module"}