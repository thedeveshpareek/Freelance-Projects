{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { CHANGE_POST_STATUS_START, DELETE_POST_START, FETCH_POSTS_START, FETCH_SINGLE_POST_START, POST_FILE_UPLOAD_START, POST_FILE_REMOVE_START, SAVE_POST_START, PPV_PAYMENT_STRIPE_START, PPV_PAYMENT_WALLET_START, SAVE_REPORT_POST_START, FETCH_REPORT_POSTS_START, PPV_PAYMENT_PAYPAL_START, PPV_PAYMENT_CCBILL_START, FETCH_EXPLORE_START, PPV_PAYMENT_COINPAYMENT_START, FETCH_POST_CATEGORIES_START, FETCH_REPORT_REASON_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { changePostStatusFailure, changePostStatusSuccess, deletePostFailure, deletePostSuccess, fetchPostsFailure, fetchPostsSuccess, fetchSinglePostFailure, fetchSinglePostSuccess, postFileUploadFailure, postFileUploadSuccess, savePostFailure, savePostSuccess, PPVPaymentStripeFailure, PPVPaymentStripeSuccess, PPVPaymentWalletSuccess, PPVPaymentWalletFailure, saveReportPostSuccess, saveReportPostFailure, fetchReportPostsSuccess, fetchReportPostsFailure, PPVPaymentPaypalFailure, PPVPaymentPaypalSuccess, PPVPaymentCCBillSuccess, PPVPaymentCCBillFailure, PPVPaymentCoinPaymentSuccess, PPVPaymentCoinPaymentFailure, fetchExploreFailure, fetchExploreSuccess, postFileRemoveFailure, postFileRemoveSuccess, fetchPostCategoriesFailure, fetchPostCategoriesSuccess, fetchReportReasonFailure, fetchReportReasonSuccess } from \"../actions/PostAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* savePostAPI() {\n  try {\n    const inputData = yield select(state => state.post.savePost.inputData);\n\n    if (!inputData.content && !inputData.post_files) {\n      // !!!!! Dont change this condition. If changing get confirmation vidhya\n      yield put(savePostFailure(\"Please fill the content\"));\n      const notificationMessage = getErrorNotificationMessage(\"Please fill the content\");\n      yield put(createNotification(notificationMessage));\n    } else {\n      const response = yield api.postMethod(\"posts_save_for_owner\", inputData);\n\n      if (response.data.success) {\n        yield put(savePostSuccess(response.data.data));\n        const notificationMessage = getSuccessNotificationMessage(response.data.message);\n        yield put(createNotification(notificationMessage));\n        window.location.assign(\"/post/\" + response.data.data.post_unique_id);\n      } else {\n        yield put(savePostFailure(response.data.error));\n        const notificationMessage = getErrorNotificationMessage(response.data.error);\n        yield put(checkLogoutStatus(response.data));\n        yield put(createNotification(notificationMessage));\n      }\n    }\n  } catch (error) {\n    yield put(savePostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchPostsAPI() {\n  try {\n    const inputData = yield select(state => state.post.posts.inputData);\n    const response = yield api.postMethod(\"posts_for_owner\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchPostsSuccess(response.data.data));\n    } else {\n      yield put(fetchPostsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPostsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSinglePostAPI() {\n  try {\n    const inputData = yield select(state => state.post.singlePost.inputData);\n    const response = yield api.postMethod(\"posts_view_for_others\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchSinglePostSuccess(response.data.data));\n    } else {\n      yield put(fetchSinglePostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSinglePostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deletePostAPI() {\n  try {\n    const inputData = yield select(state => state.post.delPost.inputData);\n    const response = yield api.postMethod(\"posts_delete_for_owner\", inputData);\n\n    if (response.data.success) {\n      yield put(deletePostSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(deletePostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deletePostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* changePostStatusAPI() {\n  try {\n    const inputData = yield select(state => state.post.changePostStatus.inputData);\n    const response = yield api.postMethod(\"posts_status\", inputData);\n\n    if (response.data.success) {\n      yield put(changePostStatusSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(changePostStatusFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(changePostStatusFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* postFileUploadAPI() {\n  try {\n    const inputData = yield select(state => state.post.fileUpload.inputData);\n    const response = yield api.postMethod(\"post_files_upload\", inputData);\n\n    if (response.data.success) {\n      yield put(postFileUploadSuccess(response.data.data));\n    } else {\n      yield put(postFileUploadFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(postFileUploadFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PPVPaymentPaypalAPI() {\n  try {\n    const paymentInputData = yield select(state => state.post.ppvPayPal.inputData);\n    const response = yield api.postMethod(\"posts_payment_by_paypal\", paymentInputData);\n\n    if (response.data.success) {\n      yield put(PPVPaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(PPVPaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PPVPaymentStripeAPI() {\n  try {\n    const paymentInputData = yield select(state => state.post.ppvPayStripe.inputData);\n    const response = yield api.postMethod(\"posts_payment_by_stripe\", paymentInputData);\n\n    if (response.data.success) {\n      yield put(PPVPaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(PPVPaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PPVPaymentWalletAPI() {\n  try {\n    const paymentInputData = yield select(state => state.post.ppvPayWallet.inputData);\n    const response = yield api.postMethod(\"posts_payment_by_wallet\", paymentInputData);\n\n    if (response.data.success) {\n      yield put(PPVPaymentWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(PPVPaymentWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchReportPostsAPI() {\n  try {\n    const response = yield api.postMethod(\"report_posts\");\n\n    if (response.data.success) {\n      yield put(fetchReportPostsSuccess(response.data.data));\n    } else {\n      yield put(fetchReportPostsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchReportPostsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveReportPostAPI() {\n  try {\n    const inputData = yield select(state => state.post.saveReportPost.inputData);\n    const response = yield api.postMethod(\"report_posts_save\", inputData);\n\n    if (response.data.success) {\n      yield put(saveReportPostSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveReportPostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveReportPostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PPVPaymentCCBillAPI() {\n  try {\n    const paymentInputData = yield select(state => state.post.ppvPayCCBill.inputData);\n    const response = yield api.postMethod(\"posts_payment_by_ccbill\", paymentInputData);\n\n    if (response.data.success) {\n      yield put(PPVPaymentCCBillSuccess(response.data.data));\n      window.location.assign(`${response.data.data.redirect_web_url}`);\n    } else {\n      yield put(PPVPaymentCCBillFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentCCBillFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* postFileRemoveAPI() {\n  try {\n    const inputData = yield select(state => state.post.fileRemove.inputData);\n    const response = yield api.postMethod(\"post_files_remove\", inputData);\n\n    if (response.data.success) {\n      yield put(postFileRemoveSuccess(response.data.data));\n    } else {\n      yield put(postFileRemoveFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentCCBillFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchExploreAPI() {\n  try {\n    const inputData = yield select(state => state.post.explorePosts.inputData);\n    const response = yield api.postMethod(\"explore\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchExploreSuccess(response.data.data));\n    } else {\n      yield put(fetchExploreFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchExploreFailure(error));\n    yield put(postFileRemoveFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PPVPaymentCoinPaymentAPI() {\n  try {\n    const paymentInputData = yield select(state => state.post.ppvPayCoinPayment.inputData);\n    const response = yield api.postMethod(\"posts_payment_by_coinpayment\", paymentInputData);\n\n    if (response.data.success) {\n      yield put(PPVPaymentCoinPaymentSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      setTimeout(() => {\n        window.location.assign(`${response.data.data.redirect_web_url}`);\n      }, 3000);\n    } else {\n      yield put(PPVPaymentCoinPaymentFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentCoinPaymentFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchPostCategories() {\n  try {\n    const inputData = yield select(state => state.post.postCategories.inputData);\n    const response = yield api.postMethod(\"post_categories_list\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchPostCategoriesSuccess(response.data.data));\n    } else {\n      yield put(fetchPostCategoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPostCategoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchReportReason() {\n  try {\n    const response = yield api.postMethod(\"report_reasons_index\");\n\n    if (response.data.success) {\n      yield put(fetchReportReasonSuccess(response.data.data));\n    } else {\n      yield put(fetchReportReasonFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchReportReasonFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(SAVE_POST_START, savePostAPI)]);\n  yield all([yield takeLatest(FETCH_POSTS_START, fetchPostsAPI)]);\n  yield all([yield takeLatest(FETCH_EXPLORE_START, fetchExploreAPI)]);\n  yield all([yield takeLatest(FETCH_SINGLE_POST_START, fetchSinglePostAPI)]);\n  yield all([yield takeLatest(DELETE_POST_START, deletePostAPI)]);\n  yield all([yield takeLatest(CHANGE_POST_STATUS_START, changePostStatusAPI)]);\n  yield all([yield takeLatest(POST_FILE_UPLOAD_START, postFileUploadAPI)]);\n  yield all([yield takeLatest(POST_FILE_REMOVE_START, postFileRemoveAPI)]);\n  yield all([yield takeLatest(PPV_PAYMENT_STRIPE_START, PPVPaymentStripeAPI)]);\n  yield all([yield takeLatest(PPV_PAYMENT_WALLET_START, PPVPaymentWalletAPI)]);\n  yield all([yield takeLatest(SAVE_REPORT_POST_START, saveReportPostAPI)]);\n  yield all([yield takeLatest(FETCH_REPORT_POSTS_START, fetchPostsAPI)]);\n  yield all([yield takeLatest(PPV_PAYMENT_PAYPAL_START, PPVPaymentPaypalAPI)]);\n  yield all([yield takeLatest(PPV_PAYMENT_CCBILL_START, PPVPaymentCCBillAPI)]);\n  yield all([yield takeLatest(PPV_PAYMENT_COINPAYMENT_START, PPVPaymentCoinPaymentAPI)]);\n  yield all([yield takeLatest(FETCH_POST_CATEGORIES_START, fetchPostCategories)]);\n  yield all([yield takeLatest(FETCH_REPORT_REASON_START, fetchReportReason)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/PostSaga.jsx"],"names":["call","select","put","takeLatest","all","api","CHANGE_POST_STATUS_START","DELETE_POST_START","FETCH_POSTS_START","FETCH_SINGLE_POST_START","POST_FILE_UPLOAD_START","POST_FILE_REMOVE_START","SAVE_POST_START","PPV_PAYMENT_STRIPE_START","PPV_PAYMENT_WALLET_START","SAVE_REPORT_POST_START","FETCH_REPORT_POSTS_START","PPV_PAYMENT_PAYPAL_START","PPV_PAYMENT_CCBILL_START","FETCH_EXPLORE_START","PPV_PAYMENT_COINPAYMENT_START","FETCH_POST_CATEGORIES_START","FETCH_REPORT_REASON_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","changePostStatusFailure","changePostStatusSuccess","deletePostFailure","deletePostSuccess","fetchPostsFailure","fetchPostsSuccess","fetchSinglePostFailure","fetchSinglePostSuccess","postFileUploadFailure","postFileUploadSuccess","savePostFailure","savePostSuccess","PPVPaymentStripeFailure","PPVPaymentStripeSuccess","PPVPaymentWalletSuccess","PPVPaymentWalletFailure","saveReportPostSuccess","saveReportPostFailure","fetchReportPostsSuccess","fetchReportPostsFailure","PPVPaymentPaypalFailure","PPVPaymentPaypalSuccess","PPVPaymentCCBillSuccess","PPVPaymentCCBillFailure","PPVPaymentCoinPaymentSuccess","PPVPaymentCoinPaymentFailure","fetchExploreFailure","fetchExploreSuccess","postFileRemoveFailure","postFileRemoveSuccess","fetchPostCategoriesFailure","fetchPostCategoriesSuccess","fetchReportReasonFailure","fetchReportReasonSuccess","checkLogoutStatus","savePostAPI","inputData","state","post","savePost","content","post_files","notificationMessage","response","postMethod","data","success","message","window","location","assign","post_unique_id","error","fetchPostsAPI","posts","fetchSinglePostAPI","singlePost","deletePostAPI","delPost","changePostStatusAPI","changePostStatus","postFileUploadAPI","fileUpload","PPVPaymentPaypalAPI","paymentInputData","ppvPayPal","PPVPaymentStripeAPI","ppvPayStripe","PPVPaymentWalletAPI","ppvPayWallet","fetchReportPostsAPI","saveReportPostAPI","saveReportPost","PPVPaymentCCBillAPI","ppvPayCCBill","redirect_web_url","postFileRemoveAPI","fileRemove","fetchExploreAPI","explorePosts","PPVPaymentCoinPaymentAPI","ppvPayCoinPayment","setTimeout","fetchPostCategories","postCategories","fetchReportReason","pageSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,UAA5B,EAAwCC,GAAxC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SACEC,wBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,uBAJF,EAKEC,sBALF,EAMEC,sBANF,EAOEC,eAPF,EAQEC,wBARF,EASEC,wBATF,EAUEC,sBAVF,EAWEC,wBAXF,EAYEC,wBAZF,EAaEC,wBAbF,EAcEC,mBAdF,EAeEC,6BAfF,EAgBEC,2BAhBF,EAiBEC,yBAjBF,QAkBO,2BAlBP;AAmBA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SACEC,6BADF,EAEEC,2BAFF,QAGO,6CAHP;AAIA,SACEC,uBADF,EAEEC,uBAFF,EAGEC,iBAHF,EAIEC,iBAJF,EAKEC,iBALF,EAMEC,iBANF,EAOEC,sBAPF,EAQEC,sBARF,EASEC,qBATF,EAUEC,qBAVF,EAWEC,eAXF,EAYEC,eAZF,EAaEC,uBAbF,EAcEC,uBAdF,EAeEC,uBAfF,EAgBEC,uBAhBF,EAiBEC,qBAjBF,EAkBEC,qBAlBF,EAmBEC,uBAnBF,EAoBEC,uBApBF,EAqBEC,uBArBF,EAsBEC,uBAtBF,EAuBEC,uBAvBF,EAwBEC,uBAxBF,EAyBEC,4BAzBF,EA0BEC,4BA1BF,EA2BEC,mBA3BF,EA4BEC,mBA5BF,EA6BEC,qBA7BF,EA8BEC,qBA9BF,EA+BEC,0BA/BF,EAgCEC,0BAhCF,EAiCEC,wBAjCF,EAkCEC,wBAlCF,QAmCO,uBAnCP;AAoCA,SACEC,iBADF,QAEO,wBAFP;;AAIA,UAAUC,WAAV,GAAwB;AACtB,MAAI;AACF,UAAMC,SAAS,GAAG,MAAM7D,MAAM,CAAE8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,QAAX,CAAoBH,SAAhC,CAA9B;;AAEA,QAAI,CAACA,SAAS,CAACI,OAAX,IAAsB,CAACJ,SAAS,CAACK,UAArC,EAAiD;AAC/C;AACA,YAAMjE,GAAG,CAACkC,eAAe,CAAC,yBAAD,CAAhB,CAAT;AACA,YAAMgC,mBAAmB,GAAG3C,2BAA2B,CACrD,yBADqD,CAAvD;AAGA,YAAMvB,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD,KAPD,MAOO;AACL,YAAMC,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,sBAAf,EAAuCR,SAAvC,CAAvB;;AACA,UAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,cAAMtE,GAAG,CAACmC,eAAe,CAACgC,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAhB,CAAT;AACA,cAAMH,mBAAmB,GAAG5C,6BAA6B,CACvD6C,QAAQ,CAACE,IAAT,CAAcE,OADyC,CAAzD;AAGA,cAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACAM,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,WAAWP,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBM,cAArD;AACD,OAPD,MAOO;AACL,cAAM3E,GAAG,CAACkC,eAAe,CAACiC,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAhB,CAAT;AACA,cAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,cAAM5E,GAAG,CAAC0D,iBAAiB,CAACS,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,cAAMrE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;AACF,GA5BD,CA4BE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAACkC,eAAe,CAAC0C,KAAD,CAAhB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUW,aAAV,GAA0B;AACxB,MAAI;AACF,UAAMjB,SAAS,GAAG,MAAM7D,MAAM,CAAE8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWgB,KAAX,CAAiBlB,SAA7B,CAA9B;AACA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,iBAAf,EAAkCR,SAAlC,CAAvB;;AACA,QAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAAC6B,iBAAiB,CAACsC,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAlB,CAAT;AACD,KAFD,MAEO;AACL,YAAMrE,GAAG,CAAC4B,iBAAiB,CAACuC,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAlB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAAC0D,iBAAiB,CAACS,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAMrE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAbD,CAaE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAAC4B,iBAAiB,CAACgD,KAAD,CAAlB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUa,kBAAV,GAA+B;AAC7B,MAAI;AACF,UAAMnB,SAAS,GAAG,MAAM7D,MAAM,CAAE8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWkB,UAAX,CAAsBpB,SAAlC,CAA9B;AACA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,uBAAf,EAAwCR,SAAxC,CAAvB;;AACA,QAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAAC+B,sBAAsB,CAACoC,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAvB,CAAT;AACD,KAFD,MAEO;AACL,YAAMrE,GAAG,CAAC8B,sBAAsB,CAACqC,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAvB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAAC0D,iBAAiB,CAACS,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAMrE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAbD,CAaE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAAC8B,sBAAsB,CAAC8C,KAAD,CAAvB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUe,aAAV,GAA0B;AACxB,MAAI;AACF,UAAMrB,SAAS,GAAG,MAAM7D,MAAM,CAAE8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWoB,OAAX,CAAmBtB,SAA/B,CAA9B;AACA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,wBAAf,EAAyCR,SAAzC,CAAvB;;AACA,QAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAAC2B,iBAAiB,CAACwC,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAlB,CAAT;AACA,YAAMH,mBAAmB,GAAG5C,6BAA6B,CACvD6C,QAAQ,CAACE,IAAT,CAAcE,OADyC,CAAzD;AAGA,YAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACAM,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,UAAvB;AACD,KAPD,MAOO;AACL,YAAM1E,GAAG,CAAC0B,iBAAiB,CAACyC,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAlB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAAC0D,iBAAiB,CAACS,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAMrE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAlBD,CAkBE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAAC0B,iBAAiB,CAACkD,KAAD,CAAlB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUiB,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAMvB,SAAS,GAAG,MAAM7D,MAAM,CAC3B8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWsB,gBAAX,CAA4BxB,SADX,CAA9B;AAGA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,cAAf,EAA+BR,SAA/B,CAAvB;;AACA,QAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAACyB,uBAAuB,CAAC0C,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAxB,CAAT;AACA,YAAMH,mBAAmB,GAAG5C,6BAA6B,CACvD6C,QAAQ,CAACE,IAAT,CAAcE,OADyC,CAAzD;AAGA,YAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD,KAND,MAMO;AACL,YAAMlE,GAAG,CAACwB,uBAAuB,CAAC2C,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAxB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAlBD,CAkBE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAACwB,uBAAuB,CAACoD,KAAD,CAAxB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUmB,iBAAV,GAA8B;AAC5B,MAAI;AACF,UAAMzB,SAAS,GAAG,MAAM7D,MAAM,CAAE8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWwB,UAAX,CAAsB1B,SAAlC,CAA9B;AACA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,mBAAf,EAAoCR,SAApC,CAAvB;;AACA,QAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAACiC,qBAAqB,CAACkC,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAtB,CAAT;AACD,KAFD,MAEO;AACL,YAAMrE,GAAG,CAACgC,qBAAqB,CAACmC,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAtB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAAC0D,iBAAiB,CAACS,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAMrE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAbD,CAaE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAACgC,qBAAqB,CAAC4C,KAAD,CAAtB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUqB,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAMC,gBAAgB,GAAG,MAAMzF,MAAM,CAClC8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAW2B,SAAX,CAAqB7B,SADG,CAArC;AAGA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CACrB,yBADqB,EAErBoB,gBAFqB,CAAvB;;AAIA,QAAIrB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAAC6C,uBAAuB,CAACsB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAxB,CAAT;AACA,YAAMH,mBAAmB,GAAG5C,6BAA6B,CACvD6C,QAAQ,CAACE,IAAT,CAAcE,OADyC,CAAzD;AAGA,YAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACAM,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,WAAWP,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBP,IAAnB,CAAwBa,cAA1D;AACD,KAPD,MAOO;AACL,YAAM3E,GAAG,CAAC4C,uBAAuB,CAACuB,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAxB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAtBD,CAsBE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAAC4C,uBAAuB,CAACgC,KAAD,CAAxB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUwB,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAMF,gBAAgB,GAAG,MAAMzF,MAAM,CAClC8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAW6B,YAAX,CAAwB/B,SADA,CAArC;AAGA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CACrB,yBADqB,EAErBoB,gBAFqB,CAAvB;;AAIA,QAAIrB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAACqC,uBAAuB,CAAC8B,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAxB,CAAT;AACA,YAAMH,mBAAmB,GAAG5C,6BAA6B,CACvD6C,QAAQ,CAACE,IAAT,CAAcE,OADyC,CAAzD;AAGA,YAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACAM,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,WAAWP,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBP,IAAnB,CAAwBa,cAA1D;AACD,KAPD,MAOO;AACL,YAAM3E,GAAG,CAACoC,uBAAuB,CAAC+B,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAxB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAAC0D,iBAAiB,CAACS,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAMrE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAvBD,CAuBE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAACoC,uBAAuB,CAACwC,KAAD,CAAxB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU0B,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAMJ,gBAAgB,GAAG,MAAMzF,MAAM,CAClC8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAW+B,YAAX,CAAwBjC,SADA,CAArC;AAGA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CACrB,yBADqB,EAErBoB,gBAFqB,CAAvB;;AAKA,QAAIrB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAACsC,uBAAuB,CAAC6B,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAxB,CAAT;AACA,YAAMH,mBAAmB,GAAG5C,6BAA6B,CACvD6C,QAAQ,CAACE,IAAT,CAAcE,OADyC,CAAzD;AAGA,YAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACAM,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,WAAWP,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBP,IAAnB,CAAwBa,cAA1D;AACD,KAPD,MAOO;AACL,YAAM3E,GAAG,CAACuC,uBAAuB,CAAC4B,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAxB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAvBD,CAuBE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAACuC,uBAAuB,CAACqC,KAAD,CAAxB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU4B,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAM3B,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,cAAf,CAAvB;;AACA,QAAID,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAAC0C,uBAAuB,CAACyB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAxB,CAAT;AACD,KAFD,MAEO;AACL,YAAMrE,GAAG,CAAC2C,uBAAuB,CAACwB,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAxB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAXD,CAWE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAAC2C,uBAAuB,CAACiC,KAAD,CAAxB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU6B,iBAAV,GAA8B;AAC5B,MAAI;AACF,UAAMnC,SAAS,GAAG,MAAM7D,MAAM,CAC3B8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWkC,cAAX,CAA0BpC,SADT,CAA9B;AAGA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,mBAAf,EAAoCR,SAApC,CAAvB;;AACA,QAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAACwC,qBAAqB,CAAC2B,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAtB,CAAT;AACA,YAAMH,mBAAmB,GAAG5C,6BAA6B,CACvD6C,QAAQ,CAACE,IAAT,CAAcE,OADyC,CAAzD;AAGA,YAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD,KAND,MAMO;AACL,YAAMlE,GAAG,CAACyC,qBAAqB,CAAC0B,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAtB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAlBD,CAkBE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAACyC,qBAAqB,CAACmC,KAAD,CAAtB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU+B,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAMT,gBAAgB,GAAG,MAAMzF,MAAM,CAClC8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWoC,YAAX,CAAwBtC,SADA,CAArC;AAGA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CACrB,yBADqB,EAErBoB,gBAFqB,CAAvB;;AAIA,QAAIrB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAAC8C,uBAAuB,CAACqB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAxB,CAAT;AACAG,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAwB,GAAEP,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmB8B,gBAAiB,EAA9D;AACD,KAHD,MAGO;AACL,YAAMnG,GAAG,CAAC+C,uBAAuB,CAACoB,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAxB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAlBD,CAkBE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAAC+C,uBAAuB,CAAC6B,KAAD,CAAxB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUkC,iBAAV,GAA8B;AAC5B,MAAI;AACF,UAAMxC,SAAS,GAAG,MAAM7D,MAAM,CAAE8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWuC,UAAX,CAAsBzC,SAAlC,CAA9B;AACA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,mBAAf,EAAoCR,SAApC,CAAvB;;AACA,QAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAACqD,qBAAqB,CAACc,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAtB,CAAT;AACD,KAFD,MAEO;AACL,YAAMrE,GAAG,CAACoD,qBAAqB,CAACe,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAtB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAAC0D,iBAAiB,CAACS,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAMrE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAbD,CAaE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAAC+C,uBAAuB,CAAC6B,KAAD,CAAxB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUoC,eAAV,GAA4B;AAC1B,MAAI;AACF,UAAM1C,SAAS,GAAG,MAAM7D,MAAM,CAC3B8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWyC,YAAX,CAAwB3C,SADP,CAA9B;AAGA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,SAAf,EAA0BR,SAA1B,CAAvB;;AACA,QAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAACmD,mBAAmB,CAACgB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAApB,CAAT;AACD,KAFD,MAEO;AACL,YAAMrE,GAAG,CAACkD,mBAAmB,CAACiB,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAApB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAdD,CAcE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAACkD,mBAAmB,CAAC0B,KAAD,CAApB,CAAT;AACA,UAAM5E,GAAG,CAACoD,qBAAqB,CAACwB,KAAD,CAAtB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUsC,wBAAV,GAAqC;AACnC,MAAI;AACF,UAAMhB,gBAAgB,GAAG,MAAMzF,MAAM,CAClC8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAW2C,iBAAX,CAA6B7C,SADL,CAArC;AAGA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CACrB,8BADqB,EAErBoB,gBAFqB,CAAvB;;AAIA,QAAIrB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAACgD,4BAA4B,CAACmB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAA7B,CAAT;AACA,YAAMH,mBAAmB,GAAG5C,6BAA6B,CACvD6C,QAAQ,CAACE,IAAT,CAAcE,OADyC,CAAzD;AAGA,YAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACAwC,MAAAA,UAAU,CAAC,MAAM;AACflC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAwB,GAAEP,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmB8B,gBAAiB,EAA9D;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KATD,MASO;AACL,YAAMnG,GAAG,CAACiD,4BAA4B,CAACkB,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAA7B,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAxBD,CAwBE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAACiD,4BAA4B,CAAC2B,KAAD,CAA7B,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AACD,UAAUyC,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAM/C,SAAS,GAAG,MAAM7D,MAAM,CAC3B8D,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAW8C,cAAX,CAA0BhD,SADT,CAA9B;AAGA,UAAMO,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,sBAAf,EAAuCR,SAAvC,CAAvB;;AACA,QAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAACuD,0BAA0B,CAACY,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAA3B,CAAT;AACD,KAFD,MAEO;AACL,YAAMrE,GAAG,CAACsD,0BAA0B,CAACa,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAA3B,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAdD,CAcE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAACsD,0BAA0B,CAACsB,KAAD,CAA3B,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU2C,iBAAV,GAA8B;AAC5B,MAAI;AACF,UAAM1C,QAAQ,GAAG,MAAMhE,GAAG,CAACiE,UAAJ,CAAe,sBAAf,CAAvB;;AACA,QAAID,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMtE,GAAG,CAACyD,wBAAwB,CAACU,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAzB,CAAT;AACD,KAFD,MAEO;AACL,YAAMrE,GAAG,CAACwD,wBAAwB,CAACW,QAAQ,CAACE,IAAT,CAAcO,KAAf,CAAzB,CAAT;AACA,YAAMV,mBAAmB,GAAG3C,2BAA2B,CACrD4C,QAAQ,CAACE,IAAT,CAAcO,KADuC,CAAvD;AAGA,YAAM5E,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF,GAXD,CAWE,OAAOU,KAAP,EAAc;AACd,UAAM5E,GAAG,CAACwD,wBAAwB,CAACoB,KAAD,CAAzB,CAAT;AACA,UAAMV,mBAAmB,GAAG3C,2BAA2B,CAACqD,KAAK,CAACL,OAAP,CAAvD;AACA,UAAMvE,GAAG,CAACqB,kBAAkB,CAAC6C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,eAAe,UAAU4C,QAAV,GAAqB;AAClC,QAAM5G,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACS,eAAD,EAAkBiD,WAAlB,CAAjB,CAAD,CAAT;AACA,QAAMzD,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACK,iBAAD,EAAoBuE,aAApB,CAAjB,CAAD,CAAT;AACA,QAAM3E,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACgB,mBAAD,EAAsBqF,eAAtB,CAAjB,CAAD,CAAT;AACA,QAAMpG,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACM,uBAAD,EAA0BwE,kBAA1B,CAAjB,CAAD,CAAT;AACA,QAAM7E,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACI,iBAAD,EAAoB4E,aAApB,CAAjB,CAAD,CAAT;AACA,QAAM/E,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACG,wBAAD,EAA2B+E,mBAA3B,CAAjB,CAAD,CAAT;AACA,QAAMjF,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACO,sBAAD,EAAyB6E,iBAAzB,CAAjB,CAAD,CAAT;AACA,QAAMnF,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACQ,sBAAD,EAAyB2F,iBAAzB,CAAjB,CAAD,CAAT;AAEA,QAAMlG,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACU,wBAAD,EAA2B+E,mBAA3B,CAAjB,CAAD,CAAT;AACA,QAAMxF,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACW,wBAAD,EAA2BgF,mBAA3B,CAAjB,CAAD,CAAT;AACA,QAAM1F,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACY,sBAAD,EAAyBkF,iBAAzB,CAAjB,CAAD,CAAT;AACA,QAAM7F,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACa,wBAAD,EAA2B+D,aAA3B,CAAjB,CAAD,CAAT;AACA,QAAM3E,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACc,wBAAD,EAA2BwE,mBAA3B,CAAjB,CAAD,CAAT;AACA,QAAMrF,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACe,wBAAD,EAA2BiF,mBAA3B,CAAjB,CAAD,CAAT;AACA,QAAM/F,GAAG,CAAC,CACR,MAAMD,UAAU,CAACiB,6BAAD,EAAgCsF,wBAAhC,CADR,CAAD,CAAT;AAGA,QAAMtG,GAAG,CAAC,CACR,MAAMD,UAAU,CAACkB,2BAAD,EAA8BwF,mBAA9B,CADR,CAAD,CAAT;AAGA,QAAMzG,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACmB,yBAAD,EAA4ByF,iBAA5B,CAAjB,CAAD,CAAT;AACD","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  CHANGE_POST_STATUS_START,\n  DELETE_POST_START,\n  FETCH_POSTS_START,\n  FETCH_SINGLE_POST_START,\n  POST_FILE_UPLOAD_START,\n  POST_FILE_REMOVE_START,\n  SAVE_POST_START,\n  PPV_PAYMENT_STRIPE_START,\n  PPV_PAYMENT_WALLET_START,\n  SAVE_REPORT_POST_START,\n  FETCH_REPORT_POSTS_START,\n  PPV_PAYMENT_PAYPAL_START,\n  PPV_PAYMENT_CCBILL_START,\n  FETCH_EXPLORE_START,\n  PPV_PAYMENT_COINPAYMENT_START,\n  FETCH_POST_CATEGORIES_START,\n  FETCH_REPORT_REASON_START,\n} from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  changePostStatusFailure,\n  changePostStatusSuccess,\n  deletePostFailure,\n  deletePostSuccess,\n  fetchPostsFailure,\n  fetchPostsSuccess,\n  fetchSinglePostFailure,\n  fetchSinglePostSuccess,\n  postFileUploadFailure,\n  postFileUploadSuccess,\n  savePostFailure,\n  savePostSuccess,\n  PPVPaymentStripeFailure,\n  PPVPaymentStripeSuccess,\n  PPVPaymentWalletSuccess,\n  PPVPaymentWalletFailure,\n  saveReportPostSuccess,\n  saveReportPostFailure,\n  fetchReportPostsSuccess,\n  fetchReportPostsFailure,\n  PPVPaymentPaypalFailure,\n  PPVPaymentPaypalSuccess,\n  PPVPaymentCCBillSuccess,\n  PPVPaymentCCBillFailure,\n  PPVPaymentCoinPaymentSuccess,\n  PPVPaymentCoinPaymentFailure,\n  fetchExploreFailure,\n  fetchExploreSuccess,\n  postFileRemoveFailure,\n  postFileRemoveSuccess,\n  fetchPostCategoriesFailure,\n  fetchPostCategoriesSuccess,\n  fetchReportReasonFailure,\n  fetchReportReasonSuccess,\n} from \"../actions/PostAction\";\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* savePostAPI() {\n  try {\n    const inputData = yield select((state) => state.post.savePost.inputData);\n\n    if (!inputData.content && !inputData.post_files) {\n      // !!!!! Dont change this condition. If changing get confirmation vidhya\n      yield put(savePostFailure(\"Please fill the content\"));\n      const notificationMessage = getErrorNotificationMessage(\n        \"Please fill the content\"\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      const response = yield api.postMethod(\"posts_save_for_owner\", inputData);\n      if (response.data.success) {\n        yield put(savePostSuccess(response.data.data));\n        const notificationMessage = getSuccessNotificationMessage(\n          response.data.message\n        );\n        yield put(createNotification(notificationMessage));\n        window.location.assign(\"/post/\" + response.data.data.post_unique_id);\n      } else {\n        yield put(savePostFailure(response.data.error));\n        const notificationMessage = getErrorNotificationMessage(\n          response.data.error\n        );\n        yield put(checkLogoutStatus(response.data));\n        yield put(createNotification(notificationMessage));\n      }\n    }\n  } catch (error) {\n    yield put(savePostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchPostsAPI() {\n  try {\n    const inputData = yield select((state) => state.post.posts.inputData);\n    const response = yield api.postMethod(\"posts_for_owner\", inputData);\n    if (response.data.success) {\n      yield put(fetchPostsSuccess(response.data.data));\n    } else {\n      yield put(fetchPostsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPostsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSinglePostAPI() {\n  try {\n    const inputData = yield select((state) => state.post.singlePost.inputData);\n    const response = yield api.postMethod(\"posts_view_for_others\", inputData);\n    if (response.data.success) {\n      yield put(fetchSinglePostSuccess(response.data.data));\n    } else {\n      yield put(fetchSinglePostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSinglePostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deletePostAPI() {\n  try {\n    const inputData = yield select((state) => state.post.delPost.inputData);\n    const response = yield api.postMethod(\"posts_delete_for_owner\", inputData);\n    if (response.data.success) {\n      yield put(deletePostSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(deletePostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deletePostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* changePostStatusAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.changePostStatus.inputData\n    );\n    const response = yield api.postMethod(\"posts_status\", inputData);\n    if (response.data.success) {\n      yield put(changePostStatusSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(changePostStatusFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(changePostStatusFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* postFileUploadAPI() {\n  try {\n    const inputData = yield select((state) => state.post.fileUpload.inputData);\n    const response = yield api.postMethod(\"post_files_upload\", inputData);\n    if (response.data.success) {\n      yield put(postFileUploadSuccess(response.data.data));\n    } else {\n      yield put(postFileUploadFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(postFileUploadFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PPVPaymentPaypalAPI() {\n  try {\n    const paymentInputData = yield select(\n      (state) => state.post.ppvPayPal.inputData\n    );\n    const response = yield api.postMethod(\n      \"posts_payment_by_paypal\",\n      paymentInputData\n    );\n    if (response.data.success) {\n      yield put(PPVPaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(PPVPaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PPVPaymentStripeAPI() {\n  try {\n    const paymentInputData = yield select(\n      (state) => state.post.ppvPayStripe.inputData\n    );\n    const response = yield api.postMethod(\n      \"posts_payment_by_stripe\",\n      paymentInputData\n    );\n    if (response.data.success) {\n      yield put(PPVPaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(PPVPaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PPVPaymentWalletAPI() {\n  try {\n    const paymentInputData = yield select(\n      (state) => state.post.ppvPayWallet.inputData\n    );\n    const response = yield api.postMethod(\n      \"posts_payment_by_wallet\",\n      paymentInputData\n    );\n\n    if (response.data.success) {\n      yield put(PPVPaymentWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(PPVPaymentWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchReportPostsAPI() {\n  try {\n    const response = yield api.postMethod(\"report_posts\");\n    if (response.data.success) {\n      yield put(fetchReportPostsSuccess(response.data.data));\n    } else {\n      yield put(fetchReportPostsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchReportPostsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveReportPostAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.saveReportPost.inputData\n    );\n    const response = yield api.postMethod(\"report_posts_save\", inputData);\n    if (response.data.success) {\n      yield put(saveReportPostSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveReportPostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveReportPostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PPVPaymentCCBillAPI() {\n  try {\n    const paymentInputData = yield select(\n      (state) => state.post.ppvPayCCBill.inputData\n    );\n    const response = yield api.postMethod(\n      \"posts_payment_by_ccbill\",\n      paymentInputData\n    );\n    if (response.data.success) {\n      yield put(PPVPaymentCCBillSuccess(response.data.data));\n      window.location.assign(`${response.data.data.redirect_web_url}`);\n    } else {\n      yield put(PPVPaymentCCBillFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentCCBillFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* postFileRemoveAPI() {\n  try {\n    const inputData = yield select((state) => state.post.fileRemove.inputData);\n    const response = yield api.postMethod(\"post_files_remove\", inputData);\n    if (response.data.success) {\n      yield put(postFileRemoveSuccess(response.data.data));\n    } else {\n      yield put(postFileRemoveFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentCCBillFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchExploreAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.explorePosts.inputData\n    );\n    const response = yield api.postMethod(\"explore\", inputData);\n    if (response.data.success) {\n      yield put(fetchExploreSuccess(response.data.data));\n    } else {\n      yield put(fetchExploreFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchExploreFailure(error));\n    yield put(postFileRemoveFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PPVPaymentCoinPaymentAPI() {\n  try {\n    const paymentInputData = yield select(\n      (state) => state.post.ppvPayCoinPayment.inputData\n    );\n    const response = yield api.postMethod(\n      \"posts_payment_by_coinpayment\",\n      paymentInputData\n    );\n    if (response.data.success) {\n      yield put(PPVPaymentCoinPaymentSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      setTimeout(() => {\n        window.location.assign(`${response.data.data.redirect_web_url}`);\n      }, 3000);\n    } else {\n      yield put(PPVPaymentCoinPaymentFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(PPVPaymentCoinPaymentFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* fetchPostCategories() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.postCategories.inputData\n    );\n    const response = yield api.postMethod(\"post_categories_list\", inputData);\n    if (response.data.success) {\n      yield put(fetchPostCategoriesSuccess(response.data.data));\n    } else {\n      yield put(fetchPostCategoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPostCategoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchReportReason() {\n  try {\n    const response = yield api.postMethod(\"report_reasons_index\");\n    if (response.data.success) {\n      yield put(fetchReportReasonSuccess(response.data.data));\n    } else {\n      yield put(fetchReportReasonFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchReportReasonFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(SAVE_POST_START, savePostAPI)]);\n  yield all([yield takeLatest(FETCH_POSTS_START, fetchPostsAPI)]);\n  yield all([yield takeLatest(FETCH_EXPLORE_START, fetchExploreAPI)]);\n  yield all([yield takeLatest(FETCH_SINGLE_POST_START, fetchSinglePostAPI)]);\n  yield all([yield takeLatest(DELETE_POST_START, deletePostAPI)]);\n  yield all([yield takeLatest(CHANGE_POST_STATUS_START, changePostStatusAPI)]);\n  yield all([yield takeLatest(POST_FILE_UPLOAD_START, postFileUploadAPI)]);\n  yield all([yield takeLatest(POST_FILE_REMOVE_START, postFileRemoveAPI)]);\n\n  yield all([yield takeLatest(PPV_PAYMENT_STRIPE_START, PPVPaymentStripeAPI)]);\n  yield all([yield takeLatest(PPV_PAYMENT_WALLET_START, PPVPaymentWalletAPI)]);\n  yield all([yield takeLatest(SAVE_REPORT_POST_START, saveReportPostAPI)]);\n  yield all([yield takeLatest(FETCH_REPORT_POSTS_START, fetchPostsAPI)]);\n  yield all([yield takeLatest(PPV_PAYMENT_PAYPAL_START, PPVPaymentPaypalAPI)]);\n  yield all([yield takeLatest(PPV_PAYMENT_CCBILL_START, PPVPaymentCCBillAPI)]);\n  yield all([\n    yield takeLatest(PPV_PAYMENT_COINPAYMENT_START, PPVPaymentCoinPaymentAPI),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_POST_CATEGORIES_START, fetchPostCategories),\n  ]);\n  yield all([yield takeLatest(FETCH_REPORT_REASON_START, fetchReportReason)]);\n}\n"]},"metadata":{},"sourceType":"module"}