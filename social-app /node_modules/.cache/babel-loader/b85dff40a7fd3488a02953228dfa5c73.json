{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_CATEGORIES_START, FETCH_CATEGORY_USERS_START, FOLLOW_CATEGORY_START, UPDATE_CATEGORY_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchCategoriesFailure, fetchCategoriesSuccess, fetchCategoryUsersFailure, fetchCategoryUsersSuccess, followCategoryFailure, followCategorySuccess, updateCategoryFailure, updateCategorySuccess } from \"../actions/CategoryAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchCategoriesAPI() {\n  try {\n    const response = yield api.postMethod(\"u_categories_list\");\n\n    if (response.data.success) {\n      yield put(fetchCategoriesSuccess(response.data.data));\n    } else {\n      yield put(fetchCategoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCategoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* updateCategoryAPI() {\n  try {\n    const inputData = yield select(state => state.post.updateCategory.inputData);\n    const response = yield api.postMethod(\"posts_save_for_owner\", inputData);\n\n    if (response.data.success) {\n      yield put(updateCategorySuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(updateCategoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(updateCategoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchCategoryUsersAPI() {\n  try {\n    const inputData = yield select(state => state.category.categoryUsers.inputData);\n    const response = yield api.postMethod(\"u_categories_view\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchCategoryUsersSuccess(response.data.data));\n    } else {\n      yield put(fetchCategoryUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCategoryUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* followCategoryAPI() {\n  try {\n    const inputData = yield select(state => state.post.delPost.inputData);\n    const response = yield api.postMethod(\"posts_delete_for_owner\", inputData);\n\n    if (response.data.success) {\n      yield put(followCategorySuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(followCategoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(followCategoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_CATEGORIES_START, fetchCategoriesAPI)]);\n  yield all([yield takeLatest(UPDATE_CATEGORY_START, updateCategoryAPI)]);\n  yield all([yield takeLatest(FETCH_CATEGORY_USERS_START, fetchCategoryUsersAPI)]);\n  yield all([yield takeLatest(FOLLOW_CATEGORY_START, followCategoryAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/CategorySaga.jsx"],"names":["call","select","put","takeLatest","all","api","FETCH_CATEGORIES_START","FETCH_CATEGORY_USERS_START","FOLLOW_CATEGORY_START","UPDATE_CATEGORY_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchCategoriesFailure","fetchCategoriesSuccess","fetchCategoryUsersFailure","fetchCategoryUsersSuccess","followCategoryFailure","followCategorySuccess","updateCategoryFailure","updateCategorySuccess","checkLogoutStatus","fetchCategoriesAPI","response","postMethod","data","success","error","notificationMessage","message","updateCategoryAPI","inputData","state","post","updateCategory","fetchCategoryUsersAPI","category","categoryUsers","followCategoryAPI","delPost","window","location","assign","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  FETCH_CATEGORIES_START,\n  FETCH_CATEGORY_USERS_START,\n  FOLLOW_CATEGORY_START,\n  UPDATE_CATEGORY_START,\n} from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchCategoriesFailure,\n  fetchCategoriesSuccess,\n  fetchCategoryUsersFailure,\n  fetchCategoryUsersSuccess,\n  followCategoryFailure,\n  followCategorySuccess,\n  updateCategoryFailure,\n  updateCategorySuccess,\n} from \"../actions/CategoryAction\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchCategoriesAPI() {\n  try {\n    const response = yield api.postMethod(\"u_categories_list\");\n    if (response.data.success) {\n      yield put(fetchCategoriesSuccess(response.data.data));\n    } else {\n      yield put(fetchCategoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCategoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\nfunction* updateCategoryAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.updateCategory.inputData\n    );\n\n    const response = yield api.postMethod(\"posts_save_for_owner\", inputData);\n    if (response.data.success) {\n      yield put(updateCategorySuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(updateCategoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(updateCategoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchCategoryUsersAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.category.categoryUsers.inputData\n    );\n    const response = yield api.postMethod(\"u_categories_view\", inputData);\n    if (response.data.success) {\n      yield put(fetchCategoryUsersSuccess(response.data.data));\n    } else {\n      yield put(fetchCategoryUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCategoryUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* followCategoryAPI() {\n  try {\n    const inputData = yield select((state) => state.post.delPost.inputData);\n    const response = yield api.postMethod(\"posts_delete_for_owner\", inputData);\n    if (response.data.success) {\n      yield put(followCategorySuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(followCategoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(followCategoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_CATEGORIES_START, fetchCategoriesAPI)]);\n  yield all([yield takeLatest(UPDATE_CATEGORY_START, updateCategoryAPI)]);\n  yield all([\n    yield takeLatest(FETCH_CATEGORY_USERS_START, fetchCategoryUsersAPI),\n  ]);\n  yield all([yield takeLatest(FOLLOW_CATEGORY_START, followCategoryAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}