{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_WITHDRAWALS_START, SEND_WITHDRAW_REQUEST_START, CANCEL_WITHDRAW_REQUEST_START, FETCH_SINGLE_WITHDRAWALS_START, SEARCH_WITHDRAWALS_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchWithDrawalsSuccess, fetchWithDrawalsFailure, sendWithDrawRequestSuccess, sendWithDrawRequestFailure, cancelWithDrawRequestSuccess, cancelWithDrawRequestFailure, fetchSingleWithDrawalsSuccess, fetchSingleWithDrawalsFailure, searchWithDrawalsSuccess, searchWithDrawalsFailure, fetchWithDrawalsStart } from \"../actions/WithDrawAction\";\nimport { fetchWalletDetailsStart } from \"../actions/WalletAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchWithDrawAPI() {\n  try {\n    const response = yield api.postMethod(\"withdrawals_index\");\n\n    if (response.data.success) {\n      yield put(fetchWithDrawalsSuccess(response.data.data));\n    } else {\n      yield put(fetchWithDrawalsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchWithDrawalsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* sendWithDrawRequestAPI() {\n  try {\n    const inputData = yield select(state => state.withDraw.sendWithDraw.inputData);\n    const response = yield api.postMethod(\"withdrawals_send_request\", inputData);\n\n    if (response.data.success) {\n      yield put(sendWithDrawRequestSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      yield put(fetchWithDrawalsStart());\n      yield put(fetchWalletDetailsStart());\n    } else {\n      yield put(sendWithDrawRequestFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendWithDrawRequestFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* cancelWithDrawRequestAPI() {\n  try {\n    const inputData = yield select(state => state.withDraw.cancelWithDraw.inputData);\n    const response = yield api.postMethod(\"withdrawals_cancel_request\", inputData);\n\n    if (response.data.success) {\n      yield put(cancelWithDrawRequestSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      yield put(fetchWithDrawalsStart());\n    } else {\n      yield put(cancelWithDrawRequestFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(cancelWithDrawRequestFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSingleWithDrawAPI() {\n  try {\n    const inputData = yield select(state => state.withDraw.singleWithDraw.inputData);\n    const response = yield api.postMethod(\"withdrawals_view\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchSingleWithDrawalsSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(fetchSingleWithDrawalsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleWithDrawalsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* searchWithDrawAPI() {\n  try {\n    const inputData = yield select(state => state.withDraw.searchWithDraw.inputData);\n    const response = yield api.postMethod(\"withdrawals_search\", inputData);\n\n    if (response.data.success) {\n      yield put(searchWithDrawalsSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(searchWithDrawalsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(searchWithDrawalsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_WITHDRAWALS_START, fetchWithDrawAPI)]);\n  yield all([yield takeLatest(SEND_WITHDRAW_REQUEST_START, sendWithDrawRequestAPI)]);\n  yield all([yield takeLatest(CANCEL_WITHDRAW_REQUEST_START, cancelWithDrawRequestAPI)]);\n  yield all([yield takeLatest(FETCH_SINGLE_WITHDRAWALS_START, fetchSingleWithDrawAPI)]);\n  yield all([yield takeLatest(SEARCH_WITHDRAWALS_START, searchWithDrawAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/WithDrawSaga.jsx"],"names":["call","select","put","takeLatest","all","api","FETCH_WITHDRAWALS_START","SEND_WITHDRAW_REQUEST_START","CANCEL_WITHDRAW_REQUEST_START","FETCH_SINGLE_WITHDRAWALS_START","SEARCH_WITHDRAWALS_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchWithDrawalsSuccess","fetchWithDrawalsFailure","sendWithDrawRequestSuccess","sendWithDrawRequestFailure","cancelWithDrawRequestSuccess","cancelWithDrawRequestFailure","fetchSingleWithDrawalsSuccess","fetchSingleWithDrawalsFailure","searchWithDrawalsSuccess","searchWithDrawalsFailure","fetchWithDrawalsStart","fetchWalletDetailsStart","checkLogoutStatus","fetchWithDrawAPI","response","postMethod","data","success","error","notificationMessage","message","sendWithDrawRequestAPI","inputData","state","withDraw","sendWithDraw","cancelWithDrawRequestAPI","cancelWithDraw","fetchSingleWithDrawAPI","singleWithDraw","searchWithDrawAPI","searchWithDraw","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  FETCH_WITHDRAWALS_START,\n  SEND_WITHDRAW_REQUEST_START,\n  CANCEL_WITHDRAW_REQUEST_START,\n  FETCH_SINGLE_WITHDRAWALS_START,\n  SEARCH_WITHDRAWALS_START,\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\nimport {\n  fetchWithDrawalsSuccess,\n  fetchWithDrawalsFailure,\n  sendWithDrawRequestSuccess,\n  sendWithDrawRequestFailure,\n  cancelWithDrawRequestSuccess,\n  cancelWithDrawRequestFailure,\n  fetchSingleWithDrawalsSuccess,\n  fetchSingleWithDrawalsFailure,\n  searchWithDrawalsSuccess,\n  searchWithDrawalsFailure,\n  fetchWithDrawalsStart,\n} from \"../actions/WithDrawAction\";\nimport { fetchWalletDetailsStart } from \"../actions/WalletAction\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchWithDrawAPI() {\n  try {\n    const response = yield api.postMethod(\"withdrawals_index\");\n\n    if (response.data.success) {\n      yield put(fetchWithDrawalsSuccess(response.data.data));\n    } else {\n      yield put(fetchWithDrawalsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchWithDrawalsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* sendWithDrawRequestAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.withDraw.sendWithDraw.inputData\n    );\n    const response = yield api.postMethod(\n      \"withdrawals_send_request\",\n      inputData\n    );\n\n    if (response.data.success) {\n      yield put(sendWithDrawRequestSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(fetchWithDrawalsStart());\n      yield put(fetchWalletDetailsStart());\n    } else {\n      yield put(sendWithDrawRequestFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendWithDrawRequestFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* cancelWithDrawRequestAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.withDraw.cancelWithDraw.inputData\n    );\n    const response = yield api.postMethod(\n      \"withdrawals_cancel_request\",\n      inputData\n    );\n\n    if (response.data.success) {\n      yield put(cancelWithDrawRequestSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(fetchWithDrawalsStart());\n    } else {\n      yield put(cancelWithDrawRequestFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(cancelWithDrawRequestFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSingleWithDrawAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.withDraw.singleWithDraw.inputData\n    );\n    const response = yield api.postMethod(\"withdrawals_view\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchSingleWithDrawalsSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(fetchSingleWithDrawalsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleWithDrawalsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* searchWithDrawAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.withDraw.searchWithDraw.inputData\n    );\n    const response = yield api.postMethod(\"withdrawals_search\", inputData);\n\n    if (response.data.success) {\n      yield put(searchWithDrawalsSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(searchWithDrawalsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(searchWithDrawalsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_WITHDRAWALS_START, fetchWithDrawAPI)]);\n  yield all([\n    yield takeLatest(SEND_WITHDRAW_REQUEST_START, sendWithDrawRequestAPI),\n  ]);\n  yield all([\n    yield takeLatest(CANCEL_WITHDRAW_REQUEST_START, cancelWithDrawRequestAPI),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_SINGLE_WITHDRAWALS_START, fetchSingleWithDrawAPI),\n  ]);\n  yield all([yield takeLatest(SEARCH_WITHDRAWALS_START, searchWithDrawAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}