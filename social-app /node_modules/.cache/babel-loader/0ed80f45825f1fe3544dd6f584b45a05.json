{"ast":null,"code":"var _jsxFileName = \"/Users/devsmac/Downloads/fx-frontend/src/components/Verification/VerificationCodeInput.jsx\";\nimport React, { useState, useRef } from \"react\";\n\nconst VerificationCodeInput = ({\n  length,\n  label,\n  loading,\n  onComplete,\n  labelClassName\n}) => {\n  const [code, setCode] = useState([...Array(length)].map(() => \"\"));\n  const inputs = useRef([]);\n\n  const processInput = (e, slot) => {\n    if (e.target.value.length >= length) {\n      const num = e.target.value;\n      const myArr = num.split(\"\");\n      const newCode = [];\n      myArr.map((value, index) => {\n        if (index < length) {\n          newCode[index] = value;\n        }\n      });\n      setCode(newCode);\n      inputs.current[length - 1].focus();\n\n      if (newCode.every(num => num !== \"\")) {\n        onComplete(newCode.join(\"\"));\n      }\n    } else {\n      const num = e.target.value;\n      if (/[^0-9]/.test(num)) return;\n      const newCode = [...code];\n      newCode[slot] = num;\n      setCode(newCode);\n\n      if (slot !== length - 1) {\n        inputs.current[slot + 1].focus();\n      }\n\n      if (newCode.every(num => num !== \"\")) {\n        onComplete(newCode.join(\"\"));\n      }\n    }\n  };\n\n  const onKeyUp = (e, slot) => {\n    if (e.keyCode === 8 && !code[slot] && slot !== 0) {\n      const newCode = [...code];\n      newCode[slot - 1] = \"\";\n      setCode(newCode);\n      inputs.current[slot - 1].focus();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"code-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"lable\", {\n    className: labelClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, label), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"code-inputs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, code.map((num, idx) => {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      key: idx,\n      maxlength: 1,\n      type: \"text\",\n      inputMode: \"numeric\" // maxLength={1}\n      ,\n      value: num,\n      autoFocus: !code[0].length && idx === 0 // readOnly={loading}\n      ,\n      onChange: e => processInput(e, idx),\n      onKeyUp: e => onKeyUp(e, idx),\n      ref: ref => inputs.current.push(ref),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }\n    });\n  }))));\n};\n\nexport default VerificationCodeInput;","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/components/Verification/VerificationCodeInput.jsx"],"names":["React","useState","useRef","VerificationCodeInput","length","label","loading","onComplete","labelClassName","code","setCode","Array","map","inputs","processInput","e","slot","target","value","num","myArr","split","newCode","index","current","focus","every","join","test","onKeyUp","keyCode","idx","ref","push"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nconst VerificationCodeInput = ({\n  length,\n  label,\n  loading,\n  onComplete,\n  labelClassName,\n}) => {\n  const [code, setCode] = useState([...Array(length)].map(() => \"\"));\n  const inputs = useRef([]);\n\n  const processInput = (e, slot) => {\n    if (e.target.value.length >= length) {\n      const num = e.target.value;\n      const myArr = num.split(\"\");\n      const newCode = [];\n      myArr.map((value, index) => {\n        if (index < length) {\n          newCode[index] = value;\n        }\n      });\n      setCode(newCode);\n\n      inputs.current[length - 1].focus();\n\n      if (newCode.every((num) => num !== \"\")) {\n        onComplete(newCode.join(\"\"));\n      }\n    } else {\n      const num = e.target.value;\n      if (/[^0-9]/.test(num)) return;\n      const newCode = [...code];\n      newCode[slot] = num;\n      setCode(newCode);\n      if (slot !== length - 1) {\n        inputs.current[slot + 1].focus();\n      }\n      if (newCode.every((num) => num !== \"\")) {\n        onComplete(newCode.join(\"\"));\n      }\n    }\n  };\n\n  const onKeyUp = (e, slot) => {\n    if (e.keyCode === 8 && !code[slot] && slot !== 0) {\n      const newCode = [...code];\n      newCode[slot - 1] = \"\";\n      setCode(newCode);\n      inputs.current[slot - 1].focus();\n    }\n  };\n\n  return (\n    <>\n      <div className=\"code-input\">\n        <lable className={labelClassName}>{label}</lable>\n        <div className=\"code-inputs\">\n          {code.map((num, idx) => {\n            return (\n              <input\n                key={idx}\n                maxlength={1}\n                type=\"text\"\n                inputMode=\"numeric\"\n                // maxLength={1}\n                value={num}\n                autoFocus={!code[0].length && idx === 0}\n                // readOnly={loading}\n                onChange={(e) => processInput(e, idx)}\n                onKeyUp={e => onKeyUp(e, idx)}\n                ref={(ref) => inputs.current.push(ref)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default VerificationCodeInput;\n"]},"metadata":{},"sourceType":"module"}