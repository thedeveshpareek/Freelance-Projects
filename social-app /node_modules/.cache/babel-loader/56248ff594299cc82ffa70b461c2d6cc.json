{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { deleteFavFailure, deleteFavSuccess, fetchFavFailure, fetchFavSuccess, saveFavFailure, saveFavSuccess } from \"../actions/FavAction\";\nimport { DELETE_FAV_START, FETCH_FAV_START, SAVE_FAV_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchFavAPI() {\n  try {\n    const inputData = yield select(state => state.fav.fav.inputData);\n    const response = yield api.postMethod(\"fav_users\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchFavSuccess(response.data.data));\n    } else {\n      yield put(fetchFavFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchFavFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveFavAPI() {\n  try {\n    const inputData = yield select(state => state.fav.saveFav.inputData);\n    const response = yield api.postMethod(\"fav_users_save\", inputData);\n\n    if (response.data.success) {\n      yield put(saveFavSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveFavFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveFavFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteFavAPI() {\n  try {\n    const inputData = yield select(state => state.fav.deleteFav.inputData);\n    const response = yield api.postMethod(\"fav_users_delete\", inputData);\n\n    if (response.data.success) {\n      yield put(deleteFavSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteFavFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteFavFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_FAV_START, fetchFavAPI)]);\n  yield all([yield takeLatest(SAVE_FAV_START, saveFavAPI)]);\n  yield all([yield takeLatest(DELETE_FAV_START, deleteFavAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/FavSaga.jsx"],"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","deleteFavFailure","deleteFavSuccess","fetchFavFailure","fetchFavSuccess","saveFavFailure","saveFavSuccess","DELETE_FAV_START","FETCH_FAV_START","SAVE_FAV_START","checkLogoutStatus","fetchFavAPI","inputData","state","fav","response","postMethod","data","success","error","notificationMessage","message","saveFavAPI","saveFav","deleteFavAPI","deleteFav","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  deleteFavFailure,\n  deleteFavSuccess,\n  fetchFavFailure,\n  fetchFavSuccess,\n  saveFavFailure,\n  saveFavSuccess,\n} from \"../actions/FavAction\";\nimport {\n  DELETE_FAV_START,\n  FETCH_FAV_START,\n  SAVE_FAV_START,\n} from \"../actions/ActionConstant\";\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchFavAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.fav.fav.inputData\n    );\n    const response = yield api.postMethod(\"fav_users\",inputData);\n    if (response.data.success) {\n      yield put(fetchFavSuccess(response.data.data));\n    } else {\n      yield put(fetchFavFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchFavFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveFavAPI() {\n  try {\n    const inputData = yield select((state) => state.fav.saveFav.inputData);\n    const response = yield api.postMethod(\"fav_users_save\", inputData);\n    if (response.data.success) {\n      yield put(saveFavSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveFavFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveFavFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteFavAPI() {\n  try {\n    const inputData = yield select((state) => state.fav.deleteFav.inputData);\n    const response = yield api.postMethod(\"fav_users_delete\", inputData);\n    if (response.data.success) {\n      yield put(deleteFavSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteFavFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteFavFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_FAV_START, fetchFavAPI)]);\n  yield all([yield takeLatest(SAVE_FAV_START, saveFavAPI)]);\n  yield all([yield takeLatest(DELETE_FAV_START, deleteFavAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}