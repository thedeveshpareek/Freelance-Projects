{"ast":null,"code":"var _jsxFileName = \"/Users/devsmac/Downloads/fx-frontend/src/components/Post/postMentions/PostEditor.jsx\";\nimport React, { useState, useRef } from \"react\";\nimport { EditorState, convertToRaw, Modifier } from \"draft-js\";\nimport Editor from \"draft-js-plugins-editor\";\nimport createMentionPlugin, { defaultSuggestionsFilter } from \"draft-js-mention-plugin\";\nimport \"draft-js/dist/Draft.css\";\nimport \"draft-js-mention-plugin/lib/plugin.css\";\nimport { connect } from \"react-redux\";\nimport { searchUserStart } from \"../../../store/actions/HomeAction\";\nimport { translate, t } from \"react-multi-lang\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport { Picker, EmojiData } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { useEffect } from \"react\";\nimport createHashtagPlugin from \"draft-js-hashtag-plugin\";\nimport \"draft-js-hashtag-plugin/lib/plugin.css\";\nimport createLinkifyPlugin from \"draft-js-linkify-plugin\";\nimport \"draft-js-linkify-plugin/lib/plugin.css\";\nimport draftToHtml from \"draftjs-to-html\";\nconst hashtagPlugin = createHashtagPlugin();\nconst linkifyPlugin = createLinkifyPlugin();\nconst mentionPlugin = createMentionPlugin();\nconst {\n  MentionSuggestions\n} = mentionPlugin;\nconst plugins = [mentionPlugin, linkifyPlugin, hashtagPlugin];\nexport const PostEditor = props => {\n  const [suggestions, setSuggestions] = useState([]);\n  const [mentions, setMentions] = useState([]);\n  const [focusStyle, setFocusStyle] = useState(false); // Draft-JS editor configuration\n\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  useEffect(() => {\n    if (props.editorState) {\n      const content = convertToRaw(props.editorState.getCurrentContent()).blocks;\n      props.getEditorRawContent(content.map(block => !block.text.trim() && \"\\n\" || block.text).join(\"\\n\"));\n      props.getEditorHtmlContent(tohtml());\n    }\n  }, []);\n  const editor = useRef(null);\n\n  const tohtml = () => {\n    const contentState = props.editorState ? props.editorState.getCurrentContent() : editorState.getCurrentContent();\n    const raw = convertToRaw(contentState);\n    var host = window.location.origin; // let options = {\n    //   entityStyleFn: (entity) => {\n    //     const entityType = entity.get(\"type\").toLowerCase();\n    //     console.log(entity)\n    //     if (entityType === \"mention\") {\n    //       const data = entity.getData();\n    //       return {\n    //         element: \"a\",\n    //         attributes: {\n    //           href: `${host}/${data.mention.link}`,\n    //         },\n    //         style: {\n    //           paddingRight: \"5px\",\n    //         },\n    //       };\n    //     }\n    //   },\n    // };\n    // let html =  stateToHTML(contentState, options);\n    // console.log(html)\n\n    const hashConfig = {\n      trigger: \"#\",\n      separator: \" \"\n    };\n\n    const customEntityTransform = (entity, text) => {\n      if (entity.type !== \"mention\") return;\n      return `<a href=\"${host}/${entity.data.mention.link}\">${text}</a>`;\n    };\n\n    const rawContentState = raw;\n    return draftToHtml(rawContentState, hashConfig, false, customEntityTransform); //return stateToHTML(contentState, options);\n  }; // Check editor text for mentions\n\n\n  const onSearchChange = ({\n    value\n  }) => {\n    props.dispatch(searchUserStart({\n      key: value\n    }));\n    console.log(value);\n    let fetchedData = props.searchUser.data.users;\n    var newData = [];\n    fetchedData && fetchedData.map(user => newData.push({\n      id: user.user_id,\n      name: `@${user.name}`,\n      link: user.user_unique_id,\n      avatar: user.picture\n    })); // console.log(newData)\n\n    props.searchUser.data.users && setMentions(newData);\n    setSuggestions(defaultSuggestionsFilter(value, mentions));\n  };\n\n  const onAddMention = () => {}; // Focus on editor window\n\n\n  const focusEditor = () => {\n    // editor.current.focus();\n    setFocusStyle(true);\n  }; //blur handler\n\n\n  const blurEditor = () => {\n    setFocusStyle(false);\n  };\n\n  const handleChange = editorState => {\n    props.setEditorState != undefined ? props.setEditorState(editorState) : setEditorState(editorState);\n    props.getEditorHtmlContent(tohtml());\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onFocus: () => focusEditor(),\n    onBlur: () => blurEditor(),\n    className: focusStyle ? \"hasFocus active\" : \"hasFocus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Editor, {\n    ref: editor,\n    editorState: props.editorState != undefined ? props.editorState : editorState,\n    plugins: plugins,\n    onChange: editorState => handleChange(editorState),\n    placeholder: props.placeholder ? props.placeholder : t(\"new_post_placeholder\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MentionSuggestions, {\n    onSearchChange: onSearchChange,\n    suggestions: mentions,\n    onAddMention: onAddMention,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToPros = state => ({\n  searchUser: state.home.searchUser\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch\n  };\n};\n\nexport default connect(mapStateToPros, mapDispatchToProps)(translate(PostEditor));","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/components/Post/postMentions/PostEditor.jsx"],"names":["React","useState","useRef","EditorState","convertToRaw","Modifier","Editor","createMentionPlugin","defaultSuggestionsFilter","connect","searchUserStart","translate","t","stateToHTML","Picker","EmojiData","useEffect","createHashtagPlugin","createLinkifyPlugin","draftToHtml","hashtagPlugin","linkifyPlugin","mentionPlugin","MentionSuggestions","plugins","PostEditor","props","suggestions","setSuggestions","mentions","setMentions","focusStyle","setFocusStyle","editorState","setEditorState","createEmpty","content","getCurrentContent","blocks","getEditorRawContent","map","block","text","trim","join","getEditorHtmlContent","tohtml","editor","contentState","raw","host","window","location","origin","hashConfig","trigger","separator","customEntityTransform","entity","type","data","mention","link","rawContentState","onSearchChange","value","dispatch","key","console","log","fetchedData","searchUser","users","newData","user","push","id","user_id","name","user_unique_id","avatar","picture","onAddMention","focusEditor","blurEditor","handleChange","undefined","placeholder","mapStateToPros","state","home","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { EditorState, convertToRaw, Modifier } from \"draft-js\";\nimport Editor from \"draft-js-plugins-editor\";\nimport createMentionPlugin, {\n  defaultSuggestionsFilter,\n} from \"draft-js-mention-plugin\";\nimport \"draft-js/dist/Draft.css\";\nimport \"draft-js-mention-plugin/lib/plugin.css\";\nimport { connect } from \"react-redux\";\nimport { searchUserStart } from \"../../../store/actions/HomeAction\";\nimport { translate, t } from \"react-multi-lang\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport { Picker, EmojiData } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { useEffect } from \"react\";\nimport createHashtagPlugin from \"draft-js-hashtag-plugin\";\nimport \"draft-js-hashtag-plugin/lib/plugin.css\";\nimport createLinkifyPlugin from \"draft-js-linkify-plugin\";\nimport \"draft-js-linkify-plugin/lib/plugin.css\";\nimport draftToHtml from \"draftjs-to-html\";\n\nconst hashtagPlugin = createHashtagPlugin();\nconst linkifyPlugin = createLinkifyPlugin();\nconst mentionPlugin = createMentionPlugin();\nconst { MentionSuggestions } = mentionPlugin;\nconst plugins = [mentionPlugin, linkifyPlugin, hashtagPlugin];\n\nexport const PostEditor = (props) => {\n  const [suggestions, setSuggestions] = useState([]);\n\n  const [mentions, setMentions] = useState([]);\n\n  const [focusStyle, setFocusStyle] = useState(false);\n\n  // Draft-JS editor configuration\n  const [editorState, setEditorState] = useState(() =>\n    EditorState.createEmpty()\n  );\n\n  useEffect(() => {\n    if (props.editorState) {\n      const content = convertToRaw(\n        props.editorState.getCurrentContent()\n      ).blocks;\n      props.getEditorRawContent(\n        content\n          .map((block) => (!block.text.trim() && \"\\n\") || block.text)\n          .join(\"\\n\")\n      );\n      props.getEditorHtmlContent(tohtml());\n    }\n  }, []);\n\n  const editor = useRef(null);\n\n  const tohtml = () => {\n    const contentState = props.editorState\n      ? props.editorState.getCurrentContent()\n      : editorState.getCurrentContent();\n    const raw = convertToRaw(contentState);\n\n    var host = window.location.origin;\n\n    // let options = {\n    //   entityStyleFn: (entity) => {\n    //     const entityType = entity.get(\"type\").toLowerCase();\n    //     console.log(entity)\n    //     if (entityType === \"mention\") {\n    //       const data = entity.getData();\n    //       return {\n    //         element: \"a\",\n    //         attributes: {\n    //           href: `${host}/${data.mention.link}`,\n    //         },\n    //         style: {\n    //           paddingRight: \"5px\",\n    //         },\n    //       };\n    //     }\n    //   },\n    // };\n\n    // let html =  stateToHTML(contentState, options);\n\n    // console.log(html)\n\n    const hashConfig = {\n      trigger: \"#\",\n      separator: \" \",\n    };\n\n    const customEntityTransform = (entity, text) => {\n      if (entity.type !== \"mention\") return;\n      return `<a href=\"${host}/${entity.data.mention.link}\">${text}</a>`;\n    };\n\n    const rawContentState = raw;\n\n    return draftToHtml(\n      rawContentState,\n      hashConfig,\n      false,\n      customEntityTransform\n    );\n\n    //return stateToHTML(contentState, options);\n  };\n\n  // Check editor text for mentions\n  const onSearchChange = ({ value }) => {\n    props.dispatch(searchUserStart({ key: value }));\n    console.log(value);\n\n    let fetchedData = props.searchUser.data.users;\n\n    var newData = [];\n\n    fetchedData &&\n      fetchedData.map((user) =>\n        newData.push({\n          id: user.user_id,\n          name: `@${user.name}`,\n          link: user.user_unique_id,\n          avatar: user.picture,\n        })\n      );\n\n    // console.log(newData)\n\n    props.searchUser.data.users && setMentions(newData);\n\n    setSuggestions(defaultSuggestionsFilter(value, mentions));\n  };\n\n  const onAddMention = () => {};\n\n  // Focus on editor window\n  const focusEditor = () => {\n    // editor.current.focus();\n    setFocusStyle(true);\n  };\n\n  //blur handler\n  const blurEditor = () => {\n    setFocusStyle(false);\n  };\n\n  const handleChange = (editorState) => {\n    props.setEditorState != undefined\n      ? props.setEditorState(editorState)\n      : setEditorState(editorState);\n    props.getEditorHtmlContent(tohtml());\n  };\n\n  return (\n    <div\n      onFocus={() => focusEditor()}\n      onBlur={() => blurEditor()}\n      className={focusStyle ? \"hasFocus active\" : \"hasFocus\"}\n    >\n      <Editor\n        ref={editor}\n        editorState={\n          props.editorState != undefined ? props.editorState : editorState\n        }\n        plugins={plugins}\n        onChange={(editorState) => handleChange(editorState)}\n        placeholder={\n          props.placeholder ? props.placeholder : t(\"new_post_placeholder\")\n        }\n      ></Editor>\n      <MentionSuggestions\n        onSearchChange={onSearchChange}\n        suggestions={mentions}\n        onAddMention={onAddMention}\n      />\n    </div>\n  );\n};\n\nconst mapStateToPros = (state) => ({\n  searchUser: state.home.searchUser,\n});\nconst mapDispatchToProps = (dispatch) => {\n  return { dispatch };\n};\n\nexport default connect(\n  mapStateToPros,\n  mapDispatchToProps\n)(translate(PostEditor));\n"]},"metadata":{},"sourceType":"module"}