{"ast":null,"code":"import { useState, useEffect } from \"react\";\n\nconst useInfiniteScroll = callback => {\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  useEffect(() => {\n    if (!isFetching) return;\n    callback();\n  }, [isFetching]); // const scrollTop =\n  //   (document.documentElement && document.documentElement.scrollTop) ||\n  //   document.body.scrollTop;\n  // const scrollHeight =\n  //   (document.documentElement && document.documentElement.scrollHeight) ||\n  //   document.body.scrollHeight;\n  // if (scrollTop + window.innerHeight + 50 >= scrollHeight) {\n  //   setIsFetching(true);\n  // }\n  // function handleScroll() {\n  //   const scrollTop =\n  //     (document.documentElement && document.documentElement.scrollTop) ||\n  //     document.body.scrollTop;\n  //   const scrollHeight =\n  //     (document.documentElement && document.documentElement.scrollHeight) ||\n  //     document.body.scrollHeight;\n  //   if (scrollTop + window.innerHeight + 50 >= scrollHeight) {\n  //     setIsFetching(true);\n  //   }\n  // }\n\n  function handleScroll() {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\n    setIsFetching(true);\n  }\n\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/components/helper/useInfiniteScroll.jsx"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","window","addEventListener","handleScroll","removeEventListener","innerHeight","document","documentElement","scrollTop","offsetHeight"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACtC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,YAAlC;AACA,WAAO,MAAMF,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCD,YAArC,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACG,UAAL,EAAiB;AACjBD,IAAAA,QAAQ;AACT,GAHQ,EAGN,CAACC,UAAD,CAHM,CAAT,CARsC,CAatC;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAASI,YAAT,GAAwB;AACtB,QACEF,MAAM,CAACI,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACEF,QAAQ,CAACC,eAAT,CAAyBE,YAD3B,IAEAV,UAHF,EAKE;AACFC,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD;;AAED,SAAO,CAACD,UAAD,EAAaC,aAAb,CAAP;AACD,CAhDD;;AAkDA,eAAeH,iBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useInfiniteScroll = (callback) => {\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  useEffect(() => {\n    if (!isFetching) return;\n    callback();\n  }, [isFetching]);\n\n  // const scrollTop =\n  //   (document.documentElement && document.documentElement.scrollTop) ||\n  //   document.body.scrollTop;\n\n  // const scrollHeight =\n  //   (document.documentElement && document.documentElement.scrollHeight) ||\n  //   document.body.scrollHeight;\n\n  // if (scrollTop + window.innerHeight + 50 >= scrollHeight) {\n  //   setIsFetching(true);\n  // }\n\n  // function handleScroll() {\n  //   const scrollTop =\n  //     (document.documentElement && document.documentElement.scrollTop) ||\n  //     document.body.scrollTop;\n  //   const scrollHeight =\n  //     (document.documentElement && document.documentElement.scrollHeight) ||\n  //     document.body.scrollHeight;\n  //   if (scrollTop + window.innerHeight + 50 >= scrollHeight) {\n  //     setIsFetching(true);\n  //   }\n  // }\n\n  function handleScroll() {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      isFetching\n    )\n      return;\n    setIsFetching(true);\n  }\n\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}