{"ast":null,"code":"import _slicedToArray from\"/home/codegama/bhawya/source_code/fx-frontend-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _this=this;import React,{useState,useEffect}from\"react\";import{Form,Button,Modal,Row,Col}from\"react-bootstrap\";import{connect}from\"react-redux\";import configuration from\"react-global-configuration\";import{addMoneyViaCardStart,addMoneyViaPaypalStart}from\"../../store/actions/WalletAction\";import{fetchWalletDetailsStart}from\"../../store/actions/WalletAction\";import PaypalExpressBtn from\"react-paypal-express-checkout\";import{createNotification}from\"react-redux-notify\";import{getSuccessNotificationMessage,getErrorNotificationMessage}from\"../../components/helper/NotificationMessage\";import{translate,t}from\"react-multi-lang\";var AddWalletAmountModal=function AddWalletAmountModal(props){var _useState=useState(\"card\"),_useState2=_slicedToArray(_useState,2),paymentType=_useState2[0],setPaymentType=_useState2[1];var _useState3=useState(1),_useState4=_slicedToArray(_useState3,2),amount=_useState4[0],setAmount=_useState4[1];useEffect(function(){props.dispatch(fetchWalletDetailsStart());},[]);var handleChangeAmount=function handleChangeAmount(amount){setAmount(amount);};var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),inputData=_useState6[0],setInputData=_useState6[1];var handleSubmit=function handleSubmit(event){event.preventDefault();if(paymentType===\"card\")props.dispatch(addMoneyViaCardStart({amount:amount}));// props.closeAddWalletAmountModal();\n};var paypalOnSuccess=function paypalOnSuccess(payment){setTimeout(function(){props.dispatch(addMoneyViaPaypalStart({payment_id:payment.paymentID,amount:amount}));},1000);props.dispatch(fetchWalletDetailsStart());props.closeAddWalletAmountModal();};var paypalOnError=function paypalOnError(err){var notificationMessage=getErrorNotificationMessage(err);_this.props.dispatch(createNotification(notificationMessage));};var paypalOnCancel=function paypalOnCancel(data){var notificationMessage=getErrorNotificationMessage(\"Payment cancelled please try again..\");_this.props.dispatch(createNotification(notificationMessage));};var choosePaymentOption=function choosePaymentOption(event){setPaymentType(event);};var env=configuration.get(\"configData.PAYPAL_MODE\");// you can set here to 'production' for production\nvar currency=\"USD\";// or you can set this value from your props or state\nvar client={sandbox:configuration.get(\"configData.PAYPAL_ID\"),production:configuration.get(\"configData.PAYPAL_ID\")};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Modal,{className:\"modal-dialog-center withdraw-modal\",size:\"md\",centered:true,show:props.addWalletAmountModal,onHide:props.closeAddWalletAmountModal},props.addWalletAmountModal===true?/*#__PURE__*/React.createElement(Form,{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(Modal.Header,{closeButton:true},/*#__PURE__*/React.createElement(Modal.Title,null,t(\"add_wallet_amount\"))),/*#__PURE__*/React.createElement(Modal.Body,null,props.payments.loading?t(\"loading\"):/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"12\"},/*#__PURE__*/React.createElement(\"div\",{className:\"mb-5\"},/*#__PURE__*/React.createElement(\"h4\",{className:\"text-muted\"},t(\"wallet_balance\"),\":\",\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"text-muted\"},props.payments.data.user_wallet?props.payments.data.user_wallet.remaining:\"\"))))),/*#__PURE__*/React.createElement(\"div\",{className:\"floating-form\"},/*#__PURE__*/React.createElement(\"div\",{className:\"floating-label\"},/*#__PURE__*/React.createElement(\"input\",{className:\"floating-input\",type:\"number\",placeholder:\"Amount\",min:\"1\",step:\"any\",value:amount,onChange:function onChange(event){return handleChangeAmount(event.currentTarget.value);}}),/*#__PURE__*/React.createElement(\"span\",{className:\"highlight\"}),/*#__PURE__*/React.createElement(\"label\",{className:\"default-label\"},t(\"enter_amount\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"floating-label\"},/*#__PURE__*/React.createElement(\"label\",{className:\"label-default-1\"},t(\"payment_type\")),/*#__PURE__*/React.createElement(Form,{className:\"mt-4\"},[\"radio\"].map(function(type){return/*#__PURE__*/React.createElement(\"div\",{key:\"custom-inline-\".concat(type),className:\"mb-3\"},/*#__PURE__*/React.createElement(Form.Check,{custom:true,inline:true,label:\"Card\",type:type,id:\"card\",value:\"card\",name:\"payment_type\",defaultChecked:true,onChange:function onChange(){return setPaymentType(\"card\");}}),configuration.get(\"configData.is_paypal_enabled\")==1?/*#__PURE__*/React.createElement(Form.Check,{custom:true,inline:true,label:\"Paypal\",type:type,id:\"paypal\",value:\"paypal\",name:\"payment_type\",onChange:function onChange(){return setPaymentType(\"paypal\");}}):\"\");}))))),/*#__PURE__*/React.createElement(Modal.Footer,null,paymentType===\"paypal\"&&amount!=0?/*#__PURE__*/React.createElement(PaypalExpressBtn,{env:env,client:client,currency:currency,total:amount,onError:paypalOnError,onSuccess:paypalOnSuccess,onCancel:paypalOnCancel}):null,/*#__PURE__*/React.createElement(Button,{type:\"button\",className:\"btn btn-danger\",\"data-dismiss\":\"modal\",onClick:props.closeAddWalletAmountModal},t(\"cancel\")),paymentType===\"card\"?/*#__PURE__*/React.createElement(Button,{type:\"button\",className:\"btn btn-success\",\"data-dismiss\":\"modal\",onClick:handleSubmit},props.addAmount.loadingButtonContent!=null?props.addAmount.loadingButtonContent:t(\"submit\")):'')):null));};var mapStateToPros=function mapStateToPros(state){return{payments:state.wallet.walletData,addAmount:state.wallet.addMoneyInput};};function mapDispatchToProps(dispatch){return{dispatch:dispatch};}export default connect(mapStateToPros,mapDispatchToProps)(AddWalletAmountModal);","map":{"version":3,"sources":["/home/codegama/bhawya/source_code/fx-frontend-base/src/components/helper/AddWalletAmountModal.jsx"],"names":["React","useState","useEffect","Form","Button","Modal","Row","Col","connect","configuration","addMoneyViaCardStart","addMoneyViaPaypalStart","fetchWalletDetailsStart","PaypalExpressBtn","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","translate","t","AddWalletAmountModal","props","paymentType","setPaymentType","amount","setAmount","dispatch","handleChangeAmount","inputData","setInputData","handleSubmit","event","preventDefault","paypalOnSuccess","payment","setTimeout","payment_id","paymentID","closeAddWalletAmountModal","paypalOnError","err","notificationMessage","paypalOnCancel","data","choosePaymentOption","env","get","currency","client","sandbox","production","addWalletAmountModal","payments","loading","user_wallet","remaining","currentTarget","value","map","type","addAmount","loadingButtonContent","mapStateToPros","state","wallet","walletData","addMoneyInput","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Modal, Row, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport configuration from \"react-global-configuration\";\nimport {\n    addMoneyViaCardStart,\n    addMoneyViaPaypalStart,\n} from \"../../store/actions/WalletAction\";\nimport { fetchWalletDetailsStart } from \"../../store/actions/WalletAction\";\nimport PaypalExpressBtn from \"react-paypal-express-checkout\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n    getSuccessNotificationMessage,\n    getErrorNotificationMessage,\n  } from \"../../components/helper/NotificationMessage\";\nimport { translate, t } from \"react-multi-lang\";\n\nconst AddWalletAmountModal = (props) => {\n\n    const [paymentType, setPaymentType] = useState(\"card\");\n\n    const [amount, setAmount] = useState(1);\n\n    useEffect(() => {\n        props.dispatch(fetchWalletDetailsStart());\n    }, []);\n\n    const handleChangeAmount = (amount) => {\n        setAmount(amount);\n    };\n\n    const [inputData, setInputData] = useState({});\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (paymentType === \"card\")\n          props.dispatch(\n            addMoneyViaCardStart({\n                amount: amount,\n            })\n          );\n        // props.closeAddWalletAmountModal();\n    };\n\n    const paypalOnSuccess = (payment) => {\n        setTimeout(() => {\n          props.dispatch(\n            addMoneyViaPaypalStart({\n              payment_id: payment.paymentID,\n              amount: amount,\n            })\n          );\n        }, 1000);\n        props.dispatch(fetchWalletDetailsStart());\n        props.closeAddWalletAmountModal();\n    };\n    \n    const paypalOnError = (err) => {\n        const notificationMessage = getErrorNotificationMessage(err);\n        this.props.dispatch(createNotification(notificationMessage));\n    };\n    \n    const paypalOnCancel = (data) => {\n        const notificationMessage = getErrorNotificationMessage(\n          \"Payment cancelled please try again..\"\n        );\n        this.props.dispatch(createNotification(notificationMessage));\n    };\n    \n    const choosePaymentOption = (event) => {\n        setPaymentType(event);\n    };\n    \n    let env = configuration.get(\"configData.PAYPAL_MODE\"); // you can set here to 'production' for production\n    let currency = \"USD\"; // or you can set this value from your props or state\n    \n    const client = {\n        sandbox: configuration.get(\"configData.PAYPAL_ID\"),\n        production: configuration.get(\"configData.PAYPAL_ID\"),\n    };\n\n    return (\n        <>\n        <Modal\n            className=\"modal-dialog-center withdraw-modal\"\n            size=\"md\"\n            centered\n            show={props.addWalletAmountModal}\n            onHide={props.closeAddWalletAmountModal}\n        >\n            {props.addWalletAmountModal === true ? \n            <Form onSubmit={handleSubmit}>\n            <Modal.Header closeButton>\n                <Modal.Title>{t(\"add_wallet_amount\")}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {props.payments.loading ? (\n                t(\"loading\")\n                ) : (\n                <Row>\n                    <Col md=\"12\">\n                    <div className=\"mb-5\">\n                        <h4 className=\"text-muted\">\n                            {t(\"wallet_balance\")}:{\" \"}\n                            <span className=\"text-muted\">\n                                {props.payments.data.user_wallet\n                                ? props.payments.data.user_wallet.remaining\n                                : \"\"}\n                            </span>\n                        </h4>\n                    </div>\n                    </Col>\n                </Row>\n                )}\n                <div className=\"floating-form\">\n                    <div className=\"floating-label\">\n                        <input\n                        className=\"floating-input\"\n                        type=\"number\"\n                        placeholder=\"Amount\"\n                        min=\"1\"\n                        step=\"any\"\n                        value={amount}\n                        onChange={(event) => handleChangeAmount(event.currentTarget.value)}\n                        />\n                        <span className=\"highlight\"></span>\n                        <label className=\"default-label\">{t(\"enter_amount\")}</label>\n                    </div>\n\n                    <div className=\"floating-label\">\n                        <label className=\"label-default-1\">{t(\"payment_type\")}</label>\n                        <Form className=\"mt-4\">\n                        {[\"radio\"].map((type) => (\n                            <div key={`custom-inline-${type}`} className=\"mb-3\">\n                            <Form.Check\n                                custom\n                                inline\n                                label=\"Card\"\n                                type={type}\n                                id=\"card\"\n                                value=\"card\"\n                                name=\"payment_type\"\n                                defaultChecked={true}\n                                onChange={() => setPaymentType(\"card\")}\n                            />\n                            {configuration.get(\"configData.is_paypal_enabled\") ==\n                            1 ? (\n                                <Form.Check\n                                custom\n                                inline\n                                label=\"Paypal\"\n                                type={type}\n                                id=\"paypal\"\n                                value=\"paypal\"\n                                name=\"payment_type\"\n                                onChange={() => setPaymentType(\"paypal\")}\n                                />\n                            ) : (\n                                \"\"\n                            )}\n                            </div>\n                        ))}\n                        </Form>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n\n                {paymentType === \"paypal\" && amount != 0 ? (\n                    <PaypalExpressBtn\n                        env={env}\n                        client={client}\n                        currency={currency}\n                        total={amount}\n                        onError={paypalOnError}\n                        onSuccess={paypalOnSuccess}\n                        onCancel={paypalOnCancel}\n                    />\n                ) : null}\n\n                <Button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                data-dismiss=\"modal\"\n                onClick={props.closeAddWalletAmountModal}\n                >\n                {t(\"cancel\")}\n                </Button>\n                {paymentType === \"card\" ? (\n                    <Button\n                    type=\"button\"\n                    className=\"btn btn-success\"\n                    data-dismiss=\"modal\"\n                    onClick={handleSubmit}\n                    >\n                    {props.addAmount.loadingButtonContent != null\n                      ? props.addAmount.loadingButtonContent\n                      : t(\"submit\")}\n                    </Button>\n                ) : ''}\n                \n            </Modal.Footer>\n            </Form>\n            : null}\n        </Modal>\n        </>\n    );\n};\n\nconst mapStateToPros = (state) => ({\n    payments: state.wallet.walletData,\n    addAmount: state.wallet.addMoneyInput,\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return { dispatch };\n}\n\nexport default connect(mapStateToPros, mapDispatchToProps)(AddWalletAmountModal);\n"]},"metadata":{},"sourceType":"module"}