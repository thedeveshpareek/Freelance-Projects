{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { DELETE_COMMENT_START, FETCH_COMMENTS_START, FETCH_COMMENT_REPLIES_START, SAVE_COMMENT_START, SAVE_COMMENT_REPLY_START } from \"../actions/ActionConstant\";\nimport { deleteCommentFailure, deleteCommentSuccess, fetchCommentsFailure, fetchCommentsSuccess, saveCommentFailure, saveCommentSuccess, fetchCommentRepliesFailure, fetchCommentRepliesSuccess, saveCommentReplyFailure, saveCommentReplySuccess, fetchCommentsStart } from \"../actions/CommentsAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchCommentsAPI() {\n  try {\n    const inputData = yield select(state => state.comment.comments.inputData);\n    const response = yield api.postMethod(\"post_comments\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchCommentsSuccess(response.data.data));\n    } else {\n      yield put(fetchCommentsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCommentsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveCommentAPI() {\n  try {\n    const inputData = yield select(state => state.comment.saveComment.inputData);\n    const response = yield api.postMethod(\"post_comments_save\", inputData);\n\n    if (response.data.success) {\n      yield put(saveCommentSuccess(response.data.data));\n      yield put(fetchCommentsStart(inputData));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveCommentFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveCommentFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteCommentAPI() {\n  try {\n    const inputData = yield select(state => state.docs.delDocs.inputData);\n    const response = yield api.postMethod(\"documents_delete\", inputData);\n\n    if (response.data.success) {\n      yield put(deleteCommentSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteCommentFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteCommentFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchCommentRepliesAPI() {\n  try {\n    const inputData = yield select(state => state.comment.commentReplies.inputData);\n    const response = yield api.postMethod(\"post_comment_replies\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchCommentRepliesSuccess(response.data.data));\n    } else {\n      yield put(fetchCommentRepliesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCommentRepliesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveCommentReplyAPI() {\n  try {\n    const inputData = yield select(state => state.comment.saveCommentReply.inputData);\n    const response = yield api.postMethod(\"post_comments_replies_save\", inputData);\n\n    if (response.data.success) {\n      yield put(saveCommentReplySuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveCommentReplyFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveCommentReplyFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_COMMENTS_START, fetchCommentsAPI)]);\n  yield all([yield takeLatest(FETCH_COMMENT_REPLIES_START, fetchCommentRepliesAPI)]);\n  yield all([yield takeLatest(SAVE_COMMENT_START, saveCommentAPI)]);\n  yield all([yield takeLatest(SAVE_COMMENT_REPLY_START, saveCommentReplyAPI)]);\n  yield all([yield takeLatest(DELETE_COMMENT_START, deleteCommentAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/CommentsSaga.jsx"],"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","DELETE_COMMENT_START","FETCH_COMMENTS_START","FETCH_COMMENT_REPLIES_START","SAVE_COMMENT_START","SAVE_COMMENT_REPLY_START","deleteCommentFailure","deleteCommentSuccess","fetchCommentsFailure","fetchCommentsSuccess","saveCommentFailure","saveCommentSuccess","fetchCommentRepliesFailure","fetchCommentRepliesSuccess","saveCommentReplyFailure","saveCommentReplySuccess","fetchCommentsStart","checkLogoutStatus","fetchCommentsAPI","inputData","state","comment","comments","response","postMethod","data","success","error","notificationMessage","message","saveCommentAPI","saveComment","deleteCommentAPI","docs","delDocs","fetchCommentRepliesAPI","commentReplies","saveCommentReplyAPI","saveCommentReply","pageSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,UAA5B,EAAwCC,GAAxC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SACEC,6BADF,EAEEC,2BAFF,QAGO,6CAHP;AAIA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,2BAHF,EAIEC,kBAJF,EAKEC,wBALF,QAMO,2BANP;AAOA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,oBAJF,EAKEC,kBALF,EAMEC,kBANF,EAOEC,0BAPF,EAQEC,0BARF,EASEC,uBATF,EAUEC,uBAVF,EAWEC,kBAXF,QAYO,2BAZP;AAcA,SACEC,iBADF,QAEO,wBAFP;;AAIA,UAAUC,gBAAV,GAA6B;AAC3B,MAAI;AACF,UAAMC,SAAS,GAAG,MAAM1B,MAAM,CAAE2B,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcC,QAAd,CAAuBH,SAAnC,CAA9B;AACA,UAAMI,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,UAAJ,CAAe,eAAf,EAAgCL,SAAhC,CAAvB;;AACA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMhC,GAAG,CAACe,oBAAoB,CAACc,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAArB,CAAT;AACD,KAFD,MAEO;AACL,YAAM/B,GAAG,CAACc,oBAAoB,CAACe,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAArB,CAAT;AACA,YAAMC,mBAAmB,GAAG5B,2BAA2B,CACrDuB,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMjC,GAAG,CAACuB,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM/B,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD;AACF,GAbD,CAaE,OAAOD,KAAP,EAAc;AACd,UAAMjC,GAAG,CAACc,oBAAoB,CAACmB,KAAD,CAArB,CAAT;AACA,UAAMC,mBAAmB,GAAG5B,2BAA2B,CAAC2B,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMnC,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUE,cAAV,GAA2B;AACzB,MAAI;AACF,UAAMX,SAAS,GAAG,MAAM1B,MAAM,CAC3B2B,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcU,WAAd,CAA0BZ,SADT,CAA9B;AAGA,UAAMI,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,UAAJ,CAAe,oBAAf,EAAqCL,SAArC,CAAvB;;AACA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMhC,GAAG,CAACiB,kBAAkB,CAACY,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAnB,CAAT;AACA,YAAM/B,GAAG,CAACsB,kBAAkB,CAACG,SAAD,CAAnB,CAAT;AACA,YAAMS,mBAAmB,GAAG7B,6BAA6B,CACvDwB,QAAQ,CAACE,IAAT,CAAcI,OADyC,CAAzD;AAGA,YAAMnC,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD,KAPD,MAOO;AACL,YAAMlC,GAAG,CAACgB,kBAAkB,CAACa,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAAnB,CAAT;AACA,YAAMC,mBAAmB,GAAG5B,2BAA2B,CACrDuB,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMjC,GAAG,CAACuB,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM/B,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD;AACF,GApBD,CAoBE,OAAOD,KAAP,EAAc;AACd,UAAMjC,GAAG,CAACgB,kBAAkB,CAACiB,KAAD,CAAnB,CAAT;AACA,UAAMC,mBAAmB,GAAG5B,2BAA2B,CAAC2B,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMnC,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUI,gBAAV,GAA6B;AAC3B,MAAI;AACF,UAAMb,SAAS,GAAG,MAAM1B,MAAM,CAAE2B,KAAD,IAAWA,KAAK,CAACa,IAAN,CAAWC,OAAX,CAAmBf,SAA/B,CAA9B;AACA,UAAMI,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,UAAJ,CAAe,kBAAf,EAAmCL,SAAnC,CAAvB;;AACA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMhC,GAAG,CAACa,oBAAoB,CAACgB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAArB,CAAT;AACA,YAAMG,mBAAmB,GAAG7B,6BAA6B,CACvDwB,QAAQ,CAACE,IAAT,CAAcI,OADyC,CAAzD;AAGA,YAAMnC,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD,KAND,MAMO;AACL,YAAMlC,GAAG,CAACY,oBAAoB,CAACiB,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAArB,CAAT;AACA,YAAMC,mBAAmB,GAAG5B,2BAA2B,CACrDuB,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMjC,GAAG,CAACuB,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM/B,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD;AACF,GAjBD,CAiBE,OAAOD,KAAP,EAAc;AACd,UAAMjC,GAAG,CAACY,oBAAoB,CAACqB,KAAD,CAArB,CAAT;AACA,UAAMC,mBAAmB,GAAG5B,2BAA2B,CAAC2B,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMnC,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUO,sBAAV,GAAmC;AACjC,MAAI;AACF,UAAMhB,SAAS,GAAG,MAAM1B,MAAM,CAAE2B,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAce,cAAd,CAA6BjB,SAAzC,CAA9B;AACA,UAAMI,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,UAAJ,CAAe,sBAAf,EAAuCL,SAAvC,CAAvB;;AACA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMhC,GAAG,CAACmB,0BAA0B,CAACU,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAA3B,CAAT;AACD,KAFD,MAEO;AACL,YAAM/B,GAAG,CAACkB,0BAA0B,CAACW,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAA3B,CAAT;AACA,YAAMC,mBAAmB,GAAG5B,2BAA2B,CACrDuB,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMjC,GAAG,CAACuB,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM/B,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD;AACF,GAbD,CAaE,OAAOD,KAAP,EAAc;AACd,UAAMjC,GAAG,CAACkB,0BAA0B,CAACe,KAAD,CAA3B,CAAT;AACA,UAAMC,mBAAmB,GAAG5B,2BAA2B,CAAC2B,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMnC,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUS,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAMlB,SAAS,GAAG,MAAM1B,MAAM,CAC3B2B,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAciB,gBAAd,CAA+BnB,SADd,CAA9B;AAGA,UAAMI,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,UAAJ,CAAe,4BAAf,EAA6CL,SAA7C,CAAvB;;AACA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMhC,GAAG,CAACqB,uBAAuB,CAACQ,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAxB,CAAT;AACA,YAAMG,mBAAmB,GAAG7B,6BAA6B,CACvDwB,QAAQ,CAACE,IAAT,CAAcI,OADyC,CAAzD;AAGA,YAAMnC,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD,KAND,MAMO;AACL,YAAMlC,GAAG,CAACoB,uBAAuB,CAACS,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAAxB,CAAT;AACA,YAAMC,mBAAmB,GAAG5B,2BAA2B,CACrDuB,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMjC,GAAG,CAACuB,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM/B,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD;AACF,GAnBD,CAmBE,OAAOD,KAAP,EAAc;AACd,UAAMjC,GAAG,CAACoB,uBAAuB,CAACa,KAAD,CAAxB,CAAT;AACA,UAAMC,mBAAmB,GAAG5B,2BAA2B,CAAC2B,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMnC,GAAG,CAACI,kBAAkB,CAAC8B,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,eAAe,UAAUW,QAAV,GAAqB;AAClC,QAAM3C,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACO,oBAAD,EAAuBgB,gBAAvB,CAAjB,CAAD,CAAT;AACA,QAAMtB,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACQ,2BAAD,EAA8BgC,sBAA9B,CAAjB,CAAD,CAAT;AACA,QAAMvC,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACS,kBAAD,EAAqB0B,cAArB,CAAjB,CAAD,CAAT;AACA,QAAMlC,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACU,wBAAD,EAA2BgC,mBAA3B,CAAjB,CAAD,CAAT;AACA,QAAMzC,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACM,oBAAD,EAAuB+B,gBAAvB,CAAjB,CAAD,CAAT;AACD","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  DELETE_COMMENT_START,\n  FETCH_COMMENTS_START,\n  FETCH_COMMENT_REPLIES_START,\n  SAVE_COMMENT_START,\n  SAVE_COMMENT_REPLY_START,\n} from \"../actions/ActionConstant\";\nimport {\n  deleteCommentFailure,\n  deleteCommentSuccess,\n  fetchCommentsFailure,\n  fetchCommentsSuccess,\n  saveCommentFailure,\n  saveCommentSuccess,\n  fetchCommentRepliesFailure,\n  fetchCommentRepliesSuccess,\n  saveCommentReplyFailure,\n  saveCommentReplySuccess,\n  fetchCommentsStart\n} from \"../actions/CommentsAction\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchCommentsAPI() {\n  try {\n    const inputData = yield select((state) => state.comment.comments.inputData);\n    const response = yield api.postMethod(\"post_comments\", inputData);\n    if (response.data.success) {\n      yield put(fetchCommentsSuccess(response.data.data));\n    } else {\n      yield put(fetchCommentsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCommentsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveCommentAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.comment.saveComment.inputData\n    );\n    const response = yield api.postMethod(\"post_comments_save\", inputData);\n    if (response.data.success) {\n      yield put(saveCommentSuccess(response.data.data));\n      yield put(fetchCommentsStart(inputData))\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveCommentFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveCommentFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteCommentAPI() {\n  try {\n    const inputData = yield select((state) => state.docs.delDocs.inputData);\n    const response = yield api.postMethod(\"documents_delete\", inputData);\n    if (response.data.success) {\n      yield put(deleteCommentSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteCommentFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteCommentFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchCommentRepliesAPI() {\n  try {\n    const inputData = yield select((state) => state.comment.commentReplies.inputData);\n    const response = yield api.postMethod(\"post_comment_replies\", inputData);\n    if (response.data.success) {\n      yield put(fetchCommentRepliesSuccess(response.data.data));\n    } else {\n      yield put(fetchCommentRepliesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCommentRepliesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveCommentReplyAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.comment.saveCommentReply.inputData\n    );\n    const response = yield api.postMethod(\"post_comments_replies_save\", inputData);\n    if (response.data.success) {\n      yield put(saveCommentReplySuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveCommentReplyFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveCommentReplyFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_COMMENTS_START, fetchCommentsAPI)]);\n  yield all([yield takeLatest(FETCH_COMMENT_REPLIES_START, fetchCommentRepliesAPI)]);\n  yield all([yield takeLatest(SAVE_COMMENT_START, saveCommentAPI)]);\n  yield all([yield takeLatest(SAVE_COMMENT_REPLY_START, saveCommentReplyAPI)]);\n  yield all([yield takeLatest(DELETE_COMMENT_START, deleteCommentAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}