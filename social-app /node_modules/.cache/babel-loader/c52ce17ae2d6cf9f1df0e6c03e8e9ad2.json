{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchSingleUserPostsFailure, fetchSingleUserPostsSuccess, fetchSingleUserProfileFailure, fetchSingleUserProfileSuccess, searchUserPostSuccess, searchUserPostFailure } from \"../actions/OtherUserAction\";\nimport { FETCH_SINGLE_USER_POSTS_START, FETCH_SINGLE_USER_PROFILE_START, SEARCH_USER_POST_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchOtherUserProfileAPI() {\n  try {\n    const inputData = yield select(state => state.otherUser.userDetails.inputData);\n\n    if (inputData.user_unique_id == localStorage.getItem(\"user_unique_id\")) {\n      window.location.assign(\"/profile\");\n    }\n\n    const response = yield api.postMethod(\"other_profile\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchSingleUserProfileSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleUserProfileFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/home\");\n    }\n  } catch (error) {\n    yield put(fetchSingleUserProfileFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchOtherUserPostAPI() {\n  try {\n    const inputData = yield select(state => state.otherUser.userPosts.inputData);\n    const skipCount = yield select(state => state.otherUser.userPosts.skip);\n    const response = yield api.postMethod(\"other_profile_posts\", { ...inputData,\n      skip: skipCount\n    });\n\n    if (response.data.success) {\n      yield put(fetchSingleUserPostsSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleUserPostsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleUserPostsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* searchPostAPI() {\n  try {\n    const inputData = yield select(state => state.otherUser.searchPosts.inputData);\n    const response = yield api.postMethod(\"posts_search\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchSingleUserPostsSuccess(response.data.data));\n    } else {\n      yield put(searchUserPostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(searchUserPostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_SINGLE_USER_PROFILE_START, fetchOtherUserProfileAPI)]);\n  yield all([yield takeLatest(FETCH_SINGLE_USER_POSTS_START, fetchOtherUserPostAPI)]);\n  yield all([yield takeLatest(SEARCH_USER_POST_START, searchPostAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/OtherUserSaga.jsx"],"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchSingleUserPostsFailure","fetchSingleUserPostsSuccess","fetchSingleUserProfileFailure","fetchSingleUserProfileSuccess","searchUserPostSuccess","searchUserPostFailure","FETCH_SINGLE_USER_POSTS_START","FETCH_SINGLE_USER_PROFILE_START","SEARCH_USER_POST_START","checkLogoutStatus","fetchOtherUserProfileAPI","inputData","state","otherUser","userDetails","user_unique_id","localStorage","getItem","window","location","assign","response","postMethod","data","success","error","notificationMessage","message","fetchOtherUserPostAPI","userPosts","skipCount","skip","searchPostAPI","searchPosts","pageSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,UAA5B,EAAwCC,GAAxC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SACEC,6BADF,EAEEC,2BAFF,QAGO,6CAHP;AAIA,SACEC,2BADF,EAEEC,2BAFF,EAGEC,6BAHF,EAIEC,6BAJF,EAKEC,qBALF,EAMEC,qBANF,QAOO,4BAPP;AAQA,SACEC,6BADF,EAEEC,+BAFF,EAGEC,sBAHF,QAIO,2BAJP;AAMA,SACEC,iBADF,QAEO,wBAFP;;AAIA,UAAUC,wBAAV,GAAqC;AACnC,MAAI;AACF,UAAMC,SAAS,GAAG,MAAMnB,MAAM,CAC3BoB,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBC,WAAhB,CAA4BH,SADX,CAA9B;;AAGA,QAAIA,SAAS,CAACI,cAAV,IAA4BC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAhC,EAAwE;AACtEC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,UAAvB;AACD;;AACD,UAAMC,QAAQ,GAAG,MAAMzB,GAAG,CAAC0B,UAAJ,CAAe,eAAf,EAAgCX,SAAhC,CAAvB;;AACA,QAAIU,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM/B,GAAG,CAACU,6BAA6B,CAACkB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAA9B,CAAT;AACD,KAFD,MAEO;AACL,YAAM9B,GAAG,CAACS,6BAA6B,CAACmB,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAA9B,CAAT;AACA,YAAMC,mBAAmB,GAAG3B,2BAA2B,CACrDsB,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMhC,GAAG,CAACgB,iBAAiB,CAACY,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM9B,GAAG,CAACI,kBAAkB,CAAC6B,mBAAD,CAAnB,CAAT;AACAR,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,OAAvB;AACD;AACF,GAnBD,CAmBE,OAAOK,KAAP,EAAc;AACd,UAAMhC,GAAG,CAACS,6BAA6B,CAACuB,KAAD,CAA9B,CAAT;AACA,UAAMC,mBAAmB,GAAG3B,2BAA2B,CAAC0B,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMlC,GAAG,CAACI,kBAAkB,CAAC6B,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUE,qBAAV,GAAkC;AAChC,MAAI;AACF,UAAMjB,SAAS,GAAG,MAAMnB,MAAM,CAC3BoB,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBgB,SAAhB,CAA0BlB,SADT,CAA9B;AAGA,UAAMmB,SAAS,GAAG,MAAMtC,MAAM,CAAEoB,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBgB,SAAhB,CAA0BE,IAAtC,CAA9B;AACA,UAAMV,QAAQ,GAAG,MAAMzB,GAAG,CAAC0B,UAAJ,CAAe,qBAAf,EAAsC,EAC3D,GAAGX,SADwD;AAE3DoB,MAAAA,IAAI,EAAED;AAFqD,KAAtC,CAAvB;;AAIA,QAAIT,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM/B,GAAG,CAACQ,2BAA2B,CAACoB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAA5B,CAAT;AACD,KAFD,MAEO;AACL,YAAM9B,GAAG,CAACO,2BAA2B,CAACqB,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAA5B,CAAT;AACA,YAAMC,mBAAmB,GAAG3B,2BAA2B,CACrDsB,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMhC,GAAG,CAACgB,iBAAiB,CAACY,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM9B,GAAG,CAACI,kBAAkB,CAAC6B,mBAAD,CAAnB,CAAT;AACD;AACF,GAnBD,CAmBE,OAAOD,KAAP,EAAc;AACd,UAAMhC,GAAG,CAACO,2BAA2B,CAACyB,KAAD,CAA5B,CAAT;AACA,UAAMC,mBAAmB,GAAG3B,2BAA2B,CAAC0B,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMlC,GAAG,CAACI,kBAAkB,CAAC6B,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUM,aAAV,GAA0B;AACxB,MAAI;AACF,UAAMrB,SAAS,GAAG,MAAMnB,MAAM,CAC3BoB,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBoB,WAAhB,CAA4BtB,SADX,CAA9B;AAGA,UAAMU,QAAQ,GAAG,MAAMzB,GAAG,CAAC0B,UAAJ,CAAe,cAAf,EAA+BX,SAA/B,CAAvB;;AACA,QAAIU,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM/B,GAAG,CAACQ,2BAA2B,CAACoB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAA5B,CAAT;AACD,KAFD,MAEO;AACL,YAAM9B,GAAG,CAACY,qBAAqB,CAACgB,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAAtB,CAAT;AACA,YAAMC,mBAAmB,GAAG3B,2BAA2B,CACrDsB,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMhC,GAAG,CAACI,kBAAkB,CAAC6B,mBAAD,CAAnB,CAAT;AACD;AACF,GAdD,CAcE,OAAOD,KAAP,EAAc;AACd,UAAMhC,GAAG,CAACY,qBAAqB,CAACoB,KAAD,CAAtB,CAAT;AACA,UAAMC,mBAAmB,GAAG3B,2BAA2B,CAAC0B,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMlC,GAAG,CAACI,kBAAkB,CAAC6B,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,eAAe,UAAUQ,QAAV,GAAqB;AAClC,QAAMvC,GAAG,CAAC,CACR,MAAMD,UAAU,CAACa,+BAAD,EAAkCG,wBAAlC,CADR,CAAD,CAAT;AAGA,QAAMf,GAAG,CAAC,CACR,MAAMD,UAAU,CAACY,6BAAD,EAAgCsB,qBAAhC,CADR,CAAD,CAAT;AAIA,QAAMjC,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACc,sBAAD,EAAyBwB,aAAzB,CAAjB,CAAD,CAAT;AACD","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchSingleUserPostsFailure,\n  fetchSingleUserPostsSuccess,\n  fetchSingleUserProfileFailure,\n  fetchSingleUserProfileSuccess,\n  searchUserPostSuccess,\n  searchUserPostFailure,\n} from \"../actions/OtherUserAction\";\nimport {\n  FETCH_SINGLE_USER_POSTS_START,\n  FETCH_SINGLE_USER_PROFILE_START,\n  SEARCH_USER_POST_START,\n} from \"../actions/ActionConstant\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchOtherUserProfileAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.otherUser.userDetails.inputData\n    );\n    if (inputData.user_unique_id == localStorage.getItem(\"user_unique_id\")) {\n      window.location.assign(\"/profile\");\n    }\n    const response = yield api.postMethod(\"other_profile\", inputData);\n    if (response.data.success) {\n      yield put(fetchSingleUserProfileSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleUserProfileFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/home\");\n    }\n  } catch (error) {\n    yield put(fetchSingleUserProfileFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchOtherUserPostAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.otherUser.userPosts.inputData\n    );\n    const skipCount = yield select((state) => state.otherUser.userPosts.skip);\n    const response = yield api.postMethod(\"other_profile_posts\", {\n      ...inputData,\n      skip: skipCount,\n    });\n    if (response.data.success) {\n      yield put(fetchSingleUserPostsSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleUserPostsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleUserPostsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* searchPostAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.otherUser.searchPosts.inputData\n    );\n    const response = yield api.postMethod(\"posts_search\", inputData);\n    if (response.data.success) {\n      yield put(fetchSingleUserPostsSuccess(response.data.data));\n    } else {\n      yield put(searchUserPostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(searchUserPostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([\n    yield takeLatest(FETCH_SINGLE_USER_PROFILE_START, fetchOtherUserProfileAPI),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_SINGLE_USER_POSTS_START, fetchOtherUserPostAPI),\n  ]);\n\n  yield all([yield takeLatest(SEARCH_USER_POST_START, searchPostAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}