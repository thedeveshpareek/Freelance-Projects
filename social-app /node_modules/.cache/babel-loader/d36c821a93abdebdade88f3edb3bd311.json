{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { deleteBookmarkFailure, deleteBookmarkSuccess, fetchBookmarksFailure, fetchBookmarksPhotoFailure, fetchBookmarksPhotoSuccess, fetchBookmarksSuccess, fetchBookmarksVideoFailure, fetchBookmarksVideoSuccess, saveBookmarkFailure, saveBookmarkSuccess, fetchBookmarksAudioFailure, fetchBookmarksAudioSuccess } from \"../actions/BookmarkAction\";\nimport { DELETE_BOOKMARK_START, FETCH_BOOKMARKS_PHOTO_START, FETCH_BOOKMARKS_START, FETCH_BOOKMARKS_VIDEO_START, SAVE_BOOKMARK_START, FETCH_BOOKMARKS_AUDIO_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchBookmarkAPI() {\n  try {\n    const inputData = yield select(state => state.bookmark.bookmark.inputData);\n    const response = yield api.postMethod(\"post_bookmarks\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchBookmarksSuccess(response.data.data));\n    } else {\n      yield put(fetchBookmarksFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchBookmarksFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchBookmarkPhotoAPI() {\n  try {\n    const inputData = yield select(state => state.bookmark.bookmarkPhoto.inputData);\n    const response = yield api.postMethod(\"post_bookmarks_photos\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchBookmarksPhotoSuccess(response.data.data));\n    } else {\n      yield put(fetchBookmarksPhotoFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchBookmarksPhotoFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchBookmarkVideoAPI() {\n  try {\n    const inputData = yield select(state => state.bookmark.bookmarkVideo.inputData);\n    const response = yield api.postMethod(\"post_bookmarks_videos\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchBookmarksVideoSuccess(response.data.data));\n    } else {\n      yield put(fetchBookmarksVideoFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchBookmarksVideoFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveBookmarkAPI() {\n  try {\n    const inputData = yield select(state => state.bookmark.saveBookmark.inputData);\n    const response = yield api.postMethod(\"post_bookmarks_save\", inputData);\n\n    if (response.data.success) {\n      yield put(saveBookmarkSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveBookmarkFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveBookmarkFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteBookmarkAPI() {\n  try {\n    const inputData = yield select(state => state.docs.delDocs.inputData);\n    const response = yield api.postMethod(\"post_bookmarks_delete\", inputData);\n\n    if (response.data.success) {\n      yield put(deleteBookmarkSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteBookmarkFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteBookmarkFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchBookmarkAudioAPI() {\n  try {\n    const inputData = yield select(state => state.bookmark.bookmarkAudio.inputData);\n    const response = yield api.postMethod(\"post_bookmarks_audio\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchBookmarksAudioSuccess(response.data.data));\n    } else {\n      yield put(fetchBookmarksAudioFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchBookmarksAudioFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_BOOKMARKS_START, fetchBookmarkAPI)]);\n  yield all([yield takeLatest(FETCH_BOOKMARKS_PHOTO_START, fetchBookmarkPhotoAPI)]);\n  yield all([yield takeLatest(FETCH_BOOKMARKS_VIDEO_START, fetchBookmarkVideoAPI)]);\n  yield all([yield takeLatest(SAVE_BOOKMARK_START, saveBookmarkAPI)]);\n  yield all([yield takeLatest(DELETE_BOOKMARK_START, deleteBookmarkAPI)]);\n  yield all([yield takeLatest(FETCH_BOOKMARKS_AUDIO_START, fetchBookmarkAudioAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/BookmarkSaga.jsx"],"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","deleteBookmarkFailure","deleteBookmarkSuccess","fetchBookmarksFailure","fetchBookmarksPhotoFailure","fetchBookmarksPhotoSuccess","fetchBookmarksSuccess","fetchBookmarksVideoFailure","fetchBookmarksVideoSuccess","saveBookmarkFailure","saveBookmarkSuccess","fetchBookmarksAudioFailure","fetchBookmarksAudioSuccess","DELETE_BOOKMARK_START","FETCH_BOOKMARKS_PHOTO_START","FETCH_BOOKMARKS_START","FETCH_BOOKMARKS_VIDEO_START","SAVE_BOOKMARK_START","FETCH_BOOKMARKS_AUDIO_START","checkLogoutStatus","fetchBookmarkAPI","inputData","state","bookmark","response","postMethod","data","success","error","notificationMessage","message","fetchBookmarkPhotoAPI","bookmarkPhoto","fetchBookmarkVideoAPI","bookmarkVideo","saveBookmarkAPI","saveBookmark","deleteBookmarkAPI","docs","delDocs","fetchBookmarkAudioAPI","bookmarkAudio","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\nimport {\n  deleteBookmarkFailure,\n  deleteBookmarkSuccess,\n  fetchBookmarksFailure,\n  fetchBookmarksPhotoFailure,\n  fetchBookmarksPhotoSuccess,\n  fetchBookmarksSuccess,\n  fetchBookmarksVideoFailure,\n  fetchBookmarksVideoSuccess,\n  saveBookmarkFailure,\n  saveBookmarkSuccess,\n  fetchBookmarksAudioFailure,\n  fetchBookmarksAudioSuccess,\n} from \"../actions/BookmarkAction\";\nimport {\n  DELETE_BOOKMARK_START,\n  FETCH_BOOKMARKS_PHOTO_START,\n  FETCH_BOOKMARKS_START,\n  FETCH_BOOKMARKS_VIDEO_START,\n  SAVE_BOOKMARK_START,\n  FETCH_BOOKMARKS_AUDIO_START,\n} from \"../actions/ActionConstant\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchBookmarkAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bookmark.bookmark.inputData\n    );\n    const response = yield api.postMethod(\"post_bookmarks\", inputData);\n    if (response.data.success) {\n      yield put(fetchBookmarksSuccess(response.data.data));\n    } else {\n      yield put(fetchBookmarksFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchBookmarksFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchBookmarkPhotoAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bookmark.bookmarkPhoto.inputData\n    );\n    const response = yield api.postMethod(\"post_bookmarks_photos\", inputData);\n    if (response.data.success) {\n      yield put(fetchBookmarksPhotoSuccess(response.data.data));\n    } else {\n      yield put(fetchBookmarksPhotoFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchBookmarksPhotoFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchBookmarkVideoAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bookmark.bookmarkVideo.inputData\n    );\n    const response = yield api.postMethod(\"post_bookmarks_videos\", inputData);\n    if (response.data.success) {\n      yield put(fetchBookmarksVideoSuccess(response.data.data));\n    } else {\n      yield put(fetchBookmarksVideoFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchBookmarksVideoFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveBookmarkAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bookmark.saveBookmark.inputData\n    );\n    const response = yield api.postMethod(\"post_bookmarks_save\", inputData);\n    if (response.data.success) {\n      yield put(saveBookmarkSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveBookmarkFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveBookmarkFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteBookmarkAPI() {\n  try {\n    const inputData = yield select((state) => state.docs.delDocs.inputData);\n    const response = yield api.postMethod(\"post_bookmarks_delete\", inputData);\n    if (response.data.success) {\n      yield put(deleteBookmarkSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteBookmarkFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteBookmarkFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchBookmarkAudioAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bookmark.bookmarkAudio.inputData\n    );\n    const response = yield api.postMethod(\"post_bookmarks_audio\", inputData);\n    if (response.data.success) {\n      yield put(fetchBookmarksAudioSuccess(response.data.data));\n    } else {\n      yield put(fetchBookmarksAudioFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchBookmarksAudioFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_BOOKMARKS_START, fetchBookmarkAPI)]);\n  yield all([\n    yield takeLatest(FETCH_BOOKMARKS_PHOTO_START, fetchBookmarkPhotoAPI),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_BOOKMARKS_VIDEO_START, fetchBookmarkVideoAPI),\n  ]);\n  yield all([yield takeLatest(SAVE_BOOKMARK_START, saveBookmarkAPI)]);\n  yield all([yield takeLatest(DELETE_BOOKMARK_START, deleteBookmarkAPI)]);\n  yield all([\n    yield takeLatest(FETCH_BOOKMARKS_AUDIO_START, fetchBookmarkAudioAPI),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}