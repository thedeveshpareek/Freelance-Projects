{"ast":null,"code":"import React, { Component } from \"react\";\nimport { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport { fetchCardDetailsSuccess, fetchCardDetailsFailure, deleteCardSuccess, deleteCardFailure, selectDefaultCardSuccess, selectDefaultCardFailure, fetchCardDetailsStart } from \"../actions/CardsAction\";\nimport api from \"../../Environment\";\nimport { FETCH_CARD_DETAILS_START, DELETE_CARD_START, SELECT_DEFAULT_CARD_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* getCardDetailsAPI() {\n  try {\n    const response = yield api.postMethod(\"cards_list\");\n\n    if (response.data.success) {\n      yield put(fetchCardDetailsSuccess(response.data.data));\n    } else {\n      yield put(fetchCardDetailsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCardDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteCardAPI() {\n  try {\n    const deleteCard = yield select(state => state.cards.deleteCard.data);\n    const response = yield api.postMethod(\"cards_delete\", deleteCard);\n    yield put(deleteCardSuccess(response.data.data));\n\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n      yield put(fetchCardDetailsStart());\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* selectDefaultCardAPI() {\n  try {\n    const selectDefaultCard = yield select(state => state.cards.selectDefaultCard.inputData);\n    const response = yield api.postMethod(\"cards_default\", selectDefaultCard);\n    yield put(selectDefaultCardSuccess(response.data.data));\n\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      yield put(fetchCardDetailsStart());\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(selectDefaultCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_CARD_DETAILS_START, getCardDetailsAPI)]);\n  yield all([yield takeLatest(DELETE_CARD_START, deleteCardAPI)]);\n  yield all([yield takeLatest(SELECT_DEFAULT_CARD_START, selectDefaultCardAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/CardsSaga.jsx"],"names":["React","Component","call","select","put","takeLatest","all","fetchCardDetailsSuccess","fetchCardDetailsFailure","deleteCardSuccess","deleteCardFailure","selectDefaultCardSuccess","selectDefaultCardFailure","fetchCardDetailsStart","api","FETCH_CARD_DETAILS_START","DELETE_CARD_START","SELECT_DEFAULT_CARD_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","checkLogoutStatus","getCardDetailsAPI","response","postMethod","data","success","error","notificationMessage","message","deleteCardAPI","deleteCard","state","cards","selectDefaultCardAPI","selectDefaultCard","inputData","pageSaga"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport {\n  fetchCardDetailsSuccess,\n  fetchCardDetailsFailure,\n  deleteCardSuccess,\n  deleteCardFailure,\n  selectDefaultCardSuccess,\n  selectDefaultCardFailure,\n  fetchCardDetailsStart,\n} from \"../actions/CardsAction\";\n\nimport api from \"../../Environment\";\nimport {\n  FETCH_CARD_DETAILS_START,\n  DELETE_CARD_START,\n  SELECT_DEFAULT_CARD_START,\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\n\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\n\nfunction* getCardDetailsAPI() {\n  try {\n    const response = yield api.postMethod(\"cards_list\");\n\n    if (response.data.success) {\n      yield put(fetchCardDetailsSuccess(response.data.data));\n    } else {\n      yield put(fetchCardDetailsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchCardDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteCardAPI() {\n  try {\n    const deleteCard = yield select((state) => state.cards.deleteCard.data);\n    const response = yield api.postMethod(\"cards_delete\", deleteCard);\n    yield put(deleteCardSuccess(response.data.data));\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(fetchCardDetailsStart());\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* selectDefaultCardAPI() {\n  try {\n    const selectDefaultCard = yield select(\n      (state) => state.cards.selectDefaultCard.inputData\n    );\n    const response = yield api.postMethod(\"cards_default\", selectDefaultCard);\n    yield put(selectDefaultCardSuccess(response.data.data));\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(fetchCardDetailsStart());\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(selectDefaultCardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_CARD_DETAILS_START, getCardDetailsAPI)]);\n  yield all([yield takeLatest(DELETE_CARD_START, deleteCardAPI)]);\n  yield all([\n    yield takeLatest(SELECT_DEFAULT_CARD_START, selectDefaultCardAPI),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}