{"ast":null,"code":"import _regeneratorRuntime from\"/home/codegama/bhawya/source_code/fx-frontend-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchNotificationAPI),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(pageSaga);import{call,select,put,takeLatest,all}from\"redux-saga/effects\";import api from\"../../Environment\";import{FETCH_NOTIFICATIONS_START}from\"../actions/ActionConstant\";import{createNotification}from\"react-redux-notify\";import{getSuccessNotificationMessage,getErrorNotificationMessage}from\"../../components/helper/NotificationMessage\";import{fetchNotificationsFailure,fetchNotificationsSuccess}from\"../actions/NotificationAction\";function fetchNotificationAPI(){var inputData,response,notificationMessage,_notificationMessage;return _regeneratorRuntime.wrap(function fetchNotificationAPI$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return select(function(state){return state.notification.notification.inputData;});case 3:inputData=_context.sent;_context.next=6;return api.postMethod(\"bell_notifications_index\",inputData);case 6:response=_context.sent;if(!response.data.success){_context.next=12;break;}_context.next=10;return put(fetchNotificationsSuccess(response.data.data));case 10:_context.next=17;break;case 12:_context.next=14;return put(fetchNotificationsFailure(response.data.error));case 14:notificationMessage=getErrorNotificationMessage(response.data.error);_context.next=17;return put(createNotification(notificationMessage));case 17:_context.next=26;break;case 19:_context.prev=19;_context.t0=_context[\"catch\"](0);_context.next=23;return put(fetchNotificationsFailure(_context.t0));case 23:_notificationMessage=getErrorNotificationMessage(_context.t0.message);_context.next=26;return put(createNotification(_notificationMessage));case 26:case\"end\":return _context.stop();}}},_marked,null,[[0,19]]);}export default function pageSaga(){return _regeneratorRuntime.wrap(function pageSaga$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.t0=all;_context2.next=3;return takeLatest(FETCH_NOTIFICATIONS_START,fetchNotificationAPI);case 3:_context2.t1=_context2.sent;_context2.t2=[_context2.t1];_context2.next=7;return(0,_context2.t0)(_context2.t2);case 7:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["/home/codegama/bhawya/source_code/fx-frontend-base/src/store/sagas/NotificationSaga.jsx"],"names":["fetchNotificationAPI","pageSaga","call","select","put","takeLatest","all","api","FETCH_NOTIFICATIONS_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchNotificationsFailure","fetchNotificationsSuccess","state","notification","inputData","postMethod","response","data","success","error","notificationMessage","message"],"mappings":"kNAcUA,oB,iDAyBeC,Q,EAvCzB,OAASC,IAAT,CAAeC,MAAf,CAAuBC,GAAvB,CAA4BC,UAA5B,CAAwCC,GAAxC,KAAmD,oBAAnD,CACA,MAAOC,CAAAA,GAAP,KAAgB,mBAAhB,CACA,OAASC,yBAAT,KAA0C,2BAA1C,CACA,OAASC,kBAAT,KAAmC,oBAAnC,CACA,OACEC,6BADF,CAEEC,2BAFF,KAGO,6CAHP,CAKA,OACEC,yBADF,CAEEC,yBAFF,KAGO,+BAHP,CAKA,QAAUb,CAAAA,oBAAV,gOAEsB,MAAMG,CAAAA,MAAM,CAC5B,SAACW,KAAD,QAAWA,CAAAA,KAAK,CAACC,YAAN,CAAmBA,YAAnB,CAAgCC,SAA3C,EAD4B,CAAZ,CAFtB,OAEUA,SAFV,+BAKqB,MAAMT,CAAAA,GAAG,CAACU,UAAJ,CACrB,0BADqB,CAErBD,SAFqB,CAAN,CALrB,OAKUE,QALV,mBASQA,QAAQ,CAACC,IAAT,CAAcC,OATtB,2CAUM,MAAMhB,CAAAA,GAAG,CAACS,yBAAyB,CAACK,QAAQ,CAACC,IAAT,CAAcA,IAAf,CAA1B,CAAT,CAVN,wDAYM,MAAMf,CAAAA,GAAG,CAACQ,yBAAyB,CAACM,QAAQ,CAACC,IAAT,CAAcE,KAAf,CAA1B,CAAT,CAZN,QAaYC,mBAbZ,CAakCX,2BAA2B,CACrDO,QAAQ,CAACC,IAAT,CAAcE,KADuC,CAb7D,kBAgBM,MAAMjB,CAAAA,GAAG,CAACK,kBAAkB,CAACa,mBAAD,CAAnB,CAAT,CAhBN,0GAmBI,MAAMlB,CAAAA,GAAG,CAACQ,yBAAyB,aAA1B,CAAT,CAnBJ,QAoBUU,oBApBV,CAoBgCX,2BAA2B,CAAC,YAAMY,OAAP,CApB3D,kBAqBI,MAAMnB,CAAAA,GAAG,CAACK,kBAAkB,CAACa,oBAAD,CAAnB,CAAT,CArBJ,qEAyBA,cAAe,SAAUrB,CAAAA,QAAV,oIACPK,GADO,kBAEX,MAAMD,CAAAA,UAAU,CAACG,yBAAD,CAA4BR,oBAA5B,CAAhB,CAFW,gFACb,qCADa","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_NOTIFICATIONS_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\nimport {\n  fetchNotificationsFailure,\n  fetchNotificationsSuccess,\n} from \"../actions/NotificationAction\";\n\nfunction* fetchNotificationAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.notification.notification.inputData\n    );\n    const response = yield api.postMethod(\n      \"bell_notifications_index\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(fetchNotificationsSuccess(response.data.data));\n    } else {\n      yield put(fetchNotificationsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchNotificationsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([\n    yield takeLatest(FETCH_NOTIFICATIONS_START, fetchNotificationAPI),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}