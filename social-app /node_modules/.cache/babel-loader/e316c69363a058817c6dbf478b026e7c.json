{"ast":null,"code":"import React, { Component } from \"react\";\nimport { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport { fetchSubscriptionSuccess, fetchSubscriptionFailure, fetchMySubscriptionSuccess, fetchMySubscriptionFailure, fetchSingleSubscriptionSuccess, fetchSingleSubscriptionFailure, subscriptionAutoRenewalSuccess, subscriptionAutoRenewalFailure, subscriptionPaymentStripeFailure, subscriptionPaymentStripeSuccess, subscriptionPaymentWalletSuccess, subscriptionPaymentWalletFailure, subscriptionPaymentPaypalSuccess, subscriptionPaymentPaypalFailure, subscriptionPaymentCCBillSuccess, subscriptionPaymentCCBillFailure, subscriptionPaymentCoinPaymentSuccess, subscriptionPaymentCoinPaymentFailure } from \"../actions/SubscriptionAction\";\nimport api from \"../../Environment\";\nimport { FETCH_SUBSCRIPTION_START, FETCH_MY_SUBSCRIPTION_START, FETCH_SINGLE_SUBSCRIPTION_START, SUBSCRIPTION_PAYMENT_STRIPE_START, SUBSCRIPTION_AUTO_RENEWAL_START, SUBSCRIPTION_PAYMENT_WALLET_START, SUBSCRIPTION_PAYMENT_PAYPAL_START, SUBSCRIPTION_PAYMENT_CCBILL_START, SUBSCRIPTION_PAYMENT_COINPAYMENT_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\n\nfunction* getSubscriptionAPI() {\n  try {\n    const response = yield api.postMethod(\"subscriptions_index\");\n    yield put(fetchSubscriptionSuccess(response.data.data));\n\n    if (response.data.success) {// Do nothing\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSubscriptionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* getMySubscriptionAPI() {\n  try {\n    const response = yield api.postMethod(\"subscriptions_history\");\n    yield put(fetchMySubscriptionSuccess(response.data.data));\n\n    if (response.data.success) {// Do nothing\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchMySubscriptionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* getSingleSubscriptionAPI() {\n  try {\n    const subscriptionInputData = yield select(state => state.subscriptions.singleSubInputData.data);\n    console.log(\"subsc\", subscriptionInputData);\n    const response = yield api.postMethod(\"subscriptions_view\", subscriptionInputData);\n    yield put(fetchSingleSubscriptionSuccess(response.data.data));\n\n    if (response.data.success) {// Do nothing\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleSubscriptionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionPaymentStripeAPI() {\n  try {\n    const subscriptioDetails = yield select(state => state.subscriptions.subPayStripe.inputData);\n    const response = yield api.postMethod(\"user_subscriptions_payment_by_stripe\", subscriptioDetails);\n\n    if (response.data.success) {\n      yield put(subscriptionPaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      localStorage.setItem(\"total_followers\", JSON.stringify(response.data.data.total_followers));\n      localStorage.setItem(\"total_followings\", JSON.stringify(response.data.data.total_followings));\n      window.location.assign(`${subscriptioDetails.user_unique_id}`);\n    } else {\n      yield put(subscriptionPaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionPaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionPaymentPaypalAPI() {\n  try {\n    const subscriptioDetails = yield select(state => state.subscriptions.subPayPaypal.inputData);\n    const response = yield api.postMethod(\"user_subscriptions_payment_by_paypal\", subscriptioDetails);\n\n    if (response.data.success) {\n      yield put(subscriptionPaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      localStorage.setItem(\"total_followers\", JSON.stringify(response.data.data.total_followers));\n      localStorage.setItem(\"total_followings\", JSON.stringify(response.data.data.total_followings));\n      window.location.assign(`${subscriptioDetails.user_unique_id}`);\n    } else {\n      yield put(subscriptionPaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionPaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionPaymentWalletAPI() {\n  try {\n    const subscriptioDetails = yield select(state => state.subscriptions.subPayWallet.inputData);\n    const response = yield api.postMethod(\"user_subscriptions_payment_by_wallet\", subscriptioDetails);\n\n    if (response.data.success) {\n      yield put(subscriptionPaymentWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      localStorage.setItem(\"total_followers\", JSON.stringify(response.data.data.total_followers));\n      localStorage.setItem(\"total_followings\", JSON.stringify(response.data.data.total_followings));\n      window.location.assign(`${subscriptioDetails.user_unique_id}`);\n    } else {\n      yield put(subscriptionPaymentWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionPaymentWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionAutoRenewalAPI() {\n  try {\n    const subscriptioDetails = yield select(state => state.subscriptions.subscriptionRenew.inputData);\n    const response = yield api.postMethod(\"subscriptions_autorenewal_status\", subscriptioDetails);\n    yield put(subscriptionAutoRenewalSuccess(response.data.data));\n\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      yield put(subscriptionAutoRenewalFailure(response.data.error));\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionAutoRenewalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionPaymentCCBillAPI() {\n  try {\n    const subscriptioDetails = yield select(state => state.subscriptions.subPayCCBill.inputData);\n    const response = yield api.postMethod(\"user_subscriptions_payment_by_ccbill\", subscriptioDetails);\n\n    if (response.data.success) {\n      yield put(subscriptionPaymentCCBillSuccess(response.data.data));\n      window.location.assign(`${response.data.data.redirect_web_url}`);\n    } else {\n      yield put(subscriptionPaymentCCBillFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionPaymentCCBillFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionPaymentCoinPaymentAPI() {\n  try {\n    const subscriptioDetails = yield select(state => state.subscriptions.subPayCoinPayment.inputData);\n    const response = yield api.postMethod(\"user_subscriptions_payment_by_coinpayment\", subscriptioDetails);\n\n    if (response.data.success) {\n      yield put(subscriptionPaymentCoinPaymentSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      setTimeout(() => {\n        window.location.assign(`${response.data.data.redirect_web_url}`);\n      }, 3000);\n    } else {\n      yield put(subscriptionPaymentCoinPaymentFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionPaymentCoinPaymentFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_SUBSCRIPTION_START, getSubscriptionAPI)]);\n  yield all([yield takeLatest(FETCH_MY_SUBSCRIPTION_START, getMySubscriptionAPI)]);\n  yield all([yield takeLatest(FETCH_SINGLE_SUBSCRIPTION_START, getSingleSubscriptionAPI)]);\n  yield all([yield takeLatest(SUBSCRIPTION_PAYMENT_STRIPE_START, subscriptionPaymentStripeAPI)]);\n  yield all([yield takeLatest(SUBSCRIPTION_PAYMENT_WALLET_START, subscriptionPaymentWalletAPI)]);\n  yield all([yield takeLatest(SUBSCRIPTION_AUTO_RENEWAL_START, subscriptionAutoRenewalAPI)]);\n  yield all([yield takeLatest(SUBSCRIPTION_PAYMENT_PAYPAL_START, subscriptionPaymentPaypalAPI)]);\n  yield all([yield takeLatest(SUBSCRIPTION_PAYMENT_CCBILL_START, subscriptionPaymentCCBillAPI)]);\n  yield all([yield takeLatest(SUBSCRIPTION_PAYMENT_COINPAYMENT_START, subscriptionPaymentCoinPaymentAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/SubscriptionSaga.jsx"],"names":["React","Component","call","select","put","takeLatest","all","fetchSubscriptionSuccess","fetchSubscriptionFailure","fetchMySubscriptionSuccess","fetchMySubscriptionFailure","fetchSingleSubscriptionSuccess","fetchSingleSubscriptionFailure","subscriptionAutoRenewalSuccess","subscriptionAutoRenewalFailure","subscriptionPaymentStripeFailure","subscriptionPaymentStripeSuccess","subscriptionPaymentWalletSuccess","subscriptionPaymentWalletFailure","subscriptionPaymentPaypalSuccess","subscriptionPaymentPaypalFailure","subscriptionPaymentCCBillSuccess","subscriptionPaymentCCBillFailure","subscriptionPaymentCoinPaymentSuccess","subscriptionPaymentCoinPaymentFailure","api","FETCH_SUBSCRIPTION_START","FETCH_MY_SUBSCRIPTION_START","FETCH_SINGLE_SUBSCRIPTION_START","SUBSCRIPTION_PAYMENT_STRIPE_START","SUBSCRIPTION_AUTO_RENEWAL_START","SUBSCRIPTION_PAYMENT_WALLET_START","SUBSCRIPTION_PAYMENT_PAYPAL_START","SUBSCRIPTION_PAYMENT_CCBILL_START","SUBSCRIPTION_PAYMENT_COINPAYMENT_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","getSubscriptionAPI","response","postMethod","data","success","notificationMessage","error","message","getMySubscriptionAPI","getSingleSubscriptionAPI","subscriptionInputData","state","subscriptions","singleSubInputData","console","log","subscriptionPaymentStripeAPI","subscriptioDetails","subPayStripe","inputData","localStorage","setItem","JSON","stringify","total_followers","total_followings","window","location","assign","user_unique_id","subscriptionPaymentPaypalAPI","subPayPaypal","subscriptionPaymentWalletAPI","subPayWallet","subscriptionAutoRenewalAPI","subscriptionRenew","subscriptionPaymentCCBillAPI","subPayCCBill","redirect_web_url","subscriptionPaymentCoinPaymentAPI","subPayCoinPayment","setTimeout","pageSaga"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport {\n  fetchSubscriptionSuccess,\n  fetchSubscriptionFailure,\n  fetchMySubscriptionSuccess,\n  fetchMySubscriptionFailure,\n  fetchSingleSubscriptionSuccess,\n  fetchSingleSubscriptionFailure,\n  subscriptionAutoRenewalSuccess,\n  subscriptionAutoRenewalFailure,\n  subscriptionPaymentStripeFailure,\n  subscriptionPaymentStripeSuccess,\n  subscriptionPaymentWalletSuccess,\n  subscriptionPaymentWalletFailure,\n  subscriptionPaymentPaypalSuccess,\n  subscriptionPaymentPaypalFailure,\n  subscriptionPaymentCCBillSuccess,\n  subscriptionPaymentCCBillFailure,\n  subscriptionPaymentCoinPaymentSuccess,\n  subscriptionPaymentCoinPaymentFailure,\n} from \"../actions/SubscriptionAction\";\n\nimport api from \"../../Environment\";\nimport {\n  FETCH_SUBSCRIPTION_START,\n  FETCH_MY_SUBSCRIPTION_START,\n  FETCH_SINGLE_SUBSCRIPTION_START,\n  SUBSCRIPTION_PAYMENT_STRIPE_START,\n  SUBSCRIPTION_AUTO_RENEWAL_START,\n  SUBSCRIPTION_PAYMENT_WALLET_START,\n  SUBSCRIPTION_PAYMENT_PAYPAL_START,\n  SUBSCRIPTION_PAYMENT_CCBILL_START,\n  SUBSCRIPTION_PAYMENT_COINPAYMENT_START,\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\n\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\nfunction* getSubscriptionAPI() {\n  try {\n    const response = yield api.postMethod(\"subscriptions_index\");\n    yield put(fetchSubscriptionSuccess(response.data.data));\n    if (response.data.success) {\n      // Do nothing\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSubscriptionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* getMySubscriptionAPI() {\n  try {\n    const response = yield api.postMethod(\"subscriptions_history\");\n    yield put(fetchMySubscriptionSuccess(response.data.data));\n    if (response.data.success) {\n      // Do nothing\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchMySubscriptionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* getSingleSubscriptionAPI() {\n  try {\n    const subscriptionInputData = yield select(\n      (state) => state.subscriptions.singleSubInputData.data\n    );\n    console.log(\"subsc\", subscriptionInputData);\n    const response = yield api.postMethod(\n      \"subscriptions_view\",\n      subscriptionInputData\n    );\n    yield put(fetchSingleSubscriptionSuccess(response.data.data));\n    if (response.data.success) {\n      // Do nothing\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleSubscriptionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionPaymentStripeAPI() {\n  try {\n    const subscriptioDetails = yield select(\n      (state) => state.subscriptions.subPayStripe.inputData\n    );\n    const response = yield api.postMethod(\n      \"user_subscriptions_payment_by_stripe\",\n      subscriptioDetails\n    );\n    if (response.data.success) {\n      yield put(subscriptionPaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      localStorage.setItem(\n        \"total_followers\",\n        JSON.stringify(response.data.data.total_followers)\n      );\n      localStorage.setItem(\n        \"total_followings\",\n        JSON.stringify(response.data.data.total_followings)\n      );\n      window.location.assign(`${subscriptioDetails.user_unique_id}`);\n    } else {\n      yield put(subscriptionPaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionPaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionPaymentPaypalAPI() {\n  try {\n    const subscriptioDetails = yield select(\n      (state) => state.subscriptions.subPayPaypal.inputData\n    );\n    const response = yield api.postMethod(\n      \"user_subscriptions_payment_by_paypal\",\n      subscriptioDetails\n    );\n    if (response.data.success) {\n      yield put(subscriptionPaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      localStorage.setItem(\n        \"total_followers\",\n        JSON.stringify(response.data.data.total_followers)\n      );\n      localStorage.setItem(\n        \"total_followings\",\n        JSON.stringify(response.data.data.total_followings)\n      );\n      window.location.assign(`${subscriptioDetails.user_unique_id}`);\n    } else {\n      yield put(subscriptionPaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionPaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionPaymentWalletAPI() {\n  try {\n    const subscriptioDetails = yield select(\n      (state) => state.subscriptions.subPayWallet.inputData\n    );\n    const response = yield api.postMethod(\n      \"user_subscriptions_payment_by_wallet\",\n      subscriptioDetails\n    );\n\n    if (response.data.success) {\n      yield put(subscriptionPaymentWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      localStorage.setItem(\n        \"total_followers\",\n        JSON.stringify(response.data.data.total_followers)\n      );\n      localStorage.setItem(\n        \"total_followings\",\n        JSON.stringify(response.data.data.total_followings)\n      );\n      window.location.assign(`${subscriptioDetails.user_unique_id}`);\n    } else {\n      yield put(subscriptionPaymentWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionPaymentWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionAutoRenewalAPI() {\n  try {\n    const subscriptioDetails = yield select(\n      (state) => state.subscriptions.subscriptionRenew.inputData\n    );\n    const response = yield api.postMethod(\n      \"subscriptions_autorenewal_status\",\n      subscriptioDetails\n    );\n    yield put(subscriptionAutoRenewalSuccess(response.data.data));\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(subscriptionAutoRenewalFailure(response.data.error));\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionAutoRenewalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionPaymentCCBillAPI() {\n  try {\n    const subscriptioDetails = yield select(\n      (state) => state.subscriptions.subPayCCBill.inputData\n    );\n    const response = yield api.postMethod(\n      \"user_subscriptions_payment_by_ccbill\",\n      subscriptioDetails\n    );\n    if (response.data.success) {\n      yield put(subscriptionPaymentCCBillSuccess(response.data.data));\n      window.location.assign(`${response.data.data.redirect_web_url}`);\n    } else {\n      yield put(subscriptionPaymentCCBillFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionPaymentCCBillFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* subscriptionPaymentCoinPaymentAPI() {\n  try {\n    const subscriptioDetails = yield select(\n      (state) => state.subscriptions.subPayCoinPayment.inputData\n    );\n    const response = yield api.postMethod(\n      \"user_subscriptions_payment_by_coinpayment\",\n      subscriptioDetails\n    );\n    if (response.data.success) {\n      yield put(subscriptionPaymentCoinPaymentSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      setTimeout(() => {\n        window.location.assign(`${response.data.data.redirect_web_url}`);\n      }, 3000);\n    } else {\n      yield put(subscriptionPaymentCoinPaymentFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(subscriptionPaymentCoinPaymentFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_SUBSCRIPTION_START, getSubscriptionAPI)]);\n  yield all([\n    yield takeLatest(FETCH_MY_SUBSCRIPTION_START, getMySubscriptionAPI),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_SINGLE_SUBSCRIPTION_START, getSingleSubscriptionAPI),\n  ]);\n  yield all([\n    yield takeLatest(\n      SUBSCRIPTION_PAYMENT_STRIPE_START,\n      subscriptionPaymentStripeAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      SUBSCRIPTION_PAYMENT_WALLET_START,\n      subscriptionPaymentWalletAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      SUBSCRIPTION_AUTO_RENEWAL_START,\n      subscriptionAutoRenewalAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      SUBSCRIPTION_PAYMENT_PAYPAL_START,\n      subscriptionPaymentPaypalAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      SUBSCRIPTION_PAYMENT_CCBILL_START,\n      subscriptionPaymentCCBillAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      SUBSCRIPTION_PAYMENT_COINPAYMENT_START,\n      subscriptionPaymentCoinPaymentAPI\n    ),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}