{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_USER_CATEGORY_LIST_START, FETCH_CONTENT_CREATOR_LIST_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchUserCategoryListSuccess, fetchUserCategoryListFailure, fetchContentCreatorListSuccess, fetchContentCreatorListFailure } from \"../actions/UserCategoryAction\";\n\nfunction* fetchUserCategoryListAPI() {\n  try {\n    const response = yield api.postMethod(\"u_categories_list\");\n\n    if (response.data.success) {\n      yield put(fetchUserCategoryListSuccess(response.data));\n    } else {\n      yield put(fetchUserCategoryListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserCategoryListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchContentCreatorListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"content_creators_list\", action.data);\n\n    if (response.data.success) {\n      yield put(fetchContentCreatorListSuccess(response.data));\n    } else {\n      yield put(fetchContentCreatorListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchContentCreatorListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_USER_CATEGORY_LIST_START, fetchUserCategoryListAPI)]);\n  yield all([yield takeLatest(FETCH_CONTENT_CREATOR_LIST_START, fetchContentCreatorListAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/UserCategorySaga.jsx"],"names":["call","select","put","takeLatest","all","api","FETCH_USER_CATEGORY_LIST_START","FETCH_CONTENT_CREATOR_LIST_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchUserCategoryListSuccess","fetchUserCategoryListFailure","fetchContentCreatorListSuccess","fetchContentCreatorListFailure","fetchUserCategoryListAPI","response","postMethod","data","success","error","notificationMessage","message","fetchContentCreatorListAPI","action","pageSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,UAA5B,EAAwCC,GAAxC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AAEA,SACEC,8BADF,EAEEC,gCAFF,QAGO,2BAHP;AAKA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SACEC,6BADF,EAEEC,2BAFF,QAGO,6CAHP;AAKA,SACEC,4BADF,EAEEC,4BAFF,EAGEC,8BAHF,EAIEC,8BAJF,QAKO,+BALP;;AAQA,UAAUC,wBAAV,GAAqC;AACnC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,UAAJ,CAAe,mBAAf,CAAvB;;AAEA,QAAID,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMjB,GAAG,CAACS,4BAA4B,CAACK,QAAQ,CAACE,IAAV,CAA7B,CAAT;AACD,KAFD,MAEO;AACL,YAAMhB,GAAG,CAACU,4BAA4B,CAACI,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAA7B,CAAT;AACA,YAAMC,mBAAmB,GAAGX,2BAA2B,CACrDM,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMlB,GAAG,CAACM,kBAAkB,CAACa,mBAAD,CAAnB,CAAT;AACD;AACF,GAZD,CAYE,OAAOD,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACU,4BAA4B,CAACQ,KAAD,CAA7B,CAAT;AACA,UAAMC,mBAAmB,GAAGX,2BAA2B,CAACU,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMpB,GAAG,CAACM,kBAAkB,CAACa,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUE,0BAAV,CAAqCC,MAArC,EAA6C;AAC3C,MAAI;AACF,UAAMR,QAAQ,GAAG,MAAMX,GAAG,CAACY,UAAJ,CAAe,uBAAf,EAAyCO,MAAM,CAACN,IAAhD,CAAvB;;AAEA,QAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMjB,GAAG,CAACW,8BAA8B,CAACG,QAAQ,CAACE,IAAV,CAA/B,CAAT;AACD,KAFD,MAEO;AACL,YAAMhB,GAAG,CAACY,8BAA8B,CAACE,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAA/B,CAAT;AACA,YAAMC,mBAAmB,GAAGX,2BAA2B,CACrDM,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMlB,GAAG,CAACM,kBAAkB,CAACa,mBAAD,CAAnB,CAAT;AACD;AACF,GAZD,CAYE,OAAOD,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACY,8BAA8B,CAACM,KAAD,CAA/B,CAAT;AACA,UAAMC,mBAAmB,GAAGX,2BAA2B,CAACU,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMpB,GAAG,CAACM,kBAAkB,CAACa,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMrB,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACG,8BAAD,EAAiCS,wBAAjC,CAAjB,CAAD,CAAT;AACA,QAAMX,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACI,gCAAD,EAAmCgB,0BAAnC,CAAjB,CAAD,CAAT;AACD","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\n\nimport {\n  FETCH_USER_CATEGORY_LIST_START,\n  FETCH_CONTENT_CREATOR_LIST_START\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\nimport {\n  fetchUserCategoryListSuccess,\n  fetchUserCategoryListFailure,\n  fetchContentCreatorListSuccess,\n  fetchContentCreatorListFailure\n} from \"../actions/UserCategoryAction\";\n\n\nfunction* fetchUserCategoryListAPI() {\n  try {\n    const response = yield api.postMethod(\"u_categories_list\");\n\n    if (response.data.success) {\n      yield put(fetchUserCategoryListSuccess(response.data));\n    } else {\n      yield put(fetchUserCategoryListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserCategoryListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchContentCreatorListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"content_creators_list\" , action.data);\n\n    if (response.data.success) {\n      yield put(fetchContentCreatorListSuccess(response.data));\n    } else {\n      yield put(fetchContentCreatorListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchContentCreatorListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_USER_CATEGORY_LIST_START, fetchUserCategoryListAPI)]);\n  yield all([yield takeLatest(FETCH_CONTENT_CREATOR_LIST_START, fetchContentCreatorListAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}