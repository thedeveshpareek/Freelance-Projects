{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { saveVeriDocFailure, saveVeriDocSuccess, fetchVeriDocumentsSuccess, fetchVeriDocumentsFailure, delVeriDocSuccess, delVeriDocFailure, verificationStatusCheckSuccess, verificationStatusCheckFailure } from \"../actions/VerificationDocumentAction\";\nimport { DEL_VERI_DOC_START, FETCH_VERI_DOCUMENT_START, SAVE_VERI_DOC_START, VERI_STATUS_CHECK_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchVeriDocsAPI() {\n  try {\n    const response = yield api.postMethod(\"documents_list\");\n\n    if (response.data.success) {\n      yield put(fetchVeriDocumentsSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(fetchVeriDocumentsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchVeriDocumentsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveVeriDocsAPI() {\n  try {\n    const inputData = yield select(state => state.docs.saveDocs.inputData);\n    const response = yield api.postMethod(\"documents_save\", inputData);\n\n    if (response.data.success) {\n      yield put(saveVeriDocSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveVeriDocFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveVeriDocFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* delVeriDocsAPI() {\n  try {\n    const inputData = yield select(state => state.docs.delDocs.inputData);\n    const response = yield api.postMethod(\"documents_delete\", inputData);\n\n    if (response.data.success) {\n      yield put(delVeriDocSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(delVeriDocFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(delVeriDocFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* checkVeriDocStatusAPI() {\n  try {\n    const inputData = yield select(state => state.docs.docStatus.inputData);\n    const response = yield api.postMethod(\"user_documents_status\", inputData);\n\n    if (response.data.success) {\n      yield put(verificationStatusCheckSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(verificationStatusCheckFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(verificationStatusCheckFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_VERI_DOCUMENT_START, fetchVeriDocsAPI)]);\n  yield all([yield takeLatest(SAVE_VERI_DOC_START, saveVeriDocsAPI)]);\n  yield all([yield takeLatest(DEL_VERI_DOC_START, delVeriDocsAPI)]);\n  yield all([yield takeLatest(VERI_STATUS_CHECK_START, checkVeriDocStatusAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/VerificationDocumentSaga.jsx"],"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","saveVeriDocFailure","saveVeriDocSuccess","fetchVeriDocumentsSuccess","fetchVeriDocumentsFailure","delVeriDocSuccess","delVeriDocFailure","verificationStatusCheckSuccess","verificationStatusCheckFailure","DEL_VERI_DOC_START","FETCH_VERI_DOCUMENT_START","SAVE_VERI_DOC_START","VERI_STATUS_CHECK_START","checkLogoutStatus","fetchVeriDocsAPI","response","postMethod","data","success","notificationMessage","message","error","saveVeriDocsAPI","inputData","state","docs","saveDocs","delVeriDocsAPI","delDocs","checkVeriDocStatusAPI","docStatus","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\n\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  saveVeriDocFailure,\n  saveVeriDocSuccess,\n  fetchVeriDocumentsSuccess,\n  fetchVeriDocumentsFailure,\n  delVeriDocSuccess,\n  delVeriDocFailure,\n  verificationStatusCheckSuccess,\n  verificationStatusCheckFailure,\n} from \"../actions/VerificationDocumentAction\";\nimport {\n  DEL_VERI_DOC_START,\n  FETCH_VERI_DOCUMENT_START,\n  SAVE_VERI_DOC_START,\n  VERI_STATUS_CHECK_START,\n} from \"../actions/ActionConstant\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchVeriDocsAPI() {\n  try {\n    const response = yield api.postMethod(\"documents_list\");\n    if (response.data.success) {\n      yield put(fetchVeriDocumentsSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(fetchVeriDocumentsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchVeriDocumentsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveVeriDocsAPI() {\n  try {\n    const inputData = yield select((state) => state.docs.saveDocs.inputData);\n    const response = yield api.postMethod(\"documents_save\", inputData);\n    if (response.data.success) {\n      yield put(saveVeriDocSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(saveVeriDocFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveVeriDocFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* delVeriDocsAPI() {\n  try {\n    const inputData = yield select((state) => state.docs.delDocs.inputData);\n    const response = yield api.postMethod(\"documents_delete\", inputData);\n    if (response.data.success) {\n      yield put(delVeriDocSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(delVeriDocFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(delVeriDocFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* checkVeriDocStatusAPI() {\n  try {\n    const inputData = yield select((state) => state.docs.docStatus.inputData);\n    const response = yield api.postMethod(\"user_documents_status\", inputData);\n    if (response.data.success) {\n      yield put(verificationStatusCheckSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(verificationStatusCheckFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(verificationStatusCheckFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_VERI_DOCUMENT_START, fetchVeriDocsAPI)]);\n  yield all([yield takeLatest(SAVE_VERI_DOC_START, saveVeriDocsAPI)]);\n  yield all([yield takeLatest(DEL_VERI_DOC_START, delVeriDocsAPI)]);\n  yield all([yield takeLatest(VERI_STATUS_CHECK_START, checkVeriDocStatusAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}