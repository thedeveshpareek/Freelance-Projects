{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_VIDEO_CALL_REQUESTS_START, SAVE_VIDEO_CALL_AMOUNT_START, SAVE_VIDEO_CALL_REQUEST_START, VIDEO_CALL_REQUESTS_ACCEPT_START, VIDEO_CALL_REQUESTS_JOIN_START, VIDEO_CALL_REQUESTS_PAYMENT_PAYPAL_START, VIDEO_CALL_REQUESTS_PAYMENT_STRIPE_START, VIDEO_CALL_REQUESTS_REJECT_FAILURE, VIDEO_CALL_REQUESTS_REJECT_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchVideoCallRequestsFailure, fetchVideoCallRequestsSuccess, saveVideoCallAmountFailure, saveVideoCallAmountSuccess, saveVideoCallRequestFailure, saveVideoCallRequestSuccess, videoCallRequestsAcceptFailure, videoCallRequestsAcceptSuccess, videoCallRequestsJoinFailure, videoCallRequestsJoinSuccess, videoCallRequestsPaymentPaypalFailure, videoCallRequestsPaymentPaypalSuccess, videoCallRequestsPaymentStripeFailure, videoCallRequestsPaymentStripeSuccess, videoCallRequestsRejectFailure, videoCallRequestsRejectSuccess } from \"../actions/VideoCallAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchVideoCallRequestsAPI() {\n  try {\n    const response = yield api.postMethod(\"video_call_requests\");\n\n    if (response.data.success) {\n      yield put(fetchVideoCallRequestsSuccess(response.data.data));\n    } else {\n      yield put(fetchVideoCallRequestsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchVideoCallRequestsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(state => state.videocall.saveVideoCallRequest.inputData);\n\n    if (!inputData.start_time && !inputData.model_id) {\n      // !!!!! Dont change this condition. If changing get confirmation vidhya\n      yield put(saveVideoCallRequestFailure(\"Please fill the content\"));\n      const notificationMessage = getErrorNotificationMessage(\"Please fill the content\");\n      yield put(createNotification(notificationMessage));\n    } else {\n      const response = yield api.postMethod(\"video_call_requests_save\", inputData);\n\n      if (response.data.success) {\n        yield put(saveVideoCallRequestSuccess(response.data.data));\n        const notificationMessage = getSuccessNotificationMessage(response.data.message);\n        yield put(createNotification(notificationMessage)); // window.location.assign(\"/post/\" + response.data.data.post_unique_id);\n      } else {\n        yield put(saveVideoCallRequestFailure(response.data.error));\n        const notificationMessage = getErrorNotificationMessage(response.data.error);\n        yield put(createNotification(notificationMessage));\n      }\n    }\n  } catch (error) {\n    yield put(saveVideoCallRequestFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* acceptVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(state => state.post.acceptVideoCallRequest.inputData);\n    const response = yield api.postMethod(\"video_call_requests_accept\", inputData);\n\n    if (response.data.success) {\n      yield put(videoCallRequestsAcceptSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsAcceptFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsAcceptFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* rejectVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(state => state.post.rejectVideoCallRequest.inputData);\n    const response = yield api.postMethod(\"video_call_requests_reject\", inputData);\n\n    if (response.data.success) {\n      yield put(videoCallRequestsRejectSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsRejectFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsRejectFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* joinVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(state => state.post.joinVideoCallRequest.inputData);\n    const response = yield api.postMethod(\"video_call_requests_join\", inputData);\n\n    if (response.data.success) {\n      yield put(videoCallRequestsJoinSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsJoinFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsJoinFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PayStripeAPI() {\n  try {\n    const paymentInputData = yield select(state => state.post.videoCallRequestPayStripe.inputData);\n    const response = yield api.postMethod(\"video_call_payment_by_stripe\", paymentInputData);\n\n    if (response.data.success) {\n      yield put(videoCallRequestsPaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(videoCallRequestsPaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsPaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PayPaypalAPI() {\n  try {\n    const paymentInputData = yield select(state => state.post.videoCallRequestPayPaypal.inputData);\n    const response = yield api.postMethod(\"video_call_payment_by_paypal\", paymentInputData);\n\n    if (response.data.success) {\n      yield put(videoCallRequestsPaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(videoCallRequestsPaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsPaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveVideoAmountAPI() {\n  try {\n    const inputData = yield select(state => state.post.saveVideoCallAmount.inputData);\n    const response = yield api.postMethod(\"video_call_amount_update\", inputData);\n\n    if (response.data.success) {\n      yield put(saveVideoCallAmountSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage)); // window.location.assign(\"/post/\" + response.data.data.post_unique_id);\n    } else {\n      yield put(saveVideoCallAmountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveVideoCallAmountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_VIDEO_CALL_REQUESTS_START, fetchVideoCallRequestsAPI)]);\n  yield all([yield takeLatest(SAVE_VIDEO_CALL_REQUEST_START, saveVideoCallRequestAPI)]);\n  yield all([yield takeLatest(VIDEO_CALL_REQUESTS_ACCEPT_START, acceptVideoCallRequestAPI)]);\n  yield all([yield takeLatest(VIDEO_CALL_REQUESTS_REJECT_START, rejectVideoCallRequestAPI)]);\n  yield all([yield takeLatest(VIDEO_CALL_REQUESTS_JOIN_START, joinVideoCallRequestAPI)]);\n  yield all([yield takeLatest(VIDEO_CALL_REQUESTS_PAYMENT_STRIPE_START, PayStripeAPI)]);\n  yield all([yield takeLatest(VIDEO_CALL_REQUESTS_PAYMENT_PAYPAL_START, PayPaypalAPI)]);\n  yield all([yield takeLatest(SAVE_VIDEO_CALL_AMOUNT_START, saveVideoAmountAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/VideoCallSaga.jsx"],"names":["call","select","put","takeLatest","all","api","FETCH_VIDEO_CALL_REQUESTS_START","SAVE_VIDEO_CALL_AMOUNT_START","SAVE_VIDEO_CALL_REQUEST_START","VIDEO_CALL_REQUESTS_ACCEPT_START","VIDEO_CALL_REQUESTS_JOIN_START","VIDEO_CALL_REQUESTS_PAYMENT_PAYPAL_START","VIDEO_CALL_REQUESTS_PAYMENT_STRIPE_START","VIDEO_CALL_REQUESTS_REJECT_FAILURE","VIDEO_CALL_REQUESTS_REJECT_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchVideoCallRequestsFailure","fetchVideoCallRequestsSuccess","saveVideoCallAmountFailure","saveVideoCallAmountSuccess","saveVideoCallRequestFailure","saveVideoCallRequestSuccess","videoCallRequestsAcceptFailure","videoCallRequestsAcceptSuccess","videoCallRequestsJoinFailure","videoCallRequestsJoinSuccess","videoCallRequestsPaymentPaypalFailure","videoCallRequestsPaymentPaypalSuccess","videoCallRequestsPaymentStripeFailure","videoCallRequestsPaymentStripeSuccess","videoCallRequestsRejectFailure","videoCallRequestsRejectSuccess","checkLogoutStatus","fetchVideoCallRequestsAPI","response","postMethod","data","success","error","notificationMessage","message","saveVideoCallRequestAPI","inputData","state","videocall","saveVideoCallRequest","start_time","model_id","acceptVideoCallRequestAPI","post","acceptVideoCallRequest","window","location","assign","rejectVideoCallRequestAPI","rejectVideoCallRequest","joinVideoCallRequestAPI","joinVideoCallRequest","PayStripeAPI","paymentInputData","videoCallRequestPayStripe","post_unique_id","PayPaypalAPI","videoCallRequestPayPaypal","saveVideoAmountAPI","saveVideoCallAmount","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  FETCH_VIDEO_CALL_REQUESTS_START,\n  SAVE_VIDEO_CALL_AMOUNT_START,\n  SAVE_VIDEO_CALL_REQUEST_START,\n  VIDEO_CALL_REQUESTS_ACCEPT_START,\n  VIDEO_CALL_REQUESTS_JOIN_START,\n  VIDEO_CALL_REQUESTS_PAYMENT_PAYPAL_START,\n  VIDEO_CALL_REQUESTS_PAYMENT_STRIPE_START,\n  VIDEO_CALL_REQUESTS_REJECT_FAILURE,\n  VIDEO_CALL_REQUESTS_REJECT_START,\n} from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchVideoCallRequestsFailure,\n  fetchVideoCallRequestsSuccess,\n  saveVideoCallAmountFailure,\n  saveVideoCallAmountSuccess,\n  saveVideoCallRequestFailure,\n  saveVideoCallRequestSuccess,\n  videoCallRequestsAcceptFailure,\n  videoCallRequestsAcceptSuccess,\n  videoCallRequestsJoinFailure,\n  videoCallRequestsJoinSuccess,\n  videoCallRequestsPaymentPaypalFailure,\n  videoCallRequestsPaymentPaypalSuccess,\n  videoCallRequestsPaymentStripeFailure,\n  videoCallRequestsPaymentStripeSuccess,\n  videoCallRequestsRejectFailure,\n  videoCallRequestsRejectSuccess,\n} from \"../actions/VideoCallAction\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchVideoCallRequestsAPI() {\n  try {\n    const response = yield api.postMethod(\"video_call_requests\");\n    if (response.data.success) {\n      yield put(fetchVideoCallRequestsSuccess(response.data.data));\n    } else {\n      yield put(fetchVideoCallRequestsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchVideoCallRequestsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.videocall.saveVideoCallRequest.inputData\n    );\n\n    if (!inputData.start_time && !inputData.model_id) {\n      // !!!!! Dont change this condition. If changing get confirmation vidhya\n      yield put(saveVideoCallRequestFailure(\"Please fill the content\"));\n      const notificationMessage = getErrorNotificationMessage(\n        \"Please fill the content\"\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      const response = yield api.postMethod(\n        \"video_call_requests_save\",\n        inputData\n      );\n      if (response.data.success) {\n        yield put(saveVideoCallRequestSuccess(response.data.data));\n        const notificationMessage = getSuccessNotificationMessage(\n          response.data.message\n        );\n        yield put(createNotification(notificationMessage));\n        // window.location.assign(\"/post/\" + response.data.data.post_unique_id);\n      } else {\n        yield put(saveVideoCallRequestFailure(response.data.error));\n        const notificationMessage = getErrorNotificationMessage(\n          response.data.error\n        );\n        yield put(createNotification(notificationMessage));\n      }\n    }\n  } catch (error) {\n    yield put(saveVideoCallRequestFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* acceptVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.acceptVideoCallRequest.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_requests_accept\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(videoCallRequestsAcceptSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsAcceptFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsAcceptFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* rejectVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.rejectVideoCallRequest.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_requests_reject\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(videoCallRequestsRejectSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsRejectFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsRejectFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* joinVideoCallRequestAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.joinVideoCallRequest.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_requests_join\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(videoCallRequestsJoinSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      yield put(videoCallRequestsJoinFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsJoinFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PayStripeAPI() {\n  try {\n    const paymentInputData = yield select(\n      (state) => state.post.videoCallRequestPayStripe.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_payment_by_stripe\",\n      paymentInputData\n    );\n    if (response.data.success) {\n      yield put(videoCallRequestsPaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(videoCallRequestsPaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsPaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* PayPaypalAPI() {\n  try {\n    const paymentInputData = yield select(\n      (state) => state.post.videoCallRequestPayPaypal.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_payment_by_paypal\",\n      paymentInputData\n    );\n    if (response.data.success) {\n      yield put(videoCallRequestsPaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/post/\" + response.data.data.post.post_unique_id);\n    } else {\n      yield put(videoCallRequestsPaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallRequestsPaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveVideoAmountAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.saveVideoCallAmount.inputData\n    );\n    const response = yield api.postMethod(\n      \"video_call_amount_update\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(saveVideoCallAmountSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      // window.location.assign(\"/post/\" + response.data.data.post_unique_id);\n    } else {\n      yield put(saveVideoCallAmountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveVideoCallAmountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([\n    yield takeLatest(\n      FETCH_VIDEO_CALL_REQUESTS_START,\n      fetchVideoCallRequestsAPI\n    ),\n  ]);\n\n  yield all([\n    yield takeLatest(SAVE_VIDEO_CALL_REQUEST_START, saveVideoCallRequestAPI),\n  ]);\n  yield all([\n    yield takeLatest(\n      VIDEO_CALL_REQUESTS_ACCEPT_START,\n      acceptVideoCallRequestAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(\n      VIDEO_CALL_REQUESTS_REJECT_START,\n      rejectVideoCallRequestAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(VIDEO_CALL_REQUESTS_JOIN_START, joinVideoCallRequestAPI),\n  ]);\n  yield all([\n    yield takeLatest(VIDEO_CALL_REQUESTS_PAYMENT_STRIPE_START, PayStripeAPI),\n  ]);\n  yield all([\n    yield takeLatest(VIDEO_CALL_REQUESTS_PAYMENT_PAYPAL_START, PayPaypalAPI),\n  ]);\n  yield all([\n    yield takeLatest(SAVE_VIDEO_CALL_AMOUNT_START, saveVideoAmountAPI),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}