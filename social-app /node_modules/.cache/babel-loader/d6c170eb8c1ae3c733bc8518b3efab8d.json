{"ast":null,"code":"import _regeneratorRuntime from\"/home/codegama/bhawya/source_code/fx-frontend-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchUserCategoryListAPI),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchContentCreatorListAPI),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(pageSaga);import{call,select,put,takeLatest,all}from\"redux-saga/effects\";import api from\"../../Environment\";import{FETCH_USER_CATEGORY_LIST_START,FETCH_CONTENT_CREATOR_LIST_START}from\"../actions/ActionConstant\";import{createNotification}from\"react-redux-notify\";import{getSuccessNotificationMessage,getErrorNotificationMessage}from\"../../components/helper/NotificationMessage\";import{fetchUserCategoryListSuccess,fetchUserCategoryListFailure,fetchContentCreatorListSuccess,fetchContentCreatorListFailure}from\"../actions/UserCategoryAction\";function fetchUserCategoryListAPI(){var response,notificationMessage,_notificationMessage;return _regeneratorRuntime.wrap(function fetchUserCategoryListAPI$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return api.postMethod(\"u_categories_list\");case 3:response=_context.sent;if(!response.data.success){_context.next=9;break;}_context.next=7;return put(fetchUserCategoryListSuccess(response.data));case 7:_context.next=14;break;case 9:_context.next=11;return put(fetchUserCategoryListFailure(response.data.error));case 11:notificationMessage=getErrorNotificationMessage(response.data.error);_context.next=14;return put(createNotification(notificationMessage));case 14:_context.next=23;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](0);_context.next=20;return put(fetchUserCategoryListFailure(_context.t0));case 20:_notificationMessage=getErrorNotificationMessage(_context.t0.message);_context.next=23;return put(createNotification(_notificationMessage));case 23:case\"end\":return _context.stop();}}},_marked,null,[[0,16]]);}function fetchContentCreatorListAPI(action){var response,notificationMessage,_notificationMessage2;return _regeneratorRuntime.wrap(function fetchContentCreatorListAPI$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return api.postMethod(\"content_creators_list\",action.data);case 3:response=_context2.sent;if(!response.data.success){_context2.next=9;break;}_context2.next=7;return put(fetchContentCreatorListSuccess(response.data));case 7:_context2.next=14;break;case 9:_context2.next=11;return put(fetchContentCreatorListFailure(response.data.error));case 11:notificationMessage=getErrorNotificationMessage(response.data.error);_context2.next=14;return put(createNotification(notificationMessage));case 14:_context2.next=23;break;case 16:_context2.prev=16;_context2.t0=_context2[\"catch\"](0);_context2.next=20;return put(fetchContentCreatorListFailure(_context2.t0));case 20:_notificationMessage2=getErrorNotificationMessage(_context2.t0.message);_context2.next=23;return put(createNotification(_notificationMessage2));case 23:case\"end\":return _context2.stop();}}},_marked2,null,[[0,16]]);}export default function pageSaga(){return _regeneratorRuntime.wrap(function pageSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.t0=all;_context3.next=3;return takeLatest(FETCH_USER_CATEGORY_LIST_START,fetchUserCategoryListAPI);case 3:_context3.t1=_context3.sent;_context3.t2=[_context3.t1];_context3.next=7;return(0,_context3.t0)(_context3.t2);case 7:_context3.t3=all;_context3.next=10;return takeLatest(FETCH_CONTENT_CREATOR_LIST_START,fetchContentCreatorListAPI);case 10:_context3.t4=_context3.sent;_context3.t5=[_context3.t4];_context3.next=14;return(0,_context3.t3)(_context3.t5);case 14:case\"end\":return _context3.stop();}}},_marked3);}","map":{"version":3,"sources":["/home/codegama/bhawya/source_code/fx-frontend-base/src/store/sagas/UserCategorySaga.jsx"],"names":["fetchUserCategoryListAPI","fetchContentCreatorListAPI","pageSaga","call","select","put","takeLatest","all","api","FETCH_USER_CATEGORY_LIST_START","FETCH_CONTENT_CREATOR_LIST_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchUserCategoryListSuccess","fetchUserCategoryListFailure","fetchContentCreatorListSuccess","fetchContentCreatorListFailure","postMethod","response","data","success","error","notificationMessage","message","action"],"mappings":"kNAsBUA,wB,iDAoBAC,0B,iDAoBeC,Q,EA9DzB,OAASC,IAAT,CAAeC,MAAf,CAAuBC,GAAvB,CAA4BC,UAA5B,CAAwCC,GAAxC,KAAmD,oBAAnD,CACA,MAAOC,CAAAA,GAAP,KAAgB,mBAAhB,CAEA,OACEC,8BADF,CAEEC,gCAFF,KAGO,2BAHP,CAKA,OAASC,kBAAT,KAAmC,oBAAnC,CACA,OACEC,6BADF,CAEEC,2BAFF,KAGO,6CAHP,CAKA,OACEC,4BADF,CAEEC,4BAFF,CAGEC,8BAHF,CAIEC,8BAJF,KAKO,+BALP,CAQA,QAAUjB,CAAAA,wBAAV,0NAEqB,MAAMQ,CAAAA,GAAG,CAACU,UAAJ,CAAe,mBAAf,CAAN,CAFrB,OAEUC,QAFV,mBAIQA,QAAQ,CAACC,IAAT,CAAcC,OAJtB,yCAKM,MAAMhB,CAAAA,GAAG,CAACS,4BAA4B,CAACK,QAAQ,CAACC,IAAV,CAA7B,CAAT,CALN,sDAOM,MAAMf,CAAAA,GAAG,CAACU,4BAA4B,CAACI,QAAQ,CAACC,IAAT,CAAcE,KAAf,CAA7B,CAAT,CAPN,QAQYC,mBARZ,CAQkCV,2BAA2B,CACrDM,QAAQ,CAACC,IAAT,CAAcE,KADuC,CAR7D,kBAWM,MAAMjB,CAAAA,GAAG,CAACM,kBAAkB,CAACY,mBAAD,CAAnB,CAAT,CAXN,0GAcI,MAAMlB,CAAAA,GAAG,CAACU,4BAA4B,aAA7B,CAAT,CAdJ,QAeUQ,oBAfV,CAegCV,2BAA2B,CAAC,YAAMW,OAAP,CAf3D,kBAgBI,MAAMnB,CAAAA,GAAG,CAACM,kBAAkB,CAACY,oBAAD,CAAnB,CAAT,CAhBJ,qEAoBA,QAAUtB,CAAAA,0BAAV,CAAqCwB,MAArC,iOAEqB,MAAMjB,CAAAA,GAAG,CAACU,UAAJ,CAAe,uBAAf,CAAyCO,MAAM,CAACL,IAAhD,CAAN,CAFrB,OAEUD,QAFV,oBAIQA,QAAQ,CAACC,IAAT,CAAcC,OAJtB,2CAKM,MAAMhB,CAAAA,GAAG,CAACW,8BAA8B,CAACG,QAAQ,CAACC,IAAV,CAA/B,CAAT,CALN,wDAOM,MAAMf,CAAAA,GAAG,CAACY,8BAA8B,CAACE,QAAQ,CAACC,IAAT,CAAcE,KAAf,CAA/B,CAAT,CAPN,QAQYC,mBARZ,CAQkCV,2BAA2B,CACrDM,QAAQ,CAACC,IAAT,CAAcE,KADuC,CAR7D,mBAWM,MAAMjB,CAAAA,GAAG,CAACM,kBAAkB,CAACY,mBAAD,CAAnB,CAAT,CAXN,+GAcI,MAAMlB,CAAAA,GAAG,CAACY,8BAA8B,cAA/B,CAAT,CAdJ,QAeUM,qBAfV,CAegCV,2BAA2B,CAAC,aAAMW,OAAP,CAf3D,mBAgBI,MAAMnB,CAAAA,GAAG,CAACM,kBAAkB,CAACY,qBAAD,CAAnB,CAAT,CAhBJ,uEAoBA,cAAe,SAAUrB,CAAAA,QAAV,oIACPK,GADO,kBACF,MAAMD,CAAAA,UAAU,CAACG,8BAAD,CAAiCT,wBAAjC,CAAhB,CADE,gFACb,qCADa,oBAEPO,GAFO,mBAEF,MAAMD,CAAAA,UAAU,CAACI,gCAAD,CAAmCT,0BAAnC,CAAhB,CAFE,kFAEb,qCAFa","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\n\nimport {\n  FETCH_USER_CATEGORY_LIST_START,\n  FETCH_CONTENT_CREATOR_LIST_START\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\nimport {\n  fetchUserCategoryListSuccess,\n  fetchUserCategoryListFailure,\n  fetchContentCreatorListSuccess,\n  fetchContentCreatorListFailure\n} from \"../actions/UserCategoryAction\";\n\n\nfunction* fetchUserCategoryListAPI() {\n  try {\n    const response = yield api.postMethod(\"u_categories_list\");\n\n    if (response.data.success) {\n      yield put(fetchUserCategoryListSuccess(response.data));\n    } else {\n      yield put(fetchUserCategoryListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserCategoryListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchContentCreatorListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"content_creators_list\" , action.data);\n\n    if (response.data.success) {\n      yield put(fetchContentCreatorListSuccess(response.data));\n    } else {\n      yield put(fetchContentCreatorListFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchContentCreatorListFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_USER_CATEGORY_LIST_START, fetchUserCategoryListAPI)]);\n  yield all([yield takeLatest(FETCH_CONTENT_CREATOR_LIST_START, fetchContentCreatorListAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}