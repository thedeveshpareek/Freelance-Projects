{"ast":null,"code":"const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener('load', () => resolve(image));\n  image.addEventListener('error', error => reject(error));\n  image.setAttribute('crossOrigin', 'anonymous'); // needed to avoid cross-origin issues on CodeSandbox\n\n  image.src = url;\n});\n\nfunction getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\n/**\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\n\n\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0, fileType) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * (maxSize / 2 * Math.sqrt(2)); // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n\n  canvas.width = safeArea;\n  canvas.height = safeArea; // translate canvas context to a central location on image to allow rotating around the center.\n\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.rotate(getRadianAngle(rotation));\n  ctx.translate(-safeArea / 2, -safeArea / 2); // draw rotated image and store data.\n\n  ctx.drawImage(image, safeArea / 2 - image.width * 0.5, safeArea / 2 - image.height * 0.5);\n  const data = ctx.getImageData(0, 0, safeArea, safeArea); // set canvas width to final desired crop size - this will clear existing context\n\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height; // paste generated rotate image with correct offsets for x,y crop values.\n\n  ctx.putImageData(data, Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x), Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)); // As Base64 string\n\n  return canvas.toDataURL(fileType);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/components/Accounts/Profile/CropImageHelper.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","rotation","fileType","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","round","x","y","toDataURL"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,GAAG,IACrB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,gBAAN,CAAuB,MAAvB,EAA+B,MAAMJ,OAAO,CAACE,KAAD,CAA5C;AACAA,EAAAA,KAAK,CAACE,gBAAN,CAAuB,OAAvB,EAAgCC,KAAK,IAAIJ,MAAM,CAACI,KAAD,CAA/C;AACAH,EAAAA,KAAK,CAACI,YAAN,CAAmB,aAAnB,EAAkC,WAAlC,EAJ+B,CAIgB;;AAC/CJ,EAAAA,KAAK,CAACK,GAAN,GAAYT,GAAZ;AACD,CAND,CADF;;AASA,SAASU,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,SAAQA,WAAW,GAAGC,IAAI,CAACC,EAApB,GAA0B,GAAjC;AACD;AAED;AACA;AACA;AACA;AACA;;;AAEA,eAAe,eAAeC,aAAf,CAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,QAAQ,GAAG,CAA7D,EAAgEC,QAAhE,EAA0E;AACvF,QAAMd,KAAK,GAAG,MAAML,WAAW,CAACgB,QAAD,CAA/B;AACA,QAAMI,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,QAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AAEA,QAAMC,OAAO,GAAGZ,IAAI,CAACa,GAAL,CAASrB,KAAK,CAACsB,KAAf,EAAsBtB,KAAK,CAACuB,MAA5B,CAAhB;AACA,QAAMC,QAAQ,GAAG,KAAMJ,OAAO,GAAG,CAAX,GAAgBZ,IAAI,CAACiB,IAAL,CAAU,CAAV,CAArB,CAAjB,CANuF,CAQvF;AACA;;AACAV,EAAAA,MAAM,CAACO,KAAP,GAAeE,QAAf;AACAT,EAAAA,MAAM,CAACQ,MAAP,GAAgBC,QAAhB,CAXuF,CAavF;;AACAN,EAAAA,GAAG,CAACQ,SAAJ,CAAcF,QAAQ,GAAG,CAAzB,EAA4BA,QAAQ,GAAG,CAAvC;AACAN,EAAAA,GAAG,CAACS,MAAJ,CAAWrB,cAAc,CAACO,QAAD,CAAzB;AACAK,EAAAA,GAAG,CAACQ,SAAJ,CAAc,CAACF,QAAD,GAAY,CAA1B,EAA6B,CAACA,QAAD,GAAY,CAAzC,EAhBuF,CAkBvF;;AACAN,EAAAA,GAAG,CAACU,SAAJ,CACE5B,KADF,EAEEwB,QAAQ,GAAG,CAAX,GAAexB,KAAK,CAACsB,KAAN,GAAc,GAF/B,EAGEE,QAAQ,GAAG,CAAX,GAAexB,KAAK,CAACuB,MAAN,GAAe,GAHhC;AAKA,QAAMM,IAAI,GAAGX,GAAG,CAACY,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBN,QAAvB,EAAiCA,QAAjC,CAAb,CAxBuF,CA0BvF;;AACAT,EAAAA,MAAM,CAACO,KAAP,GAAeV,SAAS,CAACU,KAAzB;AACAP,EAAAA,MAAM,CAACQ,MAAP,GAAgBX,SAAS,CAACW,MAA1B,CA5BuF,CA8BvF;;AACAL,EAAAA,GAAG,CAACa,YAAJ,CACEF,IADF,EAEErB,IAAI,CAACwB,KAAL,CAAW,IAAIR,QAAQ,GAAG,CAAf,GAAmBxB,KAAK,CAACsB,KAAN,GAAc,GAAjC,GAAuCV,SAAS,CAACqB,CAA5D,CAFF,EAGEzB,IAAI,CAACwB,KAAL,CAAW,IAAIR,QAAQ,GAAG,CAAf,GAAmBxB,KAAK,CAACuB,MAAN,GAAe,GAAlC,GAAwCX,SAAS,CAACsB,CAA7D,CAHF,EA/BuF,CAqCvF;;AACA,SAAOnB,MAAM,CAACoB,SAAP,CAAiBrB,QAAjB,CAAP;AACD","sourcesContent":["const createImage = url =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener('load', () => resolve(image))\n    image.addEventListener('error', error => reject(error))\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url\n  })\n\nfunction getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\n\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0 ,fileType) {\n  const image = await createImage(imageSrc)\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n\n  const maxSize = Math.max(image.width, image.height)\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2))\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea\n  canvas.height = safeArea\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2)\n  ctx.rotate(getRadianAngle(rotation))\n  ctx.translate(-safeArea / 2, -safeArea / 2)\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5\n  )\n  const data = ctx.getImageData(0, 0, safeArea, safeArea)\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width\n  canvas.height = pixelCrop.height\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x),\n    Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)\n  )\n\n  // As Base64 string\n  return canvas.toDataURL(fileType);\n}"]},"metadata":{},"sourceType":"module"}