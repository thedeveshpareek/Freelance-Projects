{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { sendTipStripeFailure, sendTipStripeSuccess, sendTipWalletFailure, sendTipWalletSuccess, sendTipPaypalSuccess, sendTipPaypalFailure, sendTipCCBillSuccess, sendTipCCBillFailure, sendTipCoinPaymentSuccess, sendTipCoinPaymentFailure } from \"../actions/SendTipAction\";\nimport { SEND_TIP_BY_STRIPE_START, SEND_TIP_BY_WALLET_START, SEND_TIP_BY_PAYPAL_START, SEND_TIP_BY_CCBILL_START, SEND_TIP_BY_COINPAYMENT_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* sendTipStripeAPI() {\n  try {\n    const inputData = yield select(state => state.tip.tipStripe.inputData);\n    const response = yield api.postMethod(\"tips_payment_by_stripe\", inputData);\n\n    if (response.data.success) {\n      yield put(sendTipStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(sendTipStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendTipStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* sendTipPaypalAPI() {\n  try {\n    const inputData = yield select(state => state.tip.tipPaypal.inputData);\n    const response = yield api.postMethod(\"tips_payment_by_paypal\", inputData);\n\n    if (response.data.success) {\n      yield put(sendTipPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(sendTipPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendTipPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* sendTipWalletAPI() {\n  try {\n    const inputData = yield select(state => state.tip.tipWallet.inputData);\n    const response = yield api.postMethod(\"tips_payment_by_wallet\", inputData);\n\n    if (response.data.success) {\n      yield put(sendTipWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(sendTipWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendTipWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* sendTipCoinPaymentAPI() {\n  try {\n    const inputData = yield select(state => state.tip.tipCoinPayment.inputData);\n    const response = yield api.postMethod(\"tips_payment_by_coinpayment\", inputData);\n\n    if (response.data.success) {\n      yield put(sendTipCoinPaymentSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      setTimeout(() => {\n        window.location.assign(`${response.data.data.redirect_web_url}`);\n      }, 3000);\n    } else {\n      yield put(sendTipCoinPaymentFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendTipCoinPaymentFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* sendTipCCBillAPI() {\n  try {\n    const inputData = yield select(state => state.tip.tipCCBill.inputData);\n    const response = yield api.postMethod(\"tips_payment_by_ccbill\", inputData);\n\n    if (response.data.success) {\n      yield put(sendTipCCBillSuccess(response.data.data));\n      window.location.assign(`${response.data.data.redirect_web_url}`);\n    } else {\n      yield put(sendTipCCBillFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendTipCCBillFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(SEND_TIP_BY_STRIPE_START, sendTipStripeAPI)]);\n  yield all([yield takeLatest(SEND_TIP_BY_WALLET_START, sendTipWalletAPI)]);\n  yield all([yield takeLatest(SEND_TIP_BY_PAYPAL_START, sendTipPaypalAPI)]);\n  yield all([yield takeLatest(SEND_TIP_BY_CCBILL_START, sendTipCCBillAPI)]);\n  yield all([yield takeLatest(SEND_TIP_BY_COINPAYMENT_START, sendTipCoinPaymentAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/SendTipSaga.jsx"],"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","sendTipStripeFailure","sendTipStripeSuccess","sendTipWalletFailure","sendTipWalletSuccess","sendTipPaypalSuccess","sendTipPaypalFailure","sendTipCCBillSuccess","sendTipCCBillFailure","sendTipCoinPaymentSuccess","sendTipCoinPaymentFailure","SEND_TIP_BY_STRIPE_START","SEND_TIP_BY_WALLET_START","SEND_TIP_BY_PAYPAL_START","SEND_TIP_BY_CCBILL_START","SEND_TIP_BY_COINPAYMENT_START","checkLogoutStatus","sendTipStripeAPI","inputData","state","tip","tipStripe","response","postMethod","data","success","notificationMessage","message","error","sendTipPaypalAPI","tipPaypal","sendTipWalletAPI","tipWallet","sendTipCoinPaymentAPI","tipCoinPayment","setTimeout","window","location","assign","redirect_web_url","sendTipCCBillAPI","tipCCBill","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  sendTipStripeFailure,\n  sendTipStripeSuccess,\n  sendTipWalletFailure,\n  sendTipWalletSuccess,\n  sendTipPaypalSuccess,\n  sendTipPaypalFailure,\n  sendTipCCBillSuccess,\n  sendTipCCBillFailure,\n  sendTipCoinPaymentSuccess,\n  sendTipCoinPaymentFailure,\n} from \"../actions/SendTipAction\";\nimport {\n  SEND_TIP_BY_STRIPE_START,\n  SEND_TIP_BY_WALLET_START,\n  SEND_TIP_BY_PAYPAL_START,\n  SEND_TIP_BY_CCBILL_START,\n  SEND_TIP_BY_COINPAYMENT_START,\n} from \"../actions/ActionConstant\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* sendTipStripeAPI() {\n  try {\n    const inputData = yield select((state) => state.tip.tipStripe.inputData);\n    const response = yield api.postMethod(\"tips_payment_by_stripe\", inputData);\n    if (response.data.success) {\n      yield put(sendTipStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(sendTipStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendTipStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* sendTipPaypalAPI() {\n  try {\n    const inputData = yield select((state) => state.tip.tipPaypal.inputData);\n    const response = yield api.postMethod(\"tips_payment_by_paypal\", inputData);\n    if (response.data.success) {\n      yield put(sendTipPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(sendTipPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendTipPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* sendTipWalletAPI() {\n  try {\n    const inputData = yield select((state) => state.tip.tipWallet.inputData);\n    const response = yield api.postMethod(\"tips_payment_by_wallet\", inputData);\n    if (response.data.success) {\n      yield put(sendTipWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(sendTipWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendTipWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* sendTipCoinPaymentAPI() {\n  try {\n    const inputData = yield select((state) => state.tip.tipCoinPayment.inputData);\n    const response = yield api.postMethod(\"tips_payment_by_coinpayment\", inputData);\n    if (response.data.success) {\n      yield put(sendTipCoinPaymentSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      setTimeout(() => {\n        window.location.assign(`${response.data.data.redirect_web_url}`);\n      }, 3000);\n    } else {\n      yield put(sendTipCoinPaymentFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendTipCoinPaymentFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* sendTipCCBillAPI() {\n  try {\n    const inputData = yield select((state) => state.tip.tipCCBill.inputData);\n    const response = yield api.postMethod(\"tips_payment_by_ccbill\", inputData);\n    if (response.data.success) {\n      yield put(sendTipCCBillSuccess(response.data.data));\n      window.location.assign(`${response.data.data.redirect_web_url}`);\n    } else {\n      yield put(sendTipCCBillFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(sendTipCCBillFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(SEND_TIP_BY_STRIPE_START, sendTipStripeAPI)]);\n  yield all([yield takeLatest(SEND_TIP_BY_WALLET_START, sendTipWalletAPI)]);\n  yield all([yield takeLatest(SEND_TIP_BY_PAYPAL_START, sendTipPaypalAPI)]);\n  yield all([yield takeLatest(SEND_TIP_BY_CCBILL_START, sendTipCCBillAPI)]);\n  yield all([yield takeLatest(SEND_TIP_BY_COINPAYMENT_START, sendTipCoinPaymentAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}