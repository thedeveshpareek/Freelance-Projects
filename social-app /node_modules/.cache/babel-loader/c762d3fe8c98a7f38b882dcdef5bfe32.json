{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_HOME_POSTS_START, FETCH_LISTS_DETAILS_START, FETCH_OTHERS_SINGLE_POST_START, FETCH_POST_SUGGESTION_START, POST_PAYMENT_STRIPE_START, POST_PAYMENT_WALLET_START, SEARCH_USER_START, FETCH_TRENDING_USERS_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchHomePostsFailure, fetchHomePostsSuccess, fetchOtherSinglePostFailure, fetchOtherSinglePostSuccess, fetchPostSuggesstionFailure, fetchPostSuggesstionSuccess, searchUserFailure, searchUserSuccess, postPaymentStripeSuccess, postPaymentWalletSuccess, postPaymentStripeFailure, postPaymentWalletFailure, fetchListsDetailsSuccess, fetchListsDetailsFailure, fetchTrendingUsersFailure, fetchTrendingUsersSuccess } from \"../actions/HomeAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchHomePostAPI() {\n  try {\n    const skipCount = yield select(state => state.home.homePost.skip);\n    const response = yield api.postMethod(\"home\", {\n      skip: skipCount\n    });\n\n    if (response.data.success) {\n      yield put(fetchHomePostsSuccess(response.data.data));\n\n      if (response.data.data.user) {\n        localStorage.setItem(\"total_followers\", response.data.data.user.total_followers ? response.data.data.user.total_followers : 0);\n        localStorage.setItem(\"total_followings\", response.data.data.user.total_followings ? response.data.data.user.total_followings : 0);\n        localStorage.setItem(\"is_subscription_enabled\", response.data.data.user.is_subscription_enabled);\n        localStorage.setItem(\"user_picture\", response.data.data.user.picture);\n        localStorage.setItem(\"user_cover\", response.data.data.user.cover);\n        localStorage.setItem(\"name\", response.data.data.user.name);\n        localStorage.setItem(\"username\", response.data.data.user.username);\n        localStorage.setItem(\"user_unique_id\", response.data.data.user.user_unique_id);\n        localStorage.setItem(\"is_document_verified\", response.data.data.user.is_document_verified);\n      }\n    } else {\n      yield put(fetchHomePostsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchHomePostsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* searchUserAPI() {\n  try {\n    const inputData = yield select(state => state.home.searchUser.inputData);\n    const response = yield api.postMethod(\"users_search\", inputData);\n\n    if (response.data.success) {\n      yield put(searchUserSuccess(response.data.data));\n    } else {\n      yield put(searchUserFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(searchUserFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchOtherSinglePostAPI() {\n  try {\n    const inputData = yield select(state => state.post.singlePost.inputData);\n    const response = yield api.postMethod(\"posts_view\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchOtherSinglePostSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(fetchOtherSinglePostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchOtherSinglePostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchPostSuggesstionAPI() {\n  try {\n    const inputData = yield select(state => state.post.delPost.inputData);\n    const response = yield api.postMethod(\"user_suggestions\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchPostSuggesstionSuccess(response.data.data));\n    } else {\n      yield put(fetchPostSuggesstionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPostSuggesstionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchTrendingUsersAPI() {\n  try {\n    const inputData = yield select(state => state.home.trendingUsers.inputData);\n    const response = yield api.postMethod(\"trending_users\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchTrendingUsersSuccess(response.data.data));\n    } else {\n      yield put(fetchTrendingUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchTrendingUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* postPaymentStripeAPI() {\n  try {\n    const inputData = yield select(state => state.post.changePostStatus.inputData);\n    const response = yield api.postMethod(\"posts_status\", inputData);\n\n    if (response.data.success) {\n      yield put(postPaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(postPaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(postPaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* postPaymentWalletAPI() {\n  try {\n    const inputData = yield select(state => state.post.changePostStatus.inputData);\n    const response = yield api.postMethod(\"posts_status\", inputData);\n\n    if (response.data.success) {\n      yield put(postPaymentWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(postPaymentWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(postPaymentWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchListsAPI() {\n  try {\n    const response = yield api.postMethod(\"lists_index\");\n\n    if (response.data.success) {\n      yield put(fetchListsDetailsSuccess(response.data.data));\n    } else {\n      yield put(fetchListsDetailsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchListsDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_HOME_POSTS_START, fetchHomePostAPI)]);\n  yield all([yield takeLatest(SEARCH_USER_START, searchUserAPI)]);\n  yield all([yield takeLatest(FETCH_OTHERS_SINGLE_POST_START, fetchOtherSinglePostAPI)]);\n  yield all([yield takeLatest(FETCH_POST_SUGGESTION_START, fetchPostSuggesstionAPI)]);\n  yield all([yield takeLatest(POST_PAYMENT_STRIPE_START, postPaymentStripeAPI)]);\n  yield all([yield takeLatest(POST_PAYMENT_WALLET_START, postPaymentWalletAPI)]);\n  yield all([yield takeLatest(FETCH_LISTS_DETAILS_START, fetchListsAPI)]);\n  yield all([yield takeLatest(FETCH_TRENDING_USERS_START, fetchTrendingUsersAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/HomeSaga.jsx"],"names":["call","select","put","takeLatest","all","api","FETCH_HOME_POSTS_START","FETCH_LISTS_DETAILS_START","FETCH_OTHERS_SINGLE_POST_START","FETCH_POST_SUGGESTION_START","POST_PAYMENT_STRIPE_START","POST_PAYMENT_WALLET_START","SEARCH_USER_START","FETCH_TRENDING_USERS_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchHomePostsFailure","fetchHomePostsSuccess","fetchOtherSinglePostFailure","fetchOtherSinglePostSuccess","fetchPostSuggesstionFailure","fetchPostSuggesstionSuccess","searchUserFailure","searchUserSuccess","postPaymentStripeSuccess","postPaymentWalletSuccess","postPaymentStripeFailure","postPaymentWalletFailure","fetchListsDetailsSuccess","fetchListsDetailsFailure","fetchTrendingUsersFailure","fetchTrendingUsersSuccess","checkLogoutStatus","fetchHomePostAPI","skipCount","state","home","homePost","skip","response","postMethod","data","success","user","localStorage","setItem","total_followers","total_followings","is_subscription_enabled","picture","cover","name","username","user_unique_id","is_document_verified","error","notificationMessage","message","searchUserAPI","inputData","searchUser","fetchOtherSinglePostAPI","post","singlePost","fetchPostSuggesstionAPI","delPost","fetchTrendingUsersAPI","trendingUsers","postPaymentStripeAPI","changePostStatus","postPaymentWalletAPI","fetchListsAPI","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  FETCH_HOME_POSTS_START,\n  FETCH_LISTS_DETAILS_START,\n  FETCH_OTHERS_SINGLE_POST_START,\n  FETCH_POST_SUGGESTION_START,\n  POST_PAYMENT_STRIPE_START,\n  POST_PAYMENT_WALLET_START,\n  SEARCH_USER_START,\n  FETCH_TRENDING_USERS_START,\n} from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\nimport {\n  fetchHomePostsFailure,\n  fetchHomePostsSuccess,\n  fetchOtherSinglePostFailure,\n  fetchOtherSinglePostSuccess,\n  fetchPostSuggesstionFailure,\n  fetchPostSuggesstionSuccess,\n  searchUserFailure,\n  searchUserSuccess,\n  postPaymentStripeSuccess,\n  postPaymentWalletSuccess,\n  postPaymentStripeFailure,\n  postPaymentWalletFailure,\n  fetchListsDetailsSuccess,\n  fetchListsDetailsFailure,\n  fetchTrendingUsersFailure,\n  fetchTrendingUsersSuccess,\n} from \"../actions/HomeAction\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\n\nfunction* fetchHomePostAPI() {\n  try {\n\n   \n\n    const skipCount = yield select((state) => state.home.homePost.skip);\n    const response = yield api.postMethod(\"home\", { skip: skipCount });\n\n    if (response.data.success) {\n      yield put(fetchHomePostsSuccess(response.data.data));\n      if (response.data.data.user) {\n        localStorage.setItem(\n          \"total_followers\",\n          response.data.data.user.total_followers\n            ? response.data.data.user.total_followers\n            : 0\n        );\n        localStorage.setItem(\n          \"total_followings\",\n          response.data.data.user.total_followings\n            ? response.data.data.user.total_followings\n            : 0\n        );\n        localStorage.setItem(\n          \"is_subscription_enabled\",\n          response.data.data.user.is_subscription_enabled\n        );\n        localStorage.setItem(\"user_picture\", response.data.data.user.picture);\n        localStorage.setItem(\"user_cover\", response.data.data.user.cover);\n        localStorage.setItem(\"name\", response.data.data.user.name);\n        localStorage.setItem(\"username\", response.data.data.user.username);\n        localStorage.setItem(\n          \"user_unique_id\",\n          response.data.data.user.user_unique_id\n        );\n        localStorage.setItem(\n          \"is_document_verified\",\n          response.data.data.user.is_document_verified\n        );\n      }\n    } else {\n      yield put(fetchHomePostsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchHomePostsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* searchUserAPI() {\n  try {\n    const inputData = yield select((state) => state.home.searchUser.inputData);\n    const response = yield api.postMethod(\"users_search\", inputData);\n    if (response.data.success) {\n      yield put(searchUserSuccess(response.data.data));\n    } else {\n      yield put(searchUserFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(searchUserFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchOtherSinglePostAPI() {\n  try {\n    const inputData = yield select((state) => state.post.singlePost.inputData);\n    const response = yield api.postMethod(\"posts_view\", inputData);\n    if (response.data.success) {\n      yield put(fetchOtherSinglePostSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(fetchOtherSinglePostFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchOtherSinglePostFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchPostSuggesstionAPI() {\n  try {\n    const inputData = yield select((state) => state.post.delPost.inputData);\n    const response = yield api.postMethod(\"user_suggestions\", inputData);\n    if (response.data.success) {\n      yield put(fetchPostSuggesstionSuccess(response.data.data));\n    } else {\n      yield put(fetchPostSuggesstionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPostSuggesstionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchTrendingUsersAPI() {\n  try {\n    const inputData = yield select((state) => state.home.trendingUsers.inputData);\n    const response = yield api.postMethod(\"trending_users\", inputData);\n    if (response.data.success) {\n      yield put(fetchTrendingUsersSuccess(response.data.data));\n    } else {\n      yield put(fetchTrendingUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchTrendingUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* postPaymentStripeAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.changePostStatus.inputData\n    );\n    const response = yield api.postMethod(\"posts_status\", inputData);\n    if (response.data.success) {\n      yield put(postPaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(postPaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(postPaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* postPaymentWalletAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.post.changePostStatus.inputData\n    );\n    const response = yield api.postMethod(\"posts_status\", inputData);\n    if (response.data.success) {\n      yield put(postPaymentWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(postPaymentWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(postPaymentWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchListsAPI() {\n  try {\n    const response = yield api.postMethod(\"lists_index\");\n    if (response.data.success) {\n      yield put(fetchListsDetailsSuccess(response.data.data));\n    } else {\n      yield put(fetchListsDetailsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchListsDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_HOME_POSTS_START, fetchHomePostAPI)]);\n  yield all([yield takeLatest(SEARCH_USER_START, searchUserAPI)]);\n  yield all([\n    yield takeLatest(FETCH_OTHERS_SINGLE_POST_START, fetchOtherSinglePostAPI),\n  ]);\n  yield all([\n    yield takeLatest(FETCH_POST_SUGGESTION_START, fetchPostSuggesstionAPI),\n  ]);\n  yield all([\n    yield takeLatest(POST_PAYMENT_STRIPE_START, postPaymentStripeAPI),\n  ]);\n  yield all([\n    yield takeLatest(POST_PAYMENT_WALLET_START, postPaymentWalletAPI),\n  ]);\n  yield all([yield takeLatest(FETCH_LISTS_DETAILS_START, fetchListsAPI)]);\n  yield all([\n    yield takeLatest(FETCH_TRENDING_USERS_START, fetchTrendingUsersAPI),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}