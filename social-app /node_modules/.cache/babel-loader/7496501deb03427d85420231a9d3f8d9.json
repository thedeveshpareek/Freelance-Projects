{"ast":null,"code":"var _jsxFileName = \"/Users/devsmac/Downloads/fx-frontend/src/components/helper/VideoCallPaymentModal.jsx\";\nimport React, { useState } from \"react\";\nimport { Form, Button, Image, Modal } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport PaypalExpressBtn from \"react-paypal-express-checkout\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport configuration from \"react-global-configuration\";\nimport { translate, t } from \"react-multi-lang\";\nimport { videoCallRequestsPaymentPaypalStart, videoCallRequestsPaymentStripeStart } from \"../../store/actions/VideoCallAction\";\n\nconst VideoCallPaymentModal = props => {\n  const [amount, setAmount] = useState(0);\n  const [paymentType, setPaymentType] = useState(\"card\");\n  const [showPayPal, payPal] = useState(false);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (paymentType === \"paypal\") showPayPal(true);\n    if (paymentType === \"card\") props.dispatch(videoCallRequestsPaymentStripeStart({\n      video_call_request_id: props.video_call_request_id != undefined || props.video_call_request_id != null ? props.video_call_request_id : \"\",\n      amount: amount\n    })); // if (paymentType === \"wallet\")\n    //   props.dispatch(\n    //     VideoCallPaymentWalletStart({\n    //       post_id:\n    //         props.post_id != undefined || props.post_id != null\n    //           ? props.post_id\n    //           : \"\",\n    //       amount: props.amount,\n    //       user_id: props.user_id,\n    //     })\n    //   );\n\n    if (paymentType === \"paypal\") props.closeVideoCallPaymentModal();\n  };\n\n  const paypalOnSuccess = payment => {\n    console.log(payment);\n    setTimeout(() => {\n      props.dispatch(videoCallRequestsPaymentPaypalStart({\n        payment_id: payment.paymentID,\n        video_call_request_id: props.video_call_request_id != undefined || props.video_call_request_id != null ? props.video_call_request_id : \"\",\n        amount: props.amount\n      }));\n    }, 1000);\n  };\n\n  const paypalOnError = err => {\n    const notificationMessage = getErrorNotificationMessage(err);\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  const paypalOnCancel = data => {\n    const notificationMessage = getErrorNotificationMessage(\"Payment cancelled please try again..\");\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  const choosePaymentOption = event => {\n    console.log(amount);\n    setPaymentType(event);\n  };\n\n  let env = configuration.get(\"configData.PAYPAL_MODE\"); // you can set here to 'production' for production\n\n  let currency = \"USD\"; // or you can set this value from your props or state\n\n  const client = {\n    sandbox: configuration.get(\"configData.PAYPAL_ID\"),\n    production: configuration.get(\"configData.PAYPAL_ID\")\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    className: \"modal-dialog-center sent-tip-modal\",\n    size: \"md\",\n    centered: true,\n    show: props.VideoCallPayment,\n    onHide: props.closeVideoCallPaymentModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, props.VideoCallPayment === true ? /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, t(\"pay_and_see_the_Post\"))), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"floating-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, t(\"pay_amount\"), \":\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  }, props.post.amount_formatted)), /*#__PURE__*/React.createElement(Form, {\n    className: \"mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-muted f-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 19\n    }\n  }, t(\"choose_payment_mode\")), [\"radio\"].map(type => /*#__PURE__*/React.createElement(\"div\", {\n    key: `custom-inline-${type}`,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    custom: true,\n    inline: true,\n    label: \"Card\",\n    type: type // id={`custom-inline-${type}-2`}\n    ,\n    id: \"card\",\n    value: \"card\",\n    name: \"payment_type\",\n    defaultChecked: true,\n    onChange: event => {\n      choosePaymentOption(event.currentTarget.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 23\n    }\n  }), configuration.get(\"configData.is_paypal_enabled\") == 1 ? /*#__PURE__*/React.createElement(Form.Check, {\n    custom: true,\n    inline: true,\n    label: \"Paypal\",\n    type: type,\n    id: \"paypal\",\n    value: \"paypal\",\n    name: \"payment_type\",\n    onChange: event => {\n      choosePaymentOption(event.currentTarget.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }) : \"\"))))), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, paymentType === \"paypal\" && props.amount != 0 ? /*#__PURE__*/React.createElement(PaypalExpressBtn, {\n    env: env,\n    client: client,\n    currency: currency,\n    total: props.amount,\n    onError: paypalOnError,\n    onSuccess: paypalOnSuccess,\n    onCancel: paypalOnCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }) : null, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    className: \"btn btn-danger\",\n    \"data-dismiss\": \"modal\",\n    onClick: props.closeVideoCallPaymentModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }, t(\"cancel\")), paymentType !== \"paypal\" ? /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    className: \"btn btn-success\",\n    \"data-dismiss\": \"modal\",\n    onClick: handleSubmit,\n    disabled: props.videoCallRequestPayStripe.buttonDisable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, props.videoCallRequestPayStripe.loadingButtonContent !== null ? props.videoCallRequestPayStripe.loadingButtonContent : t(\"confirm\")) : \"\")) : null));\n};\n\nconst mapStateToPros = state => ({\n  videoCallRequestPayStripe: state.videocall.videoCallRequestPayStripe\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch\n  };\n}\n\nexport default connect(mapStateToPros, mapDispatchToProps)(translate(VideoCallPaymentModal));","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/components/helper/VideoCallPaymentModal.jsx"],"names":["React","useState","Form","Button","Image","Modal","connect","PaypalExpressBtn","createNotification","getErrorNotificationMessage","configuration","translate","t","videoCallRequestsPaymentPaypalStart","videoCallRequestsPaymentStripeStart","VideoCallPaymentModal","props","amount","setAmount","paymentType","setPaymentType","showPayPal","payPal","handleSubmit","event","preventDefault","dispatch","video_call_request_id","undefined","closeVideoCallPaymentModal","paypalOnSuccess","payment","console","log","setTimeout","payment_id","paymentID","paypalOnError","err","notificationMessage","paypalOnCancel","data","choosePaymentOption","env","get","currency","client","sandbox","production","VideoCallPayment","post","amount_formatted","map","type","currentTarget","value","videoCallRequestPayStripe","buttonDisable","loadingButtonContent","mapStateToPros","state","videocall","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button, Image, Modal } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport PaypalExpressBtn from \"react-paypal-express-checkout\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport configuration from \"react-global-configuration\";\nimport { translate, t } from \"react-multi-lang\";\nimport {\n  videoCallRequestsPaymentPaypalStart,\n  videoCallRequestsPaymentStripeStart,\n} from \"../../store/actions/VideoCallAction\";\n\nconst VideoCallPaymentModal = (props) => {\n  const [amount, setAmount] = useState(0);\n  const [paymentType, setPaymentType] = useState(\"card\");\n  const [showPayPal, payPal] = useState(false);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (paymentType === \"paypal\") showPayPal(true);\n\n    if (paymentType === \"card\")\n      props.dispatch(\n        videoCallRequestsPaymentStripeStart({\n          video_call_request_id:\n            props.video_call_request_id != undefined ||\n            props.video_call_request_id != null\n              ? props.video_call_request_id\n              : \"\",\n          amount: amount,\n        })\n      );\n    // if (paymentType === \"wallet\")\n    //   props.dispatch(\n    //     VideoCallPaymentWalletStart({\n    //       post_id:\n    //         props.post_id != undefined || props.post_id != null\n    //           ? props.post_id\n    //           : \"\",\n    //       amount: props.amount,\n    //       user_id: props.user_id,\n    //     })\n    //   );\n    if (paymentType === \"paypal\") props.closeVideoCallPaymentModal();\n  };\n\n  const paypalOnSuccess = (payment) => {\n    console.log(payment);\n    setTimeout(() => {\n      props.dispatch(\n        videoCallRequestsPaymentPaypalStart({\n          payment_id: payment.paymentID,\n          video_call_request_id:\n            props.video_call_request_id != undefined ||\n            props.video_call_request_id != null\n              ? props.video_call_request_id\n              : \"\",\n          amount: props.amount,\n        })\n      );\n    }, 1000);\n  };\n\n  const paypalOnError = (err) => {\n    const notificationMessage = getErrorNotificationMessage(err);\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  const paypalOnCancel = (data) => {\n    const notificationMessage = getErrorNotificationMessage(\n      \"Payment cancelled please try again..\"\n    );\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  const choosePaymentOption = (event) => {\n    console.log(amount);\n    setPaymentType(event);\n  };\n\n  let env = configuration.get(\"configData.PAYPAL_MODE\"); // you can set here to 'production' for production\n  let currency = \"USD\"; // or you can set this value from your props or state\n\n  const client = {\n    sandbox: configuration.get(\"configData.PAYPAL_ID\"),\n    production: configuration.get(\"configData.PAYPAL_ID\"),\n  };\n\n  return (\n    <>\n      <Modal\n        className=\"modal-dialog-center sent-tip-modal\"\n        size=\"md\"\n        centered\n        show={props.VideoCallPayment}\n        onHide={props.closeVideoCallPaymentModal}\n      >\n        {props.VideoCallPayment === true ? (\n          <Form onSubmit={handleSubmit}>\n            <Modal.Header closeButton>\n              <Modal.Title>{t(\"pay_and_see_the_Post\")}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <div className=\"floating-form\">\n                <h4>\n                  {t(\"pay_amount\")}:{\" \"}\n                  <span className=\"text-info\">\n                    {props.post.amount_formatted}\n                  </span>\n                </h4>\n\n                <Form className=\"mt-4\">\n                  <label className=\"text-muted f-12\">\n                    {t(\"choose_payment_mode\")}\n                  </label>\n                  {[\"radio\"].map((type) => (\n                    <div key={`custom-inline-${type}`} className=\"mb-3\">\n                      <Form.Check\n                        custom\n                        inline\n                        label=\"Card\"\n                        type={type}\n                        // id={`custom-inline-${type}-2`}\n                        id=\"card\"\n                        value=\"card\"\n                        name=\"payment_type\"\n                        defaultChecked={true}\n                        onChange={(event) => {\n                          choosePaymentOption(event.currentTarget.value);\n                        }}\n                      />\n                      {configuration.get(\"configData.is_paypal_enabled\") ==\n                      1 ? (\n                        <Form.Check\n                          custom\n                          inline\n                          label=\"Paypal\"\n                          type={type}\n                          id=\"paypal\"\n                          value=\"paypal\"\n                          name=\"payment_type\"\n                          onChange={(event) => {\n                            choosePaymentOption(event.currentTarget.value);\n                          }}\n                        />\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  ))}\n                </Form>\n              </div>\n            </Modal.Body>\n            <Modal.Footer>\n              {paymentType === \"paypal\" && props.amount != 0 ? (\n                <PaypalExpressBtn\n                  env={env}\n                  client={client}\n                  currency={currency}\n                  total={props.amount}\n                  onError={paypalOnError}\n                  onSuccess={paypalOnSuccess}\n                  onCancel={paypalOnCancel}\n                />\n              ) : null}\n              <Button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                data-dismiss=\"modal\"\n                onClick={props.closeVideoCallPaymentModal}\n              >\n                {t(\"cancel\")}\n              </Button>\n              {paymentType !== \"paypal\" ? (\n                <Button\n                  type=\"button\"\n                  className=\"btn btn-success\"\n                  data-dismiss=\"modal\"\n                  onClick={handleSubmit}\n                  disabled={props.videoCallRequestPayStripe.buttonDisable}\n                >\n                  {props.videoCallRequestPayStripe.loadingButtonContent !== null\n                    ? props.videoCallRequestPayStripe.loadingButtonContent\n                    : t(\"confirm\")}\n                </Button>\n              ) : (\n                \"\"\n              )}\n            </Modal.Footer>\n          </Form>\n        ) : null}\n      </Modal>\n    </>\n  );\n};\n\nconst mapStateToPros = (state) => ({\n  videoCallRequestPayStripe: state.videocall.videoCallRequestPayStripe,\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return { dispatch };\n}\n\nexport default connect(\n  mapStateToPros,\n  mapDispatchToProps\n)(translate(VideoCallPaymentModal));\n"]},"metadata":{},"sourceType":"module"}