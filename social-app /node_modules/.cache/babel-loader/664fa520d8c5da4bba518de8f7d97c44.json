{"ast":null,"code":"import _slicedToArray from\"/home/codegama/bhawya/source_code/fx-frontend-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _this=this;import React,{useState}from\"react\";import{Form,Button,Image,Modal}from\"react-bootstrap\";import{connect}from\"react-redux\";import PaypalExpressBtn from\"react-paypal-express-checkout\";import{createNotification}from\"react-redux-notify\";import{getErrorNotificationMessage}from\"../../components/helper/NotificationMessage\";import configuration from\"react-global-configuration\";import{translate,t}from\"react-multi-lang\";import{videoCallRequestsPaymentPaypalStart,videoCallRequestsPaymentStripeStart}from\"../../store/actions/VideoCallAction\";var VideoCallPaymentModal=function VideoCallPaymentModal(props){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),amount=_useState2[0],setAmount=_useState2[1];var _useState3=useState(\"card\"),_useState4=_slicedToArray(_useState3,2),paymentType=_useState4[0],setPaymentType=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),showPayPal=_useState6[0],payPal=_useState6[1];var handleSubmit=function handleSubmit(event){event.preventDefault();if(paymentType===\"paypal\")showPayPal(true);if(paymentType===\"card\")props.dispatch(videoCallRequestsPaymentStripeStart({video_call_request_id:props.video_call_request_id!=undefined||props.video_call_request_id!=null?props.video_call_request_id:\"\",amount:amount}));// if (paymentType === \"wallet\")\n//   props.dispatch(\n//     VideoCallPaymentWalletStart({\n//       post_id:\n//         props.post_id != undefined || props.post_id != null\n//           ? props.post_id\n//           : \"\",\n//       amount: props.amount,\n//       user_id: props.user_id,\n//     })\n//   );\nif(paymentType===\"paypal\")props.closeVideoCallPaymentModal();};var paypalOnSuccess=function paypalOnSuccess(payment){console.log(payment);setTimeout(function(){props.dispatch(videoCallRequestsPaymentPaypalStart({payment_id:payment.paymentID,video_call_request_id:props.video_call_request_id!=undefined||props.video_call_request_id!=null?props.video_call_request_id:\"\",amount:props.amount}));},1000);};var paypalOnError=function paypalOnError(err){var notificationMessage=getErrorNotificationMessage(err);_this.props.dispatch(createNotification(notificationMessage));};var paypalOnCancel=function paypalOnCancel(data){var notificationMessage=getErrorNotificationMessage(\"Payment cancelled please try again..\");_this.props.dispatch(createNotification(notificationMessage));};var choosePaymentOption=function choosePaymentOption(event){console.log(amount);setPaymentType(event);};var env=configuration.get(\"configData.PAYPAL_MODE\");// you can set here to 'production' for production\nvar currency=\"USD\";// or you can set this value from your props or state\nvar client={sandbox:configuration.get(\"configData.PAYPAL_ID\"),production:configuration.get(\"configData.PAYPAL_ID\")};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Modal,{className:\"modal-dialog-center sent-tip-modal\",size:\"md\",centered:true,show:props.VideoCallPayment,onHide:props.closeVideoCallPaymentModal},props.VideoCallPayment===true?/*#__PURE__*/React.createElement(Form,{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(Modal.Header,{closeButton:true},/*#__PURE__*/React.createElement(Modal.Title,null,t(\"pay_and_see_the_Post\"))),/*#__PURE__*/React.createElement(Modal.Body,null,/*#__PURE__*/React.createElement(\"div\",{className:\"floating-form\"},/*#__PURE__*/React.createElement(\"h4\",null,t(\"pay_amount\"),\":\",\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"text-info\"},props.post.amount_formatted)),/*#__PURE__*/React.createElement(Form,{className:\"mt-4\"},/*#__PURE__*/React.createElement(\"label\",{className:\"text-muted f-12\"},t(\"choose_payment_mode\")),[\"radio\"].map(function(type){return/*#__PURE__*/React.createElement(\"div\",{key:\"custom-inline-\".concat(type),className:\"mb-3\"},/*#__PURE__*/React.createElement(Form.Check,{custom:true,inline:true,label:\"Card\",type:type// id={`custom-inline-${type}-2`}\n,id:\"card\",value:\"card\",name:\"payment_type\",defaultChecked:true,onChange:function onChange(event){choosePaymentOption(event.currentTarget.value);}}),configuration.get(\"configData.is_paypal_enabled\")==1?/*#__PURE__*/React.createElement(Form.Check,{custom:true,inline:true,label:\"Paypal\",type:type,id:\"paypal\",value:\"paypal\",name:\"payment_type\",onChange:function onChange(event){choosePaymentOption(event.currentTarget.value);}}):\"\");})))),/*#__PURE__*/React.createElement(Modal.Footer,null,paymentType===\"paypal\"&&props.amount!=0?/*#__PURE__*/React.createElement(PaypalExpressBtn,{env:env,client:client,currency:currency,total:props.amount,onError:paypalOnError,onSuccess:paypalOnSuccess,onCancel:paypalOnCancel}):null,/*#__PURE__*/React.createElement(Button,{type:\"button\",className:\"btn btn-danger\",\"data-dismiss\":\"modal\",onClick:props.closeVideoCallPaymentModal},t(\"cancel\")),paymentType!==\"paypal\"?/*#__PURE__*/React.createElement(Button,{type:\"button\",className:\"btn btn-success\",\"data-dismiss\":\"modal\",onClick:handleSubmit,disabled:props.videoCallRequestPayStripe.buttonDisable},props.videoCallRequestPayStripe.loadingButtonContent!==null?props.videoCallRequestPayStripe.loadingButtonContent:t(\"confirm\")):\"\")):null));};var mapStateToPros=function mapStateToPros(state){return{videoCallRequestPayStripe:state.videocall.videoCallRequestPayStripe};};function mapDispatchToProps(dispatch){return{dispatch:dispatch};}export default connect(mapStateToPros,mapDispatchToProps)(translate(VideoCallPaymentModal));","map":{"version":3,"sources":["/home/codegama/bhawya/source_code/fx-frontend-base/src/components/helper/VideoCallPaymentModal.jsx"],"names":["React","useState","Form","Button","Image","Modal","connect","PaypalExpressBtn","createNotification","getErrorNotificationMessage","configuration","translate","t","videoCallRequestsPaymentPaypalStart","videoCallRequestsPaymentStripeStart","VideoCallPaymentModal","props","amount","setAmount","paymentType","setPaymentType","showPayPal","payPal","handleSubmit","event","preventDefault","dispatch","video_call_request_id","undefined","closeVideoCallPaymentModal","paypalOnSuccess","payment","console","log","setTimeout","payment_id","paymentID","paypalOnError","err","notificationMessage","paypalOnCancel","data","choosePaymentOption","env","get","currency","client","sandbox","production","VideoCallPayment","post","amount_formatted","map","type","currentTarget","value","videoCallRequestPayStripe","buttonDisable","loadingButtonContent","mapStateToPros","state","videocall","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button, Image, Modal } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport PaypalExpressBtn from \"react-paypal-express-checkout\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport configuration from \"react-global-configuration\";\nimport { translate, t } from \"react-multi-lang\";\nimport {\n  videoCallRequestsPaymentPaypalStart,\n  videoCallRequestsPaymentStripeStart,\n} from \"../../store/actions/VideoCallAction\";\n\nconst VideoCallPaymentModal = (props) => {\n  const [amount, setAmount] = useState(0);\n  const [paymentType, setPaymentType] = useState(\"card\");\n  const [showPayPal, payPal] = useState(false);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (paymentType === \"paypal\") showPayPal(true);\n\n    if (paymentType === \"card\")\n      props.dispatch(\n        videoCallRequestsPaymentStripeStart({\n          video_call_request_id:\n            props.video_call_request_id != undefined ||\n            props.video_call_request_id != null\n              ? props.video_call_request_id\n              : \"\",\n          amount: amount,\n        })\n      );\n    // if (paymentType === \"wallet\")\n    //   props.dispatch(\n    //     VideoCallPaymentWalletStart({\n    //       post_id:\n    //         props.post_id != undefined || props.post_id != null\n    //           ? props.post_id\n    //           : \"\",\n    //       amount: props.amount,\n    //       user_id: props.user_id,\n    //     })\n    //   );\n    if (paymentType === \"paypal\") props.closeVideoCallPaymentModal();\n  };\n\n  const paypalOnSuccess = (payment) => {\n    console.log(payment);\n    setTimeout(() => {\n      props.dispatch(\n        videoCallRequestsPaymentPaypalStart({\n          payment_id: payment.paymentID,\n          video_call_request_id:\n            props.video_call_request_id != undefined ||\n            props.video_call_request_id != null\n              ? props.video_call_request_id\n              : \"\",\n          amount: props.amount,\n        })\n      );\n    }, 1000);\n  };\n\n  const paypalOnError = (err) => {\n    const notificationMessage = getErrorNotificationMessage(err);\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  const paypalOnCancel = (data) => {\n    const notificationMessage = getErrorNotificationMessage(\n      \"Payment cancelled please try again..\"\n    );\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  const choosePaymentOption = (event) => {\n    console.log(amount);\n    setPaymentType(event);\n  };\n\n  let env = configuration.get(\"configData.PAYPAL_MODE\"); // you can set here to 'production' for production\n  let currency = \"USD\"; // or you can set this value from your props or state\n\n  const client = {\n    sandbox: configuration.get(\"configData.PAYPAL_ID\"),\n    production: configuration.get(\"configData.PAYPAL_ID\"),\n  };\n\n  return (\n    <>\n      <Modal\n        className=\"modal-dialog-center sent-tip-modal\"\n        size=\"md\"\n        centered\n        show={props.VideoCallPayment}\n        onHide={props.closeVideoCallPaymentModal}\n      >\n        {props.VideoCallPayment === true ? (\n          <Form onSubmit={handleSubmit}>\n            <Modal.Header closeButton>\n              <Modal.Title>{t(\"pay_and_see_the_Post\")}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <div className=\"floating-form\">\n                <h4>\n                  {t(\"pay_amount\")}:{\" \"}\n                  <span className=\"text-info\">\n                    {props.post.amount_formatted}\n                  </span>\n                </h4>\n\n                <Form className=\"mt-4\">\n                  <label className=\"text-muted f-12\">\n                    {t(\"choose_payment_mode\")}\n                  </label>\n                  {[\"radio\"].map((type) => (\n                    <div key={`custom-inline-${type}`} className=\"mb-3\">\n                      <Form.Check\n                        custom\n                        inline\n                        label=\"Card\"\n                        type={type}\n                        // id={`custom-inline-${type}-2`}\n                        id=\"card\"\n                        value=\"card\"\n                        name=\"payment_type\"\n                        defaultChecked={true}\n                        onChange={(event) => {\n                          choosePaymentOption(event.currentTarget.value);\n                        }}\n                      />\n                      {configuration.get(\"configData.is_paypal_enabled\") ==\n                      1 ? (\n                        <Form.Check\n                          custom\n                          inline\n                          label=\"Paypal\"\n                          type={type}\n                          id=\"paypal\"\n                          value=\"paypal\"\n                          name=\"payment_type\"\n                          onChange={(event) => {\n                            choosePaymentOption(event.currentTarget.value);\n                          }}\n                        />\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  ))}\n                </Form>\n              </div>\n            </Modal.Body>\n            <Modal.Footer>\n              {paymentType === \"paypal\" && props.amount != 0 ? (\n                <PaypalExpressBtn\n                  env={env}\n                  client={client}\n                  currency={currency}\n                  total={props.amount}\n                  onError={paypalOnError}\n                  onSuccess={paypalOnSuccess}\n                  onCancel={paypalOnCancel}\n                />\n              ) : null}\n              <Button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                data-dismiss=\"modal\"\n                onClick={props.closeVideoCallPaymentModal}\n              >\n                {t(\"cancel\")}\n              </Button>\n              {paymentType !== \"paypal\" ? (\n                <Button\n                  type=\"button\"\n                  className=\"btn btn-success\"\n                  data-dismiss=\"modal\"\n                  onClick={handleSubmit}\n                  disabled={props.videoCallRequestPayStripe.buttonDisable}\n                >\n                  {props.videoCallRequestPayStripe.loadingButtonContent !== null\n                    ? props.videoCallRequestPayStripe.loadingButtonContent\n                    : t(\"confirm\")}\n                </Button>\n              ) : (\n                \"\"\n              )}\n            </Modal.Footer>\n          </Form>\n        ) : null}\n      </Modal>\n    </>\n  );\n};\n\nconst mapStateToPros = (state) => ({\n  videoCallRequestPayStripe: state.videocall.videoCallRequestPayStripe,\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return { dispatch };\n}\n\nexport default connect(\n  mapStateToPros,\n  mapDispatchToProps\n)(translate(VideoCallPaymentModal));\n"]},"metadata":{},"sourceType":"module"}