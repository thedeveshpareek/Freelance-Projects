{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_SINGLE_PAGE_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchSinglePageSuccess, fetchSinglePageFailure } from \"../actions/PageAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchSinglePage() {\n  try {\n    const inputData = yield select(state => state.page.pageData.inputData);\n    const response = yield api.postMethod(\"static_pages\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchSinglePageSuccess(response.data.data));\n    } else {\n      yield put(fetchSinglePageFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSinglePageFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_SINGLE_PAGE_START, fetchSinglePage)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/PageSaga.jsx"],"names":["call","select","put","takeLatest","all","api","FETCH_SINGLE_PAGE_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchSinglePageSuccess","fetchSinglePageFailure","checkLogoutStatus","fetchSinglePage","inputData","state","page","pageData","response","postMethod","data","success","error","notificationMessage","message","pageSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,UAA5B,EAAwCC,GAAxC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SACEC,6BADF,EAEEC,2BAFF,QAGO,6CAHP;AAIA,SACEC,sBADF,EAEEC,sBAFF,QAGO,uBAHP;AAKA,SACEC,iBADF,QAEO,wBAFP;;AAIA,UAAUC,eAAV,GAA4B;AAC1B,MAAI;AACF,UAAMC,SAAS,GAAG,MAAMb,MAAM,CAAEc,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,QAAX,CAAoBH,SAAhC,CAA9B;AACA,UAAMI,QAAQ,GAAG,MAAMb,GAAG,CAACc,UAAJ,CAAe,cAAf,EAA+BL,SAA/B,CAAvB;;AACA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMnB,GAAG,CAACQ,sBAAsB,CAACQ,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAvB,CAAT;AACD,KAFD,MAEO;AACL,YAAMlB,GAAG,CAACS,sBAAsB,CAACO,QAAQ,CAACE,IAAT,CAAcE,KAAf,CAAvB,CAAT;AACA,YAAMC,mBAAmB,GAAGd,2BAA2B,CACrDS,QAAQ,CAACE,IAAT,CAAcE,KADuC,CAAvD;AAGA,YAAMpB,GAAG,CAACU,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAMlB,GAAG,CAACK,kBAAkB,CAACgB,mBAAD,CAAnB,CAAT;AACD;AACF,GAbD,CAaE,OAAOD,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACS,sBAAsB,CAACW,KAAD,CAAvB,CAAT;AACA,UAAMC,mBAAmB,GAAGd,2BAA2B,CAACa,KAAK,CAACE,OAAP,CAAvD;AACA,UAAMtB,GAAG,CAACK,kBAAkB,CAACgB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAMrB,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACG,uBAAD,EAA0BO,eAA1B,CAAjB,CAAD,CAAT;AACD","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_SINGLE_PAGE_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchSinglePageSuccess,\n  fetchSinglePageFailure,\n} from \"../actions/PageAction\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchSinglePage() {\n  try {\n    const inputData = yield select((state) => state.page.pageData.inputData);\n    const response = yield api.postMethod(\"static_pages\", inputData);\n    if (response.data.success) {\n      yield put(fetchSinglePageSuccess(response.data.data));\n    } else {\n      yield put(fetchSinglePageFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSinglePageFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_SINGLE_PAGE_START, fetchSinglePage)]);\n}\n"]},"metadata":{},"sourceType":"module"}