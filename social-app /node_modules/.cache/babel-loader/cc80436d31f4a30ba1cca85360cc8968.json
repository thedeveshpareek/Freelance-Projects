{"ast":null,"code":"import _regeneratorRuntime from\"/home/codegama/bhawya/source_code/fx-frontend-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/codegama/bhawya/source_code/fx-frontend-base/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var createImage=function createImage(url){return new Promise(function(resolve,reject){var image=new Image();image.addEventListener('load',function(){return resolve(image);});image.addEventListener('error',function(error){return reject(error);});image.setAttribute('crossOrigin','anonymous');// needed to avoid cross-origin issues on CodeSandbox\nimage.src=url;});};function getRadianAngle(degreeValue){return degreeValue*Math.PI/180;}/**\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */export default function getCroppedImg(_x,_x2){return _getCroppedImg.apply(this,arguments);}function _getCroppedImg(){_getCroppedImg=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(imageSrc,pixelCrop){var rotation,fileType,image,canvas,ctx,maxSize,safeArea,data,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:rotation=_args.length>2&&_args[2]!==undefined?_args[2]:0;fileType=_args.length>3?_args[3]:undefined;_context.next=4;return createImage(imageSrc);case 4:image=_context.sent;canvas=document.createElement('canvas');ctx=canvas.getContext('2d');maxSize=Math.max(image.width,image.height);safeArea=2*(maxSize/2*Math.sqrt(2));// set each dimensions to double largest dimension to allow for a safe area for the\n// image to rotate in without being clipped by canvas context\ncanvas.width=safeArea;canvas.height=safeArea;// translate canvas context to a central location on image to allow rotating around the center.\nctx.translate(safeArea/2,safeArea/2);ctx.rotate(getRadianAngle(rotation));ctx.translate(-safeArea/2,-safeArea/2);// draw rotated image and store data.\nctx.drawImage(image,safeArea/2-image.width*0.5,safeArea/2-image.height*0.5);data=ctx.getImageData(0,0,safeArea,safeArea);// set canvas width to final desired crop size - this will clear existing context\ncanvas.width=pixelCrop.width;canvas.height=pixelCrop.height;// paste generated rotate image with correct offsets for x,y crop values.\nctx.putImageData(data,Math.round(0-safeArea/2+image.width*0.5-pixelCrop.x),Math.round(0-safeArea/2+image.height*0.5-pixelCrop.y));// As Base64 string\nreturn _context.abrupt(\"return\",canvas.toDataURL(fileType));case 20:case\"end\":return _context.stop();}}},_callee);}));return _getCroppedImg.apply(this,arguments);}","map":{"version":3,"sources":["/home/codegama/bhawya/source_code/fx-frontend-base/src/components/Accounts/Profile/CropImageHelper.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","getCroppedImg","imageSrc","pixelCrop","rotation","fileType","canvas","document","createElement","ctx","getContext","maxSize","max","width","height","safeArea","sqrt","translate","rotate","drawImage","data","getImageData","putImageData","round","x","y","toDataURL"],"mappings":"+UAAA,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,GAAG,QACrB,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CAC/B,GAAMC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,KAAJ,EAAd,CACAD,KAAK,CAACE,gBAAN,CAAuB,MAAvB,CAA+B,iBAAMJ,CAAAA,OAAO,CAACE,KAAD,CAAb,EAA/B,EACAA,KAAK,CAACE,gBAAN,CAAuB,OAAvB,CAAgC,SAAAC,KAAK,QAAIJ,CAAAA,MAAM,CAACI,KAAD,CAAV,EAArC,EACAH,KAAK,CAACI,YAAN,CAAmB,aAAnB,CAAkC,WAAlC,EAA+C;AAC/CJ,KAAK,CAACK,GAAN,CAAYT,GAAZ,CACD,CAND,CADqB,EAAvB,CASA,QAASU,CAAAA,cAAT,CAAwBC,WAAxB,CAAqC,CACnC,MAAQA,CAAAA,WAAW,CAAGC,IAAI,CAACC,EAApB,CAA0B,GAAjC,CACD,CAED;AACA;AACA;AACA;AACA,GAEA,uBAA8BC,CAAAA,aAA9B,sD,iGAAe,iBAA6BC,QAA7B,CAAuCC,SAAvC,+LAAkDC,QAAlD,+CAA6D,CAA7D,CAAgEC,QAAhE,yDACOnB,CAAAA,WAAW,CAACgB,QAAD,CADlB,QACPX,KADO,eAEPe,MAFO,CAEEC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAFF,CAGPC,GAHO,CAGDH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAHC,CAKPC,OALO,CAKGZ,IAAI,CAACa,GAAL,CAASrB,KAAK,CAACsB,KAAf,CAAsBtB,KAAK,CAACuB,MAA5B,CALH,CAMPC,QANO,CAMI,GAAMJ,OAAO,CAAG,CAAX,CAAgBZ,IAAI,CAACiB,IAAL,CAAU,CAAV,CAArB,CANJ,CAQb;AACA;AACAV,MAAM,CAACO,KAAP,CAAeE,QAAf,CACAT,MAAM,CAACQ,MAAP,CAAgBC,QAAhB,CAEA;AACAN,GAAG,CAACQ,SAAJ,CAAcF,QAAQ,CAAG,CAAzB,CAA4BA,QAAQ,CAAG,CAAvC,EACAN,GAAG,CAACS,MAAJ,CAAWrB,cAAc,CAACO,QAAD,CAAzB,EACAK,GAAG,CAACQ,SAAJ,CAAc,CAACF,QAAD,CAAY,CAA1B,CAA6B,CAACA,QAAD,CAAY,CAAzC,EAEA;AACAN,GAAG,CAACU,SAAJ,CACE5B,KADF,CAEEwB,QAAQ,CAAG,CAAX,CAAexB,KAAK,CAACsB,KAAN,CAAc,GAF/B,CAGEE,QAAQ,CAAG,CAAX,CAAexB,KAAK,CAACuB,MAAN,CAAe,GAHhC,EAKMM,IAxBO,CAwBAX,GAAG,CAACY,YAAJ,CAAiB,CAAjB,CAAoB,CAApB,CAAuBN,QAAvB,CAAiCA,QAAjC,CAxBA,CA0Bb;AACAT,MAAM,CAACO,KAAP,CAAeV,SAAS,CAACU,KAAzB,CACAP,MAAM,CAACQ,MAAP,CAAgBX,SAAS,CAACW,MAA1B,CAEA;AACAL,GAAG,CAACa,YAAJ,CACEF,IADF,CAEErB,IAAI,CAACwB,KAAL,CAAW,EAAIR,QAAQ,CAAG,CAAf,CAAmBxB,KAAK,CAACsB,KAAN,CAAc,GAAjC,CAAuCV,SAAS,CAACqB,CAA5D,CAFF,CAGEzB,IAAI,CAACwB,KAAL,CAAW,EAAIR,QAAQ,CAAG,CAAf,CAAmBxB,KAAK,CAACuB,MAAN,CAAe,GAAlC,CAAwCX,SAAS,CAACsB,CAA7D,CAHF,EAMA;AArCa,gCAsCNnB,MAAM,CAACoB,SAAP,CAAiBrB,QAAjB,CAtCM,yD","sourcesContent":["const createImage = url =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener('load', () => resolve(image))\n    image.addEventListener('error', error => reject(error))\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url\n  })\n\nfunction getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\n\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0 ,fileType) {\n  const image = await createImage(imageSrc)\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n\n  const maxSize = Math.max(image.width, image.height)\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2))\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea\n  canvas.height = safeArea\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2)\n  ctx.rotate(getRadianAngle(rotation))\n  ctx.translate(-safeArea / 2, -safeArea / 2)\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5\n  )\n  const data = ctx.getImageData(0, 0, safeArea, safeArea)\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width\n  canvas.height = pixelCrop.height\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x),\n    Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)\n  )\n\n  // As Base64 string\n  return canvas.toDataURL(fileType);\n}"]},"metadata":{},"sourceType":"module"}