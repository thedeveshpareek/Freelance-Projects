{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchChatMessageFailure, fetchChatMessageStart, fetchChatMessageSuccess, fetchChatUsersFailure, fetchChatUsersSuccess, saveChatUserFailure, saveChatUserStart, saveChatUserSuccess, fetchChatMoreDataSucess } from \"../actions/ChatAction\";\nimport { FETCH_CHAT_MESSAGE_START, FETCH_CHAT_USERS_START, SAVE_CHAT_USERS_START, ADD_MESSAGE_CONTENT, ADD_MESSAGE_CONTENT_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchChatUserAPI() {\n  try {\n    const inputData = yield select(state => state.chat.chatUsers.inputData);\n    console.log('inputData', inputData == '', inputData);\n    const response = yield api.postMethod(\"chat_users\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchChatUsersSuccess(response.data.data));\n      if (response.data.data.users.length > 0 && inputData.search_key == '') yield put(fetchChatMessageStart({\n        to_user_id: response.data.data.users[0].to_user_id,\n        from_user_id: response.data.data.users[0].from_user_id\n      }));\n    } else {\n      yield put(fetchChatUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchChatUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchChatMessageAPI() {\n  try {\n    const inputData = yield select(state => state.chat.messages.inputData);\n    const response = yield api.postMethod(\"chat_messages\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchChatMessageSuccess(response.data.data));\n    } else {\n      yield put(fetchChatMessageFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchChatMessageFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchMoreDataStartAPI() {\n  try {\n    const inputData = yield select(state => state.chat.messages.inputData);\n    const response = yield api.postMethod(\"chat_messages\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchChatMoreDataSucess(response.data.data));\n    }\n  } catch (error) {\n    yield put(fetchChatMessageFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveChatUserAPI() {\n  try {\n    const inputData = yield select(state => state.chat.saveChatUser.inputData);\n    const response = yield api.postMethod(\"chat_users_save\", inputData);\n\n    if (response.data.success) {\n      yield put(saveChatUserSuccess(response.data.data));\n      window.location.assign(\"/inbox\");\n    } else {\n      yield put(saveChatUserFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveChatUserFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_CHAT_USERS_START, fetchChatUserAPI)]);\n  yield all([yield takeLatest(FETCH_CHAT_MESSAGE_START, fetchChatMessageAPI)]);\n  yield all([yield takeLatest(SAVE_CHAT_USERS_START, saveChatUserAPI)]);\n  yield all([yield takeLatest(ADD_MESSAGE_CONTENT_START, fetchMoreDataStartAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/ChatSaga.jsx"],"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchChatMessageFailure","fetchChatMessageStart","fetchChatMessageSuccess","fetchChatUsersFailure","fetchChatUsersSuccess","saveChatUserFailure","saveChatUserStart","saveChatUserSuccess","fetchChatMoreDataSucess","FETCH_CHAT_MESSAGE_START","FETCH_CHAT_USERS_START","SAVE_CHAT_USERS_START","ADD_MESSAGE_CONTENT","ADD_MESSAGE_CONTENT_START","checkLogoutStatus","fetchChatUserAPI","inputData","state","chat","chatUsers","console","log","response","postMethod","data","success","users","length","search_key","to_user_id","from_user_id","error","notificationMessage","message","fetchChatMessageAPI","messages","fetchMoreDataStartAPI","saveChatUserAPI","saveChatUser","window","location","assign","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchChatMessageFailure,\n  fetchChatMessageStart,\n  fetchChatMessageSuccess,\n  fetchChatUsersFailure,\n  fetchChatUsersSuccess,\n  saveChatUserFailure,\n  saveChatUserStart,\n  saveChatUserSuccess,\n  fetchChatMoreDataSucess,\n} from \"../actions/ChatAction\";\nimport {\n  FETCH_CHAT_MESSAGE_START,\n  FETCH_CHAT_USERS_START,\n  SAVE_CHAT_USERS_START,\n  ADD_MESSAGE_CONTENT,\n  ADD_MESSAGE_CONTENT_START,\n} from \"../actions/ActionConstant\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* fetchChatUserAPI() {\n  try {\n    const inputData = yield select((state) => state.chat.chatUsers.inputData);\n    console.log('inputData', inputData  == '', inputData);\n    const response = yield api.postMethod(\"chat_users\", inputData);\n    if (response.data.success) {\n      yield put(fetchChatUsersSuccess(response.data.data));\n      if (response.data.data.users.length > 0 && inputData.search_key == '')\n        yield put(\n          fetchChatMessageStart({\n            to_user_id: response.data.data.users[0].to_user_id,\n            from_user_id: response.data.data.users[0].from_user_id,\n          })\n        );\n    } else {\n      yield put(fetchChatUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchChatUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchChatMessageAPI() {\n  try {\n    const inputData = yield select((state) => state.chat.messages.inputData);\n    const response = yield api.postMethod(\"chat_messages\", inputData);\n    if (response.data.success) {\n      yield put(fetchChatMessageSuccess(response.data.data));\n    } else {\n      yield put(fetchChatMessageFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchChatMessageFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchMoreDataStartAPI() {\n  try {\n    const inputData = yield select((state) => state.chat.messages.inputData);\n    const response = yield api.postMethod(\"chat_messages\", inputData);\n    if (response.data.success) {\n      yield put(fetchChatMoreDataSucess(response.data.data));\n    }\n  } catch (error) {\n    yield put(fetchChatMessageFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveChatUserAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.chat.saveChatUser.inputData\n    );\n    const response = yield api.postMethod(\"chat_users_save\", inputData);\n    if (response.data.success) {\n      yield put(saveChatUserSuccess(response.data.data));\n      window.location.assign(\"/inbox\");\n\n    } else {\n      yield put(saveChatUserFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveChatUserFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_CHAT_USERS_START, fetchChatUserAPI)]);\n  yield all([yield takeLatest(FETCH_CHAT_MESSAGE_START, fetchChatMessageAPI)]);\n  yield all([yield takeLatest(SAVE_CHAT_USERS_START, saveChatUserAPI)]);\n  yield all([yield takeLatest(ADD_MESSAGE_CONTENT_START, fetchMoreDataStartAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}