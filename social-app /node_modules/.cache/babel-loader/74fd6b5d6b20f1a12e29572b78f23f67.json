{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_USER_STORIES_START, STORY_FILE_UPLOAD_START, FETCH_STORIES_START, STORY_FILE_DELETE_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchStoriesSucess, fetchStoriesFailure, fetchuserStoriesSuccess, fetchUserStoriesFailure, storyFileUploadSuccess, storyFileUploadFailure, fetchStoriesStart, storyFileDeleteSuccess, storyFileDeleteFailure, fetchUserStoriesStart } from \"../actions/StoriesAction\";\n\nfunction* fetchUserStoriesAPI() {\n  try {\n    const skipCount = yield select(state => state.userStories.userStories.skip);\n    const response = yield api.postMethod(\"stories_list\", {\n      skip: skipCount\n    });\n\n    if (response.data.success) {\n      yield put(fetchuserStoriesSuccess(response.data.data));\n    } else {\n      yield put(fetchUserStoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserStoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchStoriesAPI() {\n  try {\n    const response = yield api.postMethod(\"stories_home\");\n\n    if (response.data.success) {\n      yield put(fetchStoriesSucess(response.data.data));\n    } else {\n      yield put(fetchStoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchStoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* storyFileUploadAPI(action) {\n  try {\n    const response = yield api.postMethod(\"story_files_upload\", action.data);\n\n    if (response.data.success) {\n      yield put(storyFileUploadSuccess(response.data.data));\n      yield put(fetchStoriesStart());\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(storyFileUploadFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(storyFileUploadFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* storyFileDeleteAPI(action) {\n  try {\n    const response = yield api.postMethod(\"stories_delete\", action.data);\n\n    if (response.data.success) {\n      yield put(storyFileDeleteSuccess(response.data.data));\n      yield put(fetchUserStoriesStart());\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(storyFileDeleteFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(storyFileDeleteFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_STORIES_START, fetchStoriesAPI)]);\n  yield all([yield takeLatest(STORY_FILE_UPLOAD_START, storyFileUploadAPI)]);\n  yield all([yield takeLatest(FETCH_USER_STORIES_START, fetchUserStoriesAPI)]);\n  yield all([yield takeLatest(STORY_FILE_DELETE_START, storyFileDeleteAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/StoriesSaga.jsx"],"names":["call","select","put","takeLatest","all","api","FETCH_USER_STORIES_START","STORY_FILE_UPLOAD_START","FETCH_STORIES_START","STORY_FILE_DELETE_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchStoriesSucess","fetchStoriesFailure","fetchuserStoriesSuccess","fetchUserStoriesFailure","storyFileUploadSuccess","storyFileUploadFailure","fetchStoriesStart","storyFileDeleteSuccess","storyFileDeleteFailure","fetchUserStoriesStart","fetchUserStoriesAPI","skipCount","state","userStories","skip","response","postMethod","data","success","error","notificationMessage","message","fetchStoriesAPI","storyFileUploadAPI","action","storyFileDeleteAPI","pageSaga"],"mappings":"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","sourcesContent":["\nimport { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  FETCH_USER_STORIES_START,\n  STORY_FILE_UPLOAD_START,\n  FETCH_STORIES_START,\n  STORY_FILE_DELETE_START\n} from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\n\nimport {\n  fetchStoriesSucess,\n  fetchStoriesFailure,\n  fetchuserStoriesSuccess,\n  fetchUserStoriesFailure,\n  storyFileUploadSuccess,\n  storyFileUploadFailure,\n  fetchStoriesStart,\n  storyFileDeleteSuccess,\n  storyFileDeleteFailure,\n  fetchUserStoriesStart,\n} from \"../actions/StoriesAction\";\n\nfunction* fetchUserStoriesAPI() {\n  try {\n    const skipCount = yield select((state) => state.userStories.userStories.skip);\n    const response = yield api.postMethod(\"stories_list\", { skip: skipCount });\n\n    if (response.data.success) {\n      yield put(fetchuserStoriesSuccess(response.data.data));\n    } else {\n      yield put(fetchUserStoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserStoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchStoriesAPI() {\n  try {\n    const response = yield api.postMethod(\"stories_home\");\n\n    if (response.data.success) {\n      yield put(fetchStoriesSucess(response.data.data));\n    } else {\n      yield put(fetchStoriesFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchStoriesFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* storyFileUploadAPI(action) {\n  try {\n    const response = yield api.postMethod(\"story_files_upload\" , action.data);\n\n    if (response.data.success) {\n      yield put(storyFileUploadSuccess(response.data.data));\n      yield put(fetchStoriesStart());\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(storyFileUploadFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(storyFileUploadFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* storyFileDeleteAPI(action) {\n  try {\n    const response = yield api.postMethod(\"stories_delete\" , action.data);\n\n    if (response.data.success) {\n      yield put(storyFileDeleteSuccess(response.data.data));\n      yield put(fetchUserStoriesStart())\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(storyFileDeleteFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(storyFileDeleteFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_STORIES_START, fetchStoriesAPI)]);\n  yield all([yield takeLatest(STORY_FILE_UPLOAD_START, storyFileUploadAPI)]);\n  yield all([yield takeLatest(FETCH_USER_STORIES_START, fetchUserStoriesAPI)]);\n  yield all([yield takeLatest(STORY_FILE_DELETE_START, storyFileDeleteAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}