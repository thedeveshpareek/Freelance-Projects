{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { FETCH_ALL_TRANSACTION_START, FETCH_SENT_PAYMENT_TRANSACTION_START, FETCH_RECEIVED_PAYMENT_TRANSACTION_START, FETCH_DEPOSIT_TRANSACTION_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchAllTransactionSuccess, fetchAllTransactionFailure, fetchSentPaymentTransactionSuccess, fetchSentPaymentTransactionFailure, fetchReceivedPaymentTransactionSuccess, fetchReceivedPaymentTransactionFailure, fetchDepositTransactionSuccess, fetchDepositTransactionFailure } from \"../actions/TransactionAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchAllTransactionAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history\");\n\n    if (response.data.success) {\n      yield put(fetchAllTransactionSuccess(response.data.data)); // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchAllTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchAllTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSentPaymentTransAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_sent\");\n\n    if (response.data.success) {\n      yield put(fetchSentPaymentTransactionSuccess(response.data.data)); // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchSentPaymentTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSentPaymentTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchReceivedPayTransAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_received\");\n\n    if (response.data.success) {\n      yield put(fetchReceivedPaymentTransactionSuccess(response.data.data)); // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchReceivedPaymentTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchReceivedPaymentTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchDepositTransactionAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_add\");\n\n    if (response.data.success) {\n      yield put(fetchDepositTransactionSuccess(response.data.data)); // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchDepositTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchDepositTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_ALL_TRANSACTION_START, fetchAllTransactionAPI), yield takeLatest(FETCH_SENT_PAYMENT_TRANSACTION_START, fetchSentPaymentTransAPI), yield takeLatest(FETCH_RECEIVED_PAYMENT_TRANSACTION_START, fetchReceivedPayTransAPI), yield takeLatest(FETCH_DEPOSIT_TRANSACTION_START, fetchDepositTransactionAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/TransactionSaga.jsx"],"names":["call","select","put","takeLatest","all","api","FETCH_ALL_TRANSACTION_START","FETCH_SENT_PAYMENT_TRANSACTION_START","FETCH_RECEIVED_PAYMENT_TRANSACTION_START","FETCH_DEPOSIT_TRANSACTION_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchAllTransactionSuccess","fetchAllTransactionFailure","fetchSentPaymentTransactionSuccess","fetchSentPaymentTransactionFailure","fetchReceivedPaymentTransactionSuccess","fetchReceivedPaymentTransactionFailure","fetchDepositTransactionSuccess","fetchDepositTransactionFailure","checkLogoutStatus","fetchAllTransactionAPI","response","postMethod","data","success","error","notificationMessage","message","fetchSentPaymentTransAPI","fetchReceivedPayTransAPI","fetchDepositTransactionAPI","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\n\nimport api from \"../../Environment\";\nimport {\n  FETCH_ALL_TRANSACTION_START,\n  FETCH_SENT_PAYMENT_TRANSACTION_START,\n  FETCH_RECEIVED_PAYMENT_TRANSACTION_START,\n  FETCH_DEPOSIT_TRANSACTION_START,\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\n\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchAllTransactionSuccess,\n  fetchAllTransactionFailure,\n  fetchSentPaymentTransactionSuccess,\n  fetchSentPaymentTransactionFailure,\n  fetchReceivedPaymentTransactionSuccess,\n  fetchReceivedPaymentTransactionFailure,\n  fetchDepositTransactionSuccess,\n  fetchDepositTransactionFailure,\n} from \"../actions/TransactionAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchAllTransactionAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history\");\n    if (response.data.success) {\n      yield put(fetchAllTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchAllTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchAllTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSentPaymentTransAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_sent\");\n    if (response.data.success) {\n      yield put(fetchSentPaymentTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchSentPaymentTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSentPaymentTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchReceivedPayTransAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_received\");\n    if (response.data.success) {\n      yield put(fetchReceivedPaymentTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchReceivedPaymentTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchReceivedPaymentTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchDepositTransactionAPI() {\n  try {\n    const response = yield api.postMethod(\"wallets_history_for_add\");\n    if (response.data.success) {\n      yield put(fetchDepositTransactionSuccess(response.data.data));\n      // Do nothing\n    } else {\n      yield put(checkLogoutStatus(response.data));\n      yield put(fetchDepositTransactionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchDepositTransactionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([\n    yield takeLatest(FETCH_ALL_TRANSACTION_START, fetchAllTransactionAPI),\n    yield takeLatest(\n      FETCH_SENT_PAYMENT_TRANSACTION_START,\n      fetchSentPaymentTransAPI\n    ),\n    yield takeLatest(\n      FETCH_RECEIVED_PAYMENT_TRANSACTION_START,\n      fetchReceivedPayTransAPI\n    ),\n    yield takeLatest(\n      FETCH_DEPOSIT_TRANSACTION_START,\n      fetchDepositTransactionAPI\n    ),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}