{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { fetchSesssionManagementSuccess, fetchSesssionManagementFailure, deleteSingleLoginSessionSuccess, deleteSingleLoginSessionFailure, deleteAllLoginSessionSuccess, deleteAllLoginSessionFailure } from \"../actions/SessionManagementAction\";\nimport { FETCH_SESSION_MANAGEMENT_LIST_START, DELETE_SINGLE_LOGIN_SESSION_START, DELETE_ALL_LOGIN_SESSION_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* fetchSessionListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_index\", action.data);\n\n    if (response.data.success) {\n      yield put(fetchSesssionManagementSuccess(response.data.data));\n    } else {\n      yield put(fetchSesssionManagementFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSesssionManagementFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteSingleLoginSessionAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_delete\", action.data);\n\n    if (response.data.success) {\n      yield put(deleteSingleLoginSessionSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteSingleLoginSessionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteSingleLoginSessionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteAllLoginSessionAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_delete_all\", action.data);\n\n    if (response.data.success) {\n      yield put(deleteAllLoginSessionSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteAllLoginSessionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteAllLoginSessionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_SESSION_MANAGEMENT_LIST_START, fetchSessionListAPI)]);\n  yield all([yield takeLatest(DELETE_SINGLE_LOGIN_SESSION_START, deleteSingleLoginSessionAPI)]);\n  yield all([yield takeLatest(DELETE_ALL_LOGIN_SESSION_START, deleteAllLoginSessionAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/SessionSaga.jsx"],"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","fetchSesssionManagementSuccess","fetchSesssionManagementFailure","deleteSingleLoginSessionSuccess","deleteSingleLoginSessionFailure","deleteAllLoginSessionSuccess","deleteAllLoginSessionFailure","FETCH_SESSION_MANAGEMENT_LIST_START","DELETE_SINGLE_LOGIN_SESSION_START","DELETE_ALL_LOGIN_SESSION_START","checkLogoutStatus","fetchSessionListAPI","action","response","postMethod","data","success","error","notificationMessage","message","deleteSingleLoginSessionAPI","deleteAllLoginSessionAPI","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  fetchSesssionManagementSuccess,\n  fetchSesssionManagementFailure,\n  deleteSingleLoginSessionSuccess,\n  deleteSingleLoginSessionFailure,\n  deleteAllLoginSessionSuccess,\n  deleteAllLoginSessionFailure\n} from \"../actions/SessionManagementAction\";\nimport {\n  FETCH_SESSION_MANAGEMENT_LIST_START,\n  DELETE_SINGLE_LOGIN_SESSION_START,\n  DELETE_ALL_LOGIN_SESSION_START\n} from \"../actions/ActionConstant\";\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\n\nfunction* fetchSessionListAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_index\", action.data);\n    if (response.data.success) {\n      yield put(fetchSesssionManagementSuccess(response.data.data));\n    } else {\n      yield put(fetchSesssionManagementFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSesssionManagementFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteSingleLoginSessionAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_delete\", action.data);\n    if (response.data.success) {\n      yield put(deleteSingleLoginSessionSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteSingleLoginSessionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteSingleLoginSessionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteAllLoginSessionAPI(action) {\n  try {\n    const response = yield api.postMethod(\"login_session_delete_all\", action.data);\n    if (response.data.success) {\n      yield put(deleteAllLoginSessionSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteAllLoginSessionFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteAllLoginSessionFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_SESSION_MANAGEMENT_LIST_START, fetchSessionListAPI)]);\n  yield all([yield takeLatest(DELETE_SINGLE_LOGIN_SESSION_START, deleteSingleLoginSessionAPI)]);\n  yield all([yield takeLatest(DELETE_ALL_LOGIN_SESSION_START, deleteAllLoginSessionAPI)]);\n}"]},"metadata":{},"sourceType":"module"}