{"ast":null,"code":"var _jsxFileName = \"/Users/devsmac/Downloads/fx-frontend/src/components/helper/AddWalletAmountModal.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Button, Modal, Row, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport configuration from \"react-global-configuration\";\nimport { addMoneyViaCardStart, addMoneyViaPaypalStart } from \"../../store/actions/WalletAction\";\nimport { fetchWalletDetailsStart } from \"../../store/actions/WalletAction\";\nimport PaypalExpressBtn from \"react-paypal-express-checkout\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { translate, t } from \"react-multi-lang\";\n\nconst AddWalletAmountModal = props => {\n  const [paymentType, setPaymentType] = useState(\"card\");\n  const [amount, setAmount] = useState(1);\n  useEffect(() => {\n    props.dispatch(fetchWalletDetailsStart());\n  }, []);\n\n  const handleChangeAmount = amount => {\n    setAmount(amount);\n  };\n\n  const [inputData, setInputData] = useState({});\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (paymentType === \"card\") props.dispatch(addMoneyViaCardStart({\n      amount: amount\n    })); // props.closeAddWalletAmountModal();\n  };\n\n  const paypalOnSuccess = payment => {\n    setTimeout(() => {\n      props.dispatch(addMoneyViaPaypalStart({\n        payment_id: payment.paymentID,\n        amount: amount\n      }));\n    }, 1000);\n    props.dispatch(fetchWalletDetailsStart());\n    props.closeAddWalletAmountModal();\n  };\n\n  const paypalOnError = err => {\n    const notificationMessage = getErrorNotificationMessage(err);\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  const paypalOnCancel = data => {\n    const notificationMessage = getErrorNotificationMessage(\"Payment cancelled please try again..\");\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  const choosePaymentOption = event => {\n    setPaymentType(event);\n  };\n\n  let env = configuration.get(\"configData.PAYPAL_MODE\"); // you can set here to 'production' for production\n\n  let currency = \"USD\"; // or you can set this value from your props or state\n\n  const client = {\n    sandbox: configuration.get(\"configData.PAYPAL_ID\"),\n    production: configuration.get(\"configData.PAYPAL_ID\")\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    className: \"modal-dialog-center withdraw-modal\",\n    size: \"md\",\n    centered: true,\n    show: props.addWalletAmountModal,\n    onHide: props.closeAddWalletAmountModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, props.addWalletAmountModal === true ? /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, t(\"add_wallet_amount\"))), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, props.payments.loading ? t(\"loading\") : /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, t(\"wallet_balance\"), \":\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, props.payments.data.user_wallet ? props.payments.data.user_wallet.remaining : \"\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"floating-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"floating-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"floating-input\",\n    type: \"number\",\n    placeholder: \"Amount\",\n    min: \"1\",\n    step: \"any\",\n    value: amount,\n    onChange: event => handleChangeAmount(event.currentTarget.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"highlight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"default-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }\n  }, t(\"enter_amount\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"floating-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label-default-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }, t(\"payment_type\")), /*#__PURE__*/React.createElement(Form, {\n    className: \"mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 25\n    }\n  }, [\"radio\"].map(type => /*#__PURE__*/React.createElement(\"div\", {\n    key: `custom-inline-${type}`,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    custom: true,\n    inline: true,\n    label: \"Card\",\n    type: type,\n    id: \"card\",\n    value: \"card\",\n    name: \"payment_type\",\n    defaultChecked: true,\n    onChange: () => setPaymentType(\"card\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 29\n    }\n  }), configuration.get(\"configData.is_paypal_enabled\") == 1 ? /*#__PURE__*/React.createElement(Form.Check, {\n    custom: true,\n    inline: true,\n    label: \"Paypal\",\n    type: type,\n    id: \"paypal\",\n    value: \"paypal\",\n    name: \"payment_type\",\n    onChange: () => setPaymentType(\"paypal\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 33\n    }\n  }) : \"\")))))), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, paymentType === \"paypal\" && amount != 0 ? /*#__PURE__*/React.createElement(PaypalExpressBtn, {\n    env: env,\n    client: client,\n    currency: currency,\n    total: amount,\n    onError: paypalOnError,\n    onSuccess: paypalOnSuccess,\n    onCancel: paypalOnCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }) : null, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    className: \"btn btn-danger\",\n    \"data-dismiss\": \"modal\",\n    onClick: props.closeAddWalletAmountModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, t(\"cancel\")), paymentType === \"card\" ? /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    className: \"btn btn-success\",\n    \"data-dismiss\": \"modal\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  }, props.addAmount.loadingButtonContent != null ? props.addAmount.loadingButtonContent : t(\"submit\")) : '')) : null));\n};\n\nconst mapStateToPros = state => ({\n  payments: state.wallet.walletData,\n  addAmount: state.wallet.addMoneyInput\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch\n  };\n}\n\nexport default connect(mapStateToPros, mapDispatchToProps)(AddWalletAmountModal);","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/components/helper/AddWalletAmountModal.jsx"],"names":["React","useState","useEffect","Form","Button","Modal","Row","Col","connect","configuration","addMoneyViaCardStart","addMoneyViaPaypalStart","fetchWalletDetailsStart","PaypalExpressBtn","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","translate","t","AddWalletAmountModal","props","paymentType","setPaymentType","amount","setAmount","dispatch","handleChangeAmount","inputData","setInputData","handleSubmit","event","preventDefault","paypalOnSuccess","payment","setTimeout","payment_id","paymentID","closeAddWalletAmountModal","paypalOnError","err","notificationMessage","paypalOnCancel","data","choosePaymentOption","env","get","currency","client","sandbox","production","addWalletAmountModal","payments","loading","user_wallet","remaining","currentTarget","value","map","type","addAmount","loadingButtonContent","mapStateToPros","state","wallet","walletData","addMoneyInput","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,GAA9B,EAAmCC,GAAnC,QAA8C,iBAA9C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SACIC,oBADJ,EAEIC,sBAFJ,QAGO,kCAHP;AAIA,SAASC,uBAAT,QAAwC,kCAAxC;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SACIC,6BADJ,EAEIC,2BAFJ,QAGS,6CAHT;AAIA,SAASC,SAAT,EAAoBC,CAApB,QAA6B,kBAA7B;;AAEA,MAAMC,oBAAoB,GAAIC,KAAD,IAAW;AAEpC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC,MAAD,CAA9C;AAEA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBvB,QAAQ,CAAC,CAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,KAAK,CAACK,QAAN,CAAeb,uBAAuB,EAAtC;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMc,kBAAkB,GAAIH,MAAD,IAAY;AACnCC,IAAAA,SAAS,CAACD,MAAD,CAAT;AACH,GAFD;;AAIA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAM4B,YAAY,GAAIC,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIV,WAAW,KAAK,MAApB,EACED,KAAK,CAACK,QAAN,CACEf,oBAAoB,CAAC;AACjBa,MAAAA,MAAM,EAAEA;AADS,KAAD,CADtB,EAH0B,CAQ5B;AACH,GATD;;AAWA,QAAMS,eAAe,GAAIC,OAAD,IAAa;AACjCC,IAAAA,UAAU,CAAC,MAAM;AACfd,MAAAA,KAAK,CAACK,QAAN,CACEd,sBAAsB,CAAC;AACrBwB,QAAAA,UAAU,EAAEF,OAAO,CAACG,SADC;AAErBb,QAAAA,MAAM,EAAEA;AAFa,OAAD,CADxB;AAMD,KAPS,EAOP,IAPO,CAAV;AAQAH,IAAAA,KAAK,CAACK,QAAN,CAAeb,uBAAuB,EAAtC;AACAQ,IAAAA,KAAK,CAACiB,yBAAN;AACH,GAXD;;AAaA,QAAMC,aAAa,GAAIC,GAAD,IAAS;AAC3B,UAAMC,mBAAmB,GAAGxB,2BAA2B,CAACuB,GAAD,CAAvD;AACA,SAAKnB,KAAL,CAAWK,QAAX,CAAoBX,kBAAkB,CAAC0B,mBAAD,CAAtC;AACH,GAHD;;AAKA,QAAMC,cAAc,GAAIC,IAAD,IAAU;AAC7B,UAAMF,mBAAmB,GAAGxB,2BAA2B,CACrD,sCADqD,CAAvD;AAGA,SAAKI,KAAL,CAAWK,QAAX,CAAoBX,kBAAkB,CAAC0B,mBAAD,CAAtC;AACH,GALD;;AAOA,QAAMG,mBAAmB,GAAIb,KAAD,IAAW;AACnCR,IAAAA,cAAc,CAACQ,KAAD,CAAd;AACH,GAFD;;AAIA,MAAIc,GAAG,GAAGnC,aAAa,CAACoC,GAAd,CAAkB,wBAAlB,CAAV,CAxDoC,CAwDmB;;AACvD,MAAIC,QAAQ,GAAG,KAAf,CAzDoC,CAyDd;;AAEtB,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAEvC,aAAa,CAACoC,GAAd,CAAkB,sBAAlB,CADE;AAEXI,IAAAA,UAAU,EAAExC,aAAa,CAACoC,GAAd,CAAkB,sBAAlB;AAFD,GAAf;AAKA,sBACI,uDACA,oBAAC,KAAD;AACI,IAAA,SAAS,EAAC,oCADd;AAEI,IAAA,IAAI,EAAC,IAFT;AAGI,IAAA,QAAQ,MAHZ;AAII,IAAA,IAAI,EAAEzB,KAAK,CAAC8B,oBAJhB;AAKI,IAAA,MAAM,EAAE9B,KAAK,CAACiB,yBALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKjB,KAAK,CAAC8B,oBAAN,KAA+B,IAA/B,gBACD,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAErB,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcX,CAAC,CAAC,mBAAD,CAAf,CADJ,CADA,eAIA,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,KAAK,CAAC+B,QAAN,CAAeC,OAAf,GACDlC,CAAC,CAAC,SAAD,CADA,gBAGD,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,CAAC,CAAC,gBAAD,CADN,OAC2B,GAD3B,eAEI;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,KAAK,CAAC+B,QAAN,CAAeT,IAAf,CAAoBW,WAApB,GACCjC,KAAK,CAAC+B,QAAN,CAAeT,IAAf,CAAoBW,WAApB,CAAgCC,SADjC,GAEC,EAHN,CAFJ,CADJ,CADA,CADJ,CAJJ,eAmBI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACA,IAAA,SAAS,EAAC,gBADV;AAEA,IAAA,IAAI,EAAC,QAFL;AAGA,IAAA,WAAW,EAAC,QAHZ;AAIA,IAAA,GAAG,EAAC,GAJJ;AAKA,IAAA,IAAI,EAAC,KALL;AAMA,IAAA,KAAK,EAAE/B,MANP;AAOA,IAAA,QAAQ,EAAGO,KAAD,IAAWJ,kBAAkB,CAACI,KAAK,CAACyB,aAAN,CAAoBC,KAArB,CAPvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAUI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,eAWI;AAAO,IAAA,SAAS,EAAC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCtC,CAAC,CAAC,cAAD,CAAnC,CAXJ,CADJ,eAeI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,SAAS,EAAC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCA,CAAC,CAAC,cAAD,CAArC,CADJ,eAEI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,CAAC,OAAD,EAAUuC,GAAV,CAAeC,IAAD,iBACX;AAAK,IAAA,GAAG,EAAG,iBAAgBA,IAAK,EAAhC;AAAmC,IAAA,SAAS,EAAC,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,IAAD,CAAM,KAAN;AACI,IAAA,MAAM,MADV;AAEI,IAAA,MAAM,MAFV;AAGI,IAAA,KAAK,EAAC,MAHV;AAII,IAAA,IAAI,EAAEA,IAJV;AAKI,IAAA,EAAE,EAAC,MALP;AAMI,IAAA,KAAK,EAAC,MANV;AAOI,IAAA,IAAI,EAAC,cAPT;AAQI,IAAA,cAAc,EAAE,IARpB;AASI,IAAA,QAAQ,EAAE,MAAMpC,cAAc,CAAC,MAAD,CATlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAYCb,aAAa,CAACoC,GAAd,CAAkB,8BAAlB,KACD,CADC,gBAEG,oBAAC,IAAD,CAAM,KAAN;AACA,IAAA,MAAM,MADN;AAEA,IAAA,MAAM,MAFN;AAGA,IAAA,KAAK,EAAC,QAHN;AAIA,IAAA,IAAI,EAAEa,IAJN;AAKA,IAAA,EAAE,EAAC,QALH;AAMA,IAAA,KAAK,EAAC,QANN;AAOA,IAAA,IAAI,EAAC,cAPL;AAQA,IAAA,QAAQ,EAAE,MAAMpC,cAAc,CAAC,QAAD,CAR9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,GAaG,EAzBJ,CADH,CADD,CAFJ,CAfJ,CAnBJ,CAJA,eA2EA,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKD,WAAW,KAAK,QAAhB,IAA4BE,MAAM,IAAI,CAAtC,gBACG,oBAAC,gBAAD;AACI,IAAA,GAAG,EAAEqB,GADT;AAEI,IAAA,MAAM,EAAEG,MAFZ;AAGI,IAAA,QAAQ,EAAED,QAHd;AAII,IAAA,KAAK,EAAEvB,MAJX;AAKI,IAAA,OAAO,EAAEe,aALb;AAMI,IAAA,SAAS,EAAEN,eANf;AAOI,IAAA,QAAQ,EAAES,cAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,GAUG,IAZR,eAcI,oBAAC,MAAD;AACA,IAAA,IAAI,EAAC,QADL;AAEA,IAAA,SAAS,EAAC,gBAFV;AAGA,oBAAa,OAHb;AAIA,IAAA,OAAO,EAAErB,KAAK,CAACiB,yBAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMCnB,CAAC,CAAC,QAAD,CANF,CAdJ,EAsBKG,WAAW,KAAK,MAAhB,gBACG,oBAAC,MAAD;AACA,IAAA,IAAI,EAAC,QADL;AAEA,IAAA,SAAS,EAAC,iBAFV;AAGA,oBAAa,OAHb;AAIA,IAAA,OAAO,EAAEQ,YAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMCT,KAAK,CAACuC,SAAN,CAAgBC,oBAAhB,IAAwC,IAAxC,GACGxC,KAAK,CAACuC,SAAN,CAAgBC,oBADnB,GAEG1C,CAAC,CAAC,QAAD,CARL,CADH,GAWG,EAjCR,CA3EA,CADC,GAiHC,IAxHN,CADA,CADJ;AA8HH,CA9LD;;AAgMA,MAAM2C,cAAc,GAAIC,KAAD,KAAY;AAC/BX,EAAAA,QAAQ,EAAEW,KAAK,CAACC,MAAN,CAAaC,UADQ;AAE/BL,EAAAA,SAAS,EAAEG,KAAK,CAACC,MAAN,CAAaE;AAFO,CAAZ,CAAvB;;AAKA,SAASC,kBAAT,CAA4BzC,QAA5B,EAAsC;AACpC,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACD;;AAED,eAAejB,OAAO,CAACqD,cAAD,EAAiBK,kBAAjB,CAAP,CAA4C/C,oBAA5C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Modal, Row, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport configuration from \"react-global-configuration\";\nimport {\n    addMoneyViaCardStart,\n    addMoneyViaPaypalStart,\n} from \"../../store/actions/WalletAction\";\nimport { fetchWalletDetailsStart } from \"../../store/actions/WalletAction\";\nimport PaypalExpressBtn from \"react-paypal-express-checkout\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n    getSuccessNotificationMessage,\n    getErrorNotificationMessage,\n  } from \"../../components/helper/NotificationMessage\";\nimport { translate, t } from \"react-multi-lang\";\n\nconst AddWalletAmountModal = (props) => {\n\n    const [paymentType, setPaymentType] = useState(\"card\");\n\n    const [amount, setAmount] = useState(1);\n\n    useEffect(() => {\n        props.dispatch(fetchWalletDetailsStart());\n    }, []);\n\n    const handleChangeAmount = (amount) => {\n        setAmount(amount);\n    };\n\n    const [inputData, setInputData] = useState({});\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (paymentType === \"card\")\n          props.dispatch(\n            addMoneyViaCardStart({\n                amount: amount,\n            })\n          );\n        // props.closeAddWalletAmountModal();\n    };\n\n    const paypalOnSuccess = (payment) => {\n        setTimeout(() => {\n          props.dispatch(\n            addMoneyViaPaypalStart({\n              payment_id: payment.paymentID,\n              amount: amount,\n            })\n          );\n        }, 1000);\n        props.dispatch(fetchWalletDetailsStart());\n        props.closeAddWalletAmountModal();\n    };\n    \n    const paypalOnError = (err) => {\n        const notificationMessage = getErrorNotificationMessage(err);\n        this.props.dispatch(createNotification(notificationMessage));\n    };\n    \n    const paypalOnCancel = (data) => {\n        const notificationMessage = getErrorNotificationMessage(\n          \"Payment cancelled please try again..\"\n        );\n        this.props.dispatch(createNotification(notificationMessage));\n    };\n    \n    const choosePaymentOption = (event) => {\n        setPaymentType(event);\n    };\n    \n    let env = configuration.get(\"configData.PAYPAL_MODE\"); // you can set here to 'production' for production\n    let currency = \"USD\"; // or you can set this value from your props or state\n    \n    const client = {\n        sandbox: configuration.get(\"configData.PAYPAL_ID\"),\n        production: configuration.get(\"configData.PAYPAL_ID\"),\n    };\n\n    return (\n        <>\n        <Modal\n            className=\"modal-dialog-center withdraw-modal\"\n            size=\"md\"\n            centered\n            show={props.addWalletAmountModal}\n            onHide={props.closeAddWalletAmountModal}\n        >\n            {props.addWalletAmountModal === true ? \n            <Form onSubmit={handleSubmit}>\n            <Modal.Header closeButton>\n                <Modal.Title>{t(\"add_wallet_amount\")}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {props.payments.loading ? (\n                t(\"loading\")\n                ) : (\n                <Row>\n                    <Col md=\"12\">\n                    <div className=\"mb-5\">\n                        <h4 className=\"text-muted\">\n                            {t(\"wallet_balance\")}:{\" \"}\n                            <span className=\"text-muted\">\n                                {props.payments.data.user_wallet\n                                ? props.payments.data.user_wallet.remaining\n                                : \"\"}\n                            </span>\n                        </h4>\n                    </div>\n                    </Col>\n                </Row>\n                )}\n                <div className=\"floating-form\">\n                    <div className=\"floating-label\">\n                        <input\n                        className=\"floating-input\"\n                        type=\"number\"\n                        placeholder=\"Amount\"\n                        min=\"1\"\n                        step=\"any\"\n                        value={amount}\n                        onChange={(event) => handleChangeAmount(event.currentTarget.value)}\n                        />\n                        <span className=\"highlight\"></span>\n                        <label className=\"default-label\">{t(\"enter_amount\")}</label>\n                    </div>\n\n                    <div className=\"floating-label\">\n                        <label className=\"label-default-1\">{t(\"payment_type\")}</label>\n                        <Form className=\"mt-4\">\n                        {[\"radio\"].map((type) => (\n                            <div key={`custom-inline-${type}`} className=\"mb-3\">\n                            <Form.Check\n                                custom\n                                inline\n                                label=\"Card\"\n                                type={type}\n                                id=\"card\"\n                                value=\"card\"\n                                name=\"payment_type\"\n                                defaultChecked={true}\n                                onChange={() => setPaymentType(\"card\")}\n                            />\n                            {configuration.get(\"configData.is_paypal_enabled\") ==\n                            1 ? (\n                                <Form.Check\n                                custom\n                                inline\n                                label=\"Paypal\"\n                                type={type}\n                                id=\"paypal\"\n                                value=\"paypal\"\n                                name=\"payment_type\"\n                                onChange={() => setPaymentType(\"paypal\")}\n                                />\n                            ) : (\n                                \"\"\n                            )}\n                            </div>\n                        ))}\n                        </Form>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n\n                {paymentType === \"paypal\" && amount != 0 ? (\n                    <PaypalExpressBtn\n                        env={env}\n                        client={client}\n                        currency={currency}\n                        total={amount}\n                        onError={paypalOnError}\n                        onSuccess={paypalOnSuccess}\n                        onCancel={paypalOnCancel}\n                    />\n                ) : null}\n\n                <Button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                data-dismiss=\"modal\"\n                onClick={props.closeAddWalletAmountModal}\n                >\n                {t(\"cancel\")}\n                </Button>\n                {paymentType === \"card\" ? (\n                    <Button\n                    type=\"button\"\n                    className=\"btn btn-success\"\n                    data-dismiss=\"modal\"\n                    onClick={handleSubmit}\n                    >\n                    {props.addAmount.loadingButtonContent != null\n                      ? props.addAmount.loadingButtonContent\n                      : t(\"submit\")}\n                    </Button>\n                ) : ''}\n                \n            </Modal.Footer>\n            </Form>\n            : null}\n        </Modal>\n        </>\n    );\n};\n\nconst mapStateToPros = (state) => ({\n    payments: state.wallet.walletData,\n    addAmount: state.wallet.addMoneyInput,\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return { dispatch };\n}\n\nexport default connect(mapStateToPros, mapDispatchToProps)(AddWalletAmountModal);\n"]},"metadata":{},"sourceType":"module"}