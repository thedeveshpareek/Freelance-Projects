{"ast":null,"code":"var _jsxFileName = \"/Users/devsmac/Downloads/fx-frontend/src/components/Accounts/Profile/CropImageModal.jsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Form, Button, Image, Modal } from \"react-bootstrap\";\nimport Cropper from \"react-easy-crop\";\nimport { t } from \"react-multi-lang\";\nimport getCroppedImg from \"./CropImageHelper\";\n\nconst CropImageModal = props => {\n  // useEffect(() => {\n  //   alert(props.cropModalFlag.type);\n  // }, []);\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n\n  const dataURLtoFile = (dataurl, filename) => {\n    var arr = dataurl.split(\",\"),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    return new File([u8arr], filename, {\n      type: mime\n    });\n  };\n\n  const getCroppedImage = useCallback(async () => {\n    const croppedImage = await getCroppedImg(props.image, croppedAreaPixels, 0, props.cropModalFlag.fileType);\n    var myFile = dataURLtoFile(croppedImage, props.cropModalFlag.fileName);\n\n    if (props.cropModalFlag.type == \"picture\") {\n      props.setImage({ ...props.imageState,\n        picture: croppedImage\n      });\n      props.setProfileInputData({ ...props.profileInputData,\n        picture: myFile\n      });\n    } else {\n      props.setImage({ ...props.imageState,\n        cover: croppedImage\n      });\n      props.setProfileInputData({ ...props.profileInputData,\n        cover: myFile\n      });\n    }\n\n    props.closeModal();\n  }, [croppedAreaPixels]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.cropModalFlag.type == \"picture\" ? /*#__PURE__*/React.createElement(Modal, {\n    className: \"modal-dialog-center sent-tip-modal\",\n    size: props.cropModalFlag.type == \"picture\" ? \"md\" : \"lg\",\n    centered: true,\n    show: props.cropModalFlag.type == \"picture\" || props.cropModalFlag.type == \"cover\" ? props.modalFlag : false,\n    onHide: props.cropModalFlag.type == \"picture\" || props.cropModalFlag.type == \"cover\" ? props.closeModal : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, t(\"crop_image\"), \" \", props.modalFlag == true ? \"Yes\" : \"NO\", \" \", props.cropModalFlag.type)), /*#__PURE__*/React.createElement(Modal.Body, {\n    className: \"cropmodal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, props.cropModalFlag.type == \"picture\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }\n  }, \"Note : \"), \"Image size of 300 * 300 is recommended\", \" \"))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  }, \"Note : \"), \"Image size of 1920 * 500 is recommended\", \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${props.cropModalFlag.type == \"picture\" ? \"image-profile-cropper\" : \"image-cover-cropper\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Cropper, {\n    image: props.image,\n    crop: crop,\n    zoom: zoom,\n    onCropChange: setCrop,\n    onCropComplete: onCropComplete,\n    onZoomChange: setZoom,\n    cropShape: props.cropModalFlag.shape,\n    aspect: props.cropModalFlag.width / props.cropModalFlag.height // cropSize={{ width: props.width, height: props.height }}\n    ,\n    objectFit: \"contain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"crop-info-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-arrows-alt mr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }), \"Drag to Reposition\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-3 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"save-btn btn btn-primary\",\n    onClick: () => getCroppedImage(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Crop\")))) : \"\", props.cropModalFlag.type == \"cover\" ? /*#__PURE__*/React.createElement(Modal, {\n    className: \"modal-dialog-center sent-tip-modal\",\n    size: props.cropModalFlag.type == \"picture\" ? \"md\" : \"lg\",\n    centered: true,\n    show: props.cropModalFlag.type == \"picture\" || props.cropModalFlag.type == \"cover\" ? props.modalFlag : false,\n    onHide: props.cropModalFlag.type == \"picture\" || props.cropModalFlag.type == \"cover\" ? props.closeModal : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, t(\"crop_image\"), \" \", props.modalFlag == true ? \"Yes\" : \"NO\", \" \", props.cropModalFlag.type)), /*#__PURE__*/React.createElement(Modal.Body, {\n    className: \"cropmodal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, props.cropModalFlag.type == \"picture\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 19\n    }\n  }, \"Note : \"), \"Image size of 300 * 300 is recommended\", \" \"))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 19\n    }\n  }, \"Note : \"), \"Image size of 1920 * 500 is recommended\", \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${props.cropModalFlag.type == \"picture\" ? \"image-profile-cropper\" : \"image-cover-cropper\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Cropper, {\n    image: props.image,\n    crop: crop,\n    zoom: zoom,\n    onCropChange: setCrop,\n    onCropComplete: onCropComplete,\n    onZoomChange: setZoom,\n    cropShape: props.cropModalFlag.shape,\n    aspect: props.cropModalFlag.width / props.cropModalFlag.height // cropSize={{ width: props.width, height: props.height }}\n    ,\n    objectFit: \"contain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"crop-info-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-arrows-alt mr-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }), \"Drag to Reposition\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-3 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"save-btn btn btn-primary\",\n    onClick: () => getCroppedImage(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, \"Crop\")))) : \"\");\n};\n\nexport default CropImageModal;","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/components/Accounts/Profile/CropImageModal.jsx"],"names":["React","useState","useEffect","useCallback","Form","Button","Image","Modal","Cropper","t","getCroppedImg","CropImageModal","props","crop","setCrop","x","y","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","onCropComplete","croppedArea","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","getCroppedImage","croppedImage","image","cropModalFlag","fileType","myFile","fileName","setImage","imageState","picture","setProfileInputData","profileInputData","cover","closeModal","modalFlag","shape","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { Form, Button, Image, Modal } from \"react-bootstrap\";\nimport Cropper from \"react-easy-crop\";\nimport { t } from \"react-multi-lang\";\nimport getCroppedImg from \"./CropImageHelper\";\n\nconst CropImageModal = (props) => {\n\n  // useEffect(() => {\n  //   alert(props.cropModalFlag.type);\n  // }, []);\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n\n  const dataURLtoFile = (dataurl, filename) => {\n    var arr = dataurl.split(\",\"),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n    \n\n    return new File([u8arr], filename, { type: mime });\n  };\n\n  const getCroppedImage = useCallback(async () => {\n    const croppedImage = await getCroppedImg(\n      props.image,\n      croppedAreaPixels,\n      0,\n      props.cropModalFlag.fileType\n    );\n\n    var myFile = dataURLtoFile(croppedImage, props.cropModalFlag.fileName);\n\n    if (props.cropModalFlag.type == \"picture\") {\n      props.setImage({ ...props.imageState, picture: croppedImage });\n      props.setProfileInputData({\n        ...props.profileInputData,\n        picture: myFile,\n      });\n    } else {\n      props.setImage({ ...props.imageState, cover: croppedImage });\n      props.setProfileInputData({\n        ...props.profileInputData,\n        cover: myFile,\n      });\n    }\n    props.closeModal();\n  }, [croppedAreaPixels]);\n\n  return (\n    <>\n    {props.cropModalFlag.type == \"picture\" ? \n      <Modal\n        className=\"modal-dialog-center sent-tip-modal\"\n        size={props.cropModalFlag.type == \"picture\" ? \"md\" : \"lg\"}\n        centered\n        show={props.cropModalFlag.type == \"picture\" || props.cropModalFlag.type == \"cover\" ? props.modalFlag : false}\n        onHide={props.cropModalFlag.type == \"picture\" || props.cropModalFlag.type == \"cover\" ? props.closeModal : false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>{t(\"crop_image\")} {props.modalFlag == true ? \"Yes\" : \"NO\"} {props.cropModalFlag.type}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"cropmodal\">\n          {props.cropModalFlag.type == \"picture\" ? (\n            <>\n              <div className=\"mb-3\">\n                <h4 className=\"text-muted\">\n                  <span className=\"text-danger\">Note : </span>Image size of 300 * 300 is recommended{\" \"}\n                </h4>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"mb-3\">\n                <h4 className=\"text-muted\">\n                  <span  className=\"text-danger\">Note : </span>Image size of 1920 * 500 is recommended{\" \"}\n                </h4>\n              </div>\n            </>\n          )}\n          <div\n            className={`${\n              props.cropModalFlag.type == \"picture\"\n                ? \"image-profile-cropper\"\n                : \"image-cover-cropper\"\n            }`}\n          >\n            <Cropper\n              image={props.image}\n              crop={crop}\n              zoom={zoom}\n              onCropChange={setCrop}\n              onCropComplete={onCropComplete}\n              onZoomChange={setZoom}\n              cropShape={props.cropModalFlag.shape}\n              aspect={props.cropModalFlag.width / props.cropModalFlag.height}\n              // cropSize={{ width: props.width, height: props.height }}\n              objectFit=\"contain\"\n            />\n            <div className=\"crop-info-text\">\n              <p>\n                <i className=\"fas fa-arrows-alt mr-2\"></i>Drag to Reposition\n              </p>\n            </div>\n          </div>\n          <div className=\"mt-3 text-center\">\n            <button\n              className=\"save-btn btn btn-primary\"\n              onClick={() => getCroppedImage()}\n            >\n              Crop\n            </button>\n          </div>\n        </Modal.Body>\n      </Modal>\n      : \"\" }\n\n{props.cropModalFlag.type == \"cover\" ? \n      <Modal\n        className=\"modal-dialog-center sent-tip-modal\"\n        size={props.cropModalFlag.type == \"picture\" ? \"md\" : \"lg\"}\n        centered\n        show={props.cropModalFlag.type == \"picture\" || props.cropModalFlag.type == \"cover\" ? props.modalFlag : false}\n        onHide={props.cropModalFlag.type == \"picture\" || props.cropModalFlag.type == \"cover\" ? props.closeModal : false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>{t(\"crop_image\")} {props.modalFlag == true ? \"Yes\" : \"NO\"} {props.cropModalFlag.type}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"cropmodal\">\n          {props.cropModalFlag.type == \"picture\" ? (\n            <>\n              <div className=\"mb-3\">\n                <h4 className=\"text-muted\">\n                  <span className=\"text-danger\">Note : </span>Image size of 300 * 300 is recommended{\" \"}\n                </h4>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"mb-3\">\n                <h4 className=\"text-muted\">\n                  <span  className=\"text-danger\">Note : </span>Image size of 1920 * 500 is recommended{\" \"}\n                </h4>\n              </div>\n            </>\n          )}\n          <div\n            className={`${\n              props.cropModalFlag.type == \"picture\"\n                ? \"image-profile-cropper\"\n                : \"image-cover-cropper\"\n            }`}\n          >\n            <Cropper\n              image={props.image}\n              crop={crop}\n              zoom={zoom}\n              onCropChange={setCrop}\n              onCropComplete={onCropComplete}\n              onZoomChange={setZoom}\n              cropShape={props.cropModalFlag.shape}\n              aspect={props.cropModalFlag.width / props.cropModalFlag.height}\n              // cropSize={{ width: props.width, height: props.height }}\n              objectFit=\"contain\"\n            />\n            <div className=\"crop-info-text\">\n              <p>\n                <i className=\"fas fa-arrows-alt mr-2\"></i>Drag to Reposition\n              </p>\n            </div>\n          </div>\n          <div className=\"mt-3 text-center\">\n            <button\n              className=\"save-btn btn btn-primary\"\n              onClick={() => getCroppedImage()}\n            >\n              Crop\n            </button>\n          </div>\n        </Modal.Body>\n      </Modal>\n      : \"\" }\n    </>\n  );\n};\n\nexport default CropImageModal;\n"]},"metadata":{},"sourceType":"module"}