{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { ADD_BANK_ACCOUNT_START, ADD_BANK_ACCOUNT_CONTENT_CREATOR_FLOW_START, GET_BANK_ACCOUNT_START, MAKE_DEFAULT_BANK_ACCOUNT_START, DELETE_BANK_ACCOUNT_START, DELETE_BANK_ACCOUNT_CONTENT_CREATOR_FLOW_START, FETCH_SINGLE_BANK_ACCOUNT_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { addBankAccountSuccess, addBankAccountFailure, getBankAccountSuccess, getBankAccountFailure, getBankAccountStart, makeDefaultBankAccountSuccess, makeDefaultBankAccountFailure, deleteBankAccountSuccess, deleteBankAccountFailure, fetchSingleBankAccountSuccess, fetchSingleBankAccountFailure } from \"../actions/BankAccountAction\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* addBankAccountAPI() {\n  try {\n    const inputData = yield select(state => state.bankAccount.addBankAccountInput.inputData);\n    const response = yield api.postMethod(\"billing_accounts_save\", inputData);\n\n    if (response.data.success) {\n      yield put(addBankAccountSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/billing-accounts\");\n    } else {\n      yield put(addBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* getBankAccountAPI() {\n  try {\n    const response = yield api.postMethod(\"billing_accounts_list\");\n\n    if (response.data.success) {\n      yield put(getBankAccountSuccess(response.data.data));\n    } else {\n      yield put(getBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(getBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* makeDefaultBankAccountAPI() {\n  try {\n    const inputData = yield select(state => state.bankAccount.makeDefault.inputData);\n    const response = yield api.postMethod(\"billing_accounts_default\", inputData);\n\n    if (response.data.success) {\n      yield put(makeDefaultBankAccountSuccess(response.data));\n      yield put(getBankAccountStart());\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(makeDefaultBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(makeDefaultBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteAccountBankAccountAPI() {\n  try {\n    const inputData = yield select(state => state.bankAccount.deleteAccount.inputData);\n    const response = yield api.postMethod(\"billing_accounts_delete\", inputData);\n\n    if (response.data.success) {\n      yield put(deleteBankAccountSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/billing-accounts\");\n    } else {\n      yield put(deleteBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSingleBankAccountAPI() {\n  try {\n    const inputData = yield select(state => state.bankAccount.singleAccount.inputData);\n    const response = yield api.postMethod(\"users_accounts_save\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchSingleBankAccountSuccess(response.data));\n      yield put(getBankAccountStart());\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(fetchSingleBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* addBankAccountContentCreatorFlowAPI() {\n  try {\n    const inputData = yield select(state => state.bankAccount.addBankAccountContentCreatorFlowInput.inputData);\n    const response = yield api.postMethod(\"billing_accounts_save\", inputData);\n\n    if (response.data.success) {\n      yield put(addBankAccountSuccess(response.data));\n      yield put(getBankAccountStart());\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(addBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteBankAccountContentCreatorFlowAPI() {\n  try {\n    const inputData = yield select(state => state.bankAccount.deleteAccountContentCreatorFlow.inputData);\n    const response = yield api.postMethod(\"billing_accounts_delete\", inputData);\n\n    if (response.data.success) {\n      yield put(deleteBankAccountSuccess(response.data));\n      yield put(getBankAccountStart());\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(ADD_BANK_ACCOUNT_START, addBankAccountAPI)]);\n  yield all([yield takeLatest(ADD_BANK_ACCOUNT_CONTENT_CREATOR_FLOW_START, addBankAccountContentCreatorFlowAPI)]);\n  yield all([yield takeLatest(GET_BANK_ACCOUNT_START, getBankAccountAPI)]);\n  yield all([yield takeLatest(MAKE_DEFAULT_BANK_ACCOUNT_START, makeDefaultBankAccountAPI)]);\n  yield all([yield takeLatest(DELETE_BANK_ACCOUNT_START, deleteAccountBankAccountAPI)]);\n  yield all([yield takeLatest(DELETE_BANK_ACCOUNT_CONTENT_CREATOR_FLOW_START, deleteBankAccountContentCreatorFlowAPI)]);\n  yield all([yield takeLatest(FETCH_SINGLE_BANK_ACCOUNT_START, fetchSingleBankAccountAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/BankAccountSaga.jsx"],"names":["call","select","put","takeLatest","all","api","ADD_BANK_ACCOUNT_START","ADD_BANK_ACCOUNT_CONTENT_CREATOR_FLOW_START","GET_BANK_ACCOUNT_START","MAKE_DEFAULT_BANK_ACCOUNT_START","DELETE_BANK_ACCOUNT_START","DELETE_BANK_ACCOUNT_CONTENT_CREATOR_FLOW_START","FETCH_SINGLE_BANK_ACCOUNT_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","addBankAccountSuccess","addBankAccountFailure","getBankAccountSuccess","getBankAccountFailure","getBankAccountStart","makeDefaultBankAccountSuccess","makeDefaultBankAccountFailure","deleteBankAccountSuccess","deleteBankAccountFailure","fetchSingleBankAccountSuccess","fetchSingleBankAccountFailure","checkLogoutStatus","addBankAccountAPI","inputData","state","bankAccount","addBankAccountInput","response","postMethod","data","success","notificationMessage","message","window","location","assign","error","getBankAccountAPI","makeDefaultBankAccountAPI","makeDefault","deleteAccountBankAccountAPI","deleteAccount","fetchSingleBankAccountAPI","singleAccount","addBankAccountContentCreatorFlowAPI","addBankAccountContentCreatorFlowInput","deleteBankAccountContentCreatorFlowAPI","deleteAccountContentCreatorFlow","pageSaga"],"mappings":"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","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport {\n  ADD_BANK_ACCOUNT_START,\n  ADD_BANK_ACCOUNT_CONTENT_CREATOR_FLOW_START,\n  GET_BANK_ACCOUNT_START,\n  MAKE_DEFAULT_BANK_ACCOUNT_START,\n  DELETE_BANK_ACCOUNT_START,\n  DELETE_BANK_ACCOUNT_CONTENT_CREATOR_FLOW_START,\n  FETCH_SINGLE_BANK_ACCOUNT_START,\n} from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n  addBankAccountSuccess,\n  addBankAccountFailure,\n  getBankAccountSuccess,\n  getBankAccountFailure,\n  getBankAccountStart,\n  makeDefaultBankAccountSuccess,\n  makeDefaultBankAccountFailure,\n  deleteBankAccountSuccess,\n  deleteBankAccountFailure,\n  fetchSingleBankAccountSuccess,\n  fetchSingleBankAccountFailure,\n} from \"../actions/BankAccountAction\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* addBankAccountAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bankAccount.addBankAccountInput.inputData\n    );\n    const response = yield api.postMethod(\"billing_accounts_save\", inputData);\n\n    if (response.data.success) {\n      yield put(addBankAccountSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/billing-accounts\");\n    } else {\n      yield put(addBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* getBankAccountAPI() {\n  try {\n    const response = yield api.postMethod(\"billing_accounts_list\");\n\n    if (response.data.success) {\n      yield put(getBankAccountSuccess(response.data.data));\n    } else {\n      yield put(getBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(getBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* makeDefaultBankAccountAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bankAccount.makeDefault.inputData\n    );\n    const response = yield api.postMethod(\n      \"billing_accounts_default\",\n      inputData\n    );\n\n    if (response.data.success) {\n      yield put(makeDefaultBankAccountSuccess(response.data));\n      yield put(getBankAccountStart());\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(makeDefaultBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(makeDefaultBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteAccountBankAccountAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bankAccount.deleteAccount.inputData\n    );\n    const response = yield api.postMethod(\"billing_accounts_delete\", inputData);\n\n    if (response.data.success) {\n      yield put(deleteBankAccountSuccess(response.data));\n\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/billing-accounts\");\n    } else {\n      yield put(deleteBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSingleBankAccountAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bankAccount.singleAccount.inputData\n    );\n    const response = yield api.postMethod(\"users_accounts_save\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchSingleBankAccountSuccess(response.data));\n      yield put(getBankAccountStart());\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(fetchSingleBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* addBankAccountContentCreatorFlowAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bankAccount.addBankAccountContentCreatorFlowInput.inputData\n    );\n    const response = yield api.postMethod(\"billing_accounts_save\", inputData);\n\n    if (response.data.success) {\n      yield put(addBankAccountSuccess(response.data));\n      yield put(getBankAccountStart());\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(addBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(addBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteBankAccountContentCreatorFlowAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.bankAccount.deleteAccountContentCreatorFlow.inputData\n    );\n    const response = yield api.postMethod(\"billing_accounts_delete\", inputData);\n\n    if (response.data.success) {\n      yield put(deleteBankAccountSuccess(response.data));\n      yield put(getBankAccountStart());\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(deleteBankAccountFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteBankAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(ADD_BANK_ACCOUNT_START, addBankAccountAPI)]);\n  yield all([yield takeLatest(ADD_BANK_ACCOUNT_CONTENT_CREATOR_FLOW_START, addBankAccountContentCreatorFlowAPI)]);\n  yield all([yield takeLatest(GET_BANK_ACCOUNT_START, getBankAccountAPI)]);\n  yield all([\n    yield takeLatest(\n      MAKE_DEFAULT_BANK_ACCOUNT_START,\n      makeDefaultBankAccountAPI\n    ),\n  ]);\n  yield all([\n    yield takeLatest(DELETE_BANK_ACCOUNT_START, deleteAccountBankAccountAPI),\n  ]);\n  yield all([\n    yield takeLatest(DELETE_BANK_ACCOUNT_CONTENT_CREATOR_FLOW_START, deleteBankAccountContentCreatorFlowAPI),\n  ]);\n  yield all([\n    yield takeLatest(\n      FETCH_SINGLE_BANK_ACCOUNT_START,\n      fetchSingleBankAccountAPI\n    ),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}