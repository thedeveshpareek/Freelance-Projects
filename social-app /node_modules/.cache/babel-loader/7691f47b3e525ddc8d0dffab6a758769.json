{"ast":null,"code":"import React, { Component } from \"react\";\nimport { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport { fetchUserDetailsSuccess, fetchUserDetailsFailure, updateUserDetailsSuccess, userLoginSuccess, userLoginFailure, userRegisterSuccess, userRegisterFailure, forgotPasswordSuccess, forgotPasswordFailure, deleteAccountSuccess, deleteAccountFailure, updateUserDetailsFailure, registerVerifyFailure, registerVerifyResendFailure, registerVerifySuccess, registerVerifyResendSuccess, notificationStatusUpdateSuccess, notificationStatusUpdateFailure, fetchPaymentsSuccess, fetchPaymentsFailure, saveBlockUserSuccess, saveBlockUserFailure, fetchBlockUsersSuccess, fetchBlockUsersFailure, resetPasswordFailure, resetPasswordSuccess, usernameValidationSuccess, usernameValidationFailure, referralValidationSuccess, referralValidationFailure, fetchContentCreatorDashboardSuccess, fetchContentCreatorDashboardFailure, twoStepAuthUpdateSuccess, twoStepAuthUpdateFAilure, twoStepAuthenticationLoginSuccess, twoStepAuthenticationLoginFailure, twoStepAuthenticationCodeResendSuccess, twoStepAuthenticationCodeResendFailure } from \"../actions/UserAction\";\nimport api from \"../../Environment\";\nimport { FETCH_USER_DETAILS_START, UPDATE_USER_DETAILS_START, UPDATE_USER_SUBSCRIPTION_DETAILS_START, LOGIN_START, REGISTER_START, FORGOT_PASSWORD_START, DELETE_ACCOUNT_START, REGISTER_VERIFY_START, REGISTER_VERIFY_RESEND_START, NOTIFICATION_STATUS_UPDATE_START, FETCH_PAYMENTS_START, FETCH_BLOCK_USERS_START, SAVE_BLOCK_USER_START, USER_VERIFY_BADGE_STATUS_START, RESET_PASSWORD_START, USERNAME_VALIDATION_START, REFERRAL_VALIDATION_START, FETCH_CONTENT_CREATOR_DASHBOARD_START, TWO_STEP_AUTH_UPDATE_START, TWO_STEP_AUTHENTICATION_LOGIN_START, TWO_STEP_AUTHENTICATION_CODE_RESEND_START } from \"../actions/ActionConstant\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* getUserDetailsAPI() {\n  try {\n    const response = yield api.postMethod(\"profile\");\n\n    if (response.data.success) {\n      yield put(fetchUserDetailsSuccess(response.data));\n      localStorage.setItem(\"user_picture\", response.data.data.picture);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"user_cover\", response.data.data.cover);\n      localStorage.setItem(\"username\", response.data.data.username);\n      localStorage.setItem(\"name\", response.data.data.name);\n      localStorage.setItem(\"total_followers\", response.data.data.total_followers);\n      localStorage.setItem(\"total_followings\", response.data.data.total_followings);\n      localStorage.setItem(\"is_subscription_enabled\", response.data.data.is_subscription_enabled);\n      localStorage.setItem(\"is_document_verified\", response.data.data.is_document_verified);\n      localStorage.setItem(\"is_verified_badge\", response.data.data.is_verified_badge ? response.data.data.is_verified_badge : 0);\n      localStorage.setItem(\"is_content_creator\", response.data.data.is_content_creator);\n      localStorage.setItem(\"default_payment_method\", response.data.data.default_payment_method);\n      localStorage.setItem(\"is_two_step_auth_enabled\", response.data.data.is_two_step_auth_enabled);\n    } else {\n      yield put(fetchUserDetailsFailure(response.data.error));\n      yield put(checkLogoutStatus(response.data));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* updateUserDetailsAPI() {\n  try {\n    const userData = yield select(state => state.users.profileInputData.data);\n    const response = yield api.postMethod(\"update_profile\", userData);\n\n    if (response.data.success) {\n      yield put(updateUserDetailsSuccess(response.data));\n      localStorage.setItem(\"user_picture\", response.data.data.picture);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"user_cover\", response.data.data.cover);\n      localStorage.setItem(\"name\", response.data.data.name);\n      localStorage.setItem(\"username\", response.data.data.username);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"is_document_verified\", response.data.data.is_document_verified);\n      localStorage.setItem(\"is_verified_badge\", response.data.data.is_verified_badge ? response.data.data.is_verified_badge : 0);\n      localStorage.setItem(\"is_content_creator\", response.data.data.is_content_creator);\n      localStorage.setItem(\"default_payment_method\", response.data.data.default_payment_method);\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n      yield put(updateUserDetailsFailure(response.data.error));\n    }\n  } catch (error) {\n    yield put(updateUserDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* userLoginAPI() {\n  try {\n    const userData = yield select(state => state.users.loginInputData.data);\n    const response = yield api.postMethod(\"login\", userData);\n    yield put(userLoginSuccess(response.data));\n\n    if (response.data.success) {\n      if (response.data.code == 1001) window.location.assign(\"/register/verify\");else {\n        if (response.data.code == 240) {\n          const notificationMessage = getSuccessNotificationMessage(response.data.message);\n          yield put(createNotification(notificationMessage));\n          window.location.assign(\"/verification\");\n          localStorage.setItem(\"emailId\", response.data.data.email);\n        } else {\n          localStorage.setItem(\"userLoginStatus\", true);\n          localStorage.setItem(\"user_picture\", response.data.data.picture);\n          localStorage.setItem(\"user_cover\", response.data.data.cover);\n          localStorage.setItem(\"name\", response.data.data.name);\n          localStorage.setItem(\"username\", response.data.data.username);\n          localStorage.setItem(\"socket\", true);\n          localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n          localStorage.setItem(\"is_document_verified\", response.data.data.is_document_verified);\n          localStorage.setItem(\"is_verified_badge\", response.data.data.is_verified_badge ? response.data.data.is_verified_badge : 0);\n          localStorage.setItem(\"is_content_creator\", response.data.data.is_content_creator);\n          localStorage.setItem(\"default_payment_method\", response.data.data.default_payment_method);\n          localStorage.setItem(\"is_two_step_auth_enabled\", response.data.data.is_two_step_auth_enabled);\n          localStorage.setItem(\"emailId\", response.data.data.email);\n          const notificationMessage = getSuccessNotificationMessage(response.data.message);\n          yield put(createNotification(notificationMessage));\n          window.location.assign(\"/home\");\n          localStorage.setItem(\"userId\", response.data.data.user_id);\n          localStorage.setItem(\"accessToken\", response.data.data.token);\n        }\n      }\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(userLoginFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* userRegisterAPI() {\n  try {\n    const userData = yield select(state => state.users.registerInputData.data);\n    const response = yield api.postMethod(\"register\", userData);\n    yield put(userRegisterSuccess(response.data));\n\n    if (response.data.success) {\n      if (response.data.code == 1001) window.location.assign(\"/register/verify\");else {\n        localStorage.setItem(\"userId\", response.data.data.user_id);\n        localStorage.setItem(\"accessToken\", response.data.data.token);\n        localStorage.setItem(\"userLoginStatus\", true);\n        localStorage.setItem(\"user_picture\", response.data.data.picture);\n        localStorage.setItem(\"user_cover\", response.data.data.cover);\n        localStorage.setItem(\"username\", response.data.data.username);\n        localStorage.setItem(\"name\", response.data.data.name);\n        localStorage.setItem(\"socket\", true);\n        localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n        localStorage.setItem(\"is_document_verified\", response.data.data.is_document_verified);\n        localStorage.setItem(\"is_verified_badge\", response.data.data.is_verified_badge ? response.data.data.is_verified_badge : 0);\n        localStorage.setItem(\"is_two_step_auth_enabled\", response.data.data.is_two_step_auth_enabled);\n        const notificationMessage = getSuccessNotificationMessage(response.data.message);\n        yield put(createNotification(notificationMessage));\n\n        if (response.data.data.is_welcome_steps == 1) {\n          window.location.assign(\"/upload-profile-picture\");\n        } else {\n          window.location.assign(\"/home\");\n        }\n      }\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(userRegisterFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* forgotPasswordAPI() {\n  try {\n    const userData = yield select(state => state.users.forgotPasswordInputData.data);\n\n    if (!userData.email || userData.email == undefined || userData.email == null) {\n      const notificationMessage = getErrorNotificationMessage(\"Please enter the email address\");\n      yield put(createNotification(notificationMessage));\n      yield put(forgotPasswordFailure());\n    } else {\n      const response = yield api.postMethod(\"forgot_password\", userData);\n      yield put(forgotPasswordSuccess(response.data));\n\n      if (response.data.success) {\n        const notificationMessage = getSuccessNotificationMessage(response.data.message);\n        yield put(createNotification(notificationMessage));\n        window.location.assign(\"/\");\n      } else {\n        const notificationMessage = getErrorNotificationMessage(response.data.error);\n        yield put(createNotification(notificationMessage));\n      }\n    }\n  } catch (error) {\n    yield put(forgotPasswordFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteAccountAPI() {\n  try {\n    const userData = yield select(state => state.users.deleteAccount.inputData);\n    const response = yield api.postMethod(\"delete_account\", userData);\n    yield put(deleteAccountSuccess(response.data));\n\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/\");\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* registerVerify() {\n  try {\n    const inputData = yield select(state => state.users.registerVerify.inputData);\n    const response = yield api.postMethod(\"verify_email\", inputData);\n\n    if (response.data.success) {\n      yield put(registerVerifySuccess(response.data));\n      localStorage.setItem(\"userId\", response.data.data.user_id);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"accessToken\", response.data.data.token);\n      localStorage.setItem(\"userLoginStatus\", true);\n      localStorage.setItem(\"user_picture\", response.data.data.picture);\n      localStorage.setItem(\"username\", response.data.data.first_name);\n      localStorage.setItem(\"is_verified_badge\", response.data.data.is_verified_badge ? response.data.data.is_verified_badge : 0);\n      localStorage.setItem(\"socket\", true);\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/welcome\");\n    } else {\n      yield put(registerVerifyFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(registerVerifyFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* registerVerifyResend() {\n  try {\n    const response = yield api.postMethod(\"regenerate_email_verification_code\");\n\n    if (response.data.success) {\n      yield put(registerVerifyResendSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(registerVerifyResendFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(registerVerifyResendFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* notificationStatusUpdateAPI() {\n  try {\n    const userData = yield select(state => state.users.notificationUpdate.inputData);\n    const response = yield api.postMethod(\"notifications_status_update\", userData);\n\n    if (response.data.success) {\n      yield put(notificationStatusUpdateSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n      yield put(notificationStatusUpdateFailure(response.data.error));\n    }\n  } catch (error) {\n    yield put(notificationStatusUpdateFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* verificationBadgeStatusUpdateAPI() {\n  try {\n    const userData = yield select(state => state.users.verifyBadgeUpdate.inputData);\n    const response = yield api.postMethod(\"verified_badge_status\", userData);\n\n    if (response.data.success) {\n      yield put(notificationStatusUpdateSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      localStorage.setItem(\"is_verified_badge\", response.data.data.is_verified_badge ? response.data.data.is_verified_badge : 0);\n      yield put(createNotification(notificationMessage));\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n      yield put(notificationStatusUpdateFailure(response.data.error));\n    }\n  } catch (error) {\n    yield put(notificationStatusUpdateFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* getPaymentsAPI() {\n  try {\n    const response = yield api.postMethod(\"payments_index\");\n\n    if (response.data.success) {\n      yield put(fetchPaymentsSuccess(response.data));\n    } else {\n      yield put(fetchPaymentsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPaymentsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchBlockUsersAPI() {\n  try {\n    const response = yield api.postMethod(\"block_users\");\n\n    if (response.data.success) {\n      yield put(fetchBlockUsersSuccess(response.data.data));\n    } else {\n      yield put(fetchBlockUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchBlockUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveBlockUserAPI() {\n  try {\n    const inputData = yield select(state => state.users.saveBlockUser.inputData);\n    const response = yield api.postMethod(\"block_users_save\", inputData);\n\n    if (response.data.success) {\n      yield put(saveBlockUserSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      localStorage.setItem(\"total_followers\", response.data.data.total_followers);\n      localStorage.setItem(\"total_followings\", response.data.data.total_followings);\n\n      if (inputData.is_other_profile == 1) {\n        window.location.reload();\n      }\n    } else {\n      yield put(saveBlockUserFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveBlockUserFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* resetPasswordAPI() {\n  try {\n    const inputData = yield select(state => state.users.resetPasswordInputData.inputData);\n    const response = yield api.postMethod(\"reset_password\", inputData);\n    yield put(resetPasswordSuccess(response.data));\n\n    if (response.data.success) {\n      localStorage.setItem(\"userLoginStatus\", true);\n      localStorage.setItem(\"user_picture\", response.data.data.picture);\n      localStorage.setItem(\"user_cover\", response.data.data.cover);\n      localStorage.setItem(\"name\", response.data.data.name);\n      localStorage.setItem(\"username\", response.data.data.username);\n      localStorage.setItem(\"socket\", true);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"is_document_verified\", response.data.data.is_document_verified);\n      localStorage.setItem(\"is_verified_badge\", response.data.data.is_verified_badge ? response.data.data.is_verified_badge : 0);\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      localStorage.setItem(\"userId\", response.data.data.user_id);\n      localStorage.setItem(\"accessToken\", response.data.data.token);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/home\");\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(resetPasswordFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* usernameValidationAPI() {\n  try {\n    const inputData = yield select(state => state.users.validationInputData.data);\n    const response = yield api.postMethod(\"username_validation\", inputData);\n    yield put(usernameValidationSuccess(response.data));\n\n    if (response.data.success) {} else {\n      yield put(usernameValidationFailure(response)); // const notificationMessage = getErrorNotificationMessage(\n      //   response.data.error\n      // );\n      // yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(usernameValidationFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* referralValidationAPI() {\n  try {\n    const inputData = yield select(state => state.users.referralInputData.data);\n    const response = yield api.postMethod(\"referral_code_validate\", inputData);\n    yield put(referralValidationSuccess(response.data));\n\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(referralValidationFailure(response));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(referralValidationFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* getContentCreatorDashboardAPI() {\n  try {\n    const response = yield api.postMethod(\"content_creators_dashboard\");\n\n    if (response.data.success) {\n      yield put(fetchContentCreatorDashboardSuccess(response.data));\n    } else {\n      yield put(fetchContentCreatorDashboardFailure(response.data.error));\n      yield put(checkLogoutStatus(response.data));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchContentCreatorDashboardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* updateUserSubscriptionDetailsAPI() {\n  try {\n    const userData = yield select(state => state.users.profileSubscriptionInputData.data);\n    const response = yield api.postMethod(\"update_profile\", userData);\n\n    if (response.data.success) {\n      yield put(updateUserDetailsSuccess(response.data));\n      localStorage.setItem(\"user_picture\", response.data.data.picture);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"user_cover\", response.data.data.cover);\n      localStorage.setItem(\"name\", response.data.data.name);\n      localStorage.setItem(\"username\", response.data.data.username);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"is_document_verified\", response.data.data.is_document_verified);\n      localStorage.setItem(\"is_verified_badge\", response.data.data.is_verified_badge ? response.data.data.is_verified_badge : 0);\n      localStorage.setItem(\"is_content_creator\", response.data.data.is_content_creator);\n      localStorage.setItem(\"default_payment_method\", response.data.data.default_payment_method);\n      const notificationMessage = getSuccessNotificationMessage(\"User Subscription Details Updated\");\n      yield put(createNotification(notificationMessage));\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n      yield put(updateUserDetailsFailure(response.data.error));\n    }\n  } catch (error) {\n    yield put(updateUserDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* twoStepAuthenticationUpdateAPI(action) {\n  try {\n    const response = yield api.postMethod(\"two_step_auth_update\", action.data);\n\n    if (response.data.success) {\n      yield put(twoStepAuthUpdateSuccess(response.data));\n      localStorage.setItem(\"is_two_step_auth_enabled\", response.data.data.is_two_step_auth_enabled);\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(twoStepAuthUpdateFAilure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(twoStepAuthUpdateFAilure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* twoStepAuthenticationLoginAPI(action) {\n  try {\n    const response = yield api.postMethod(\"two_step_auth_login\", action.data);\n    yield put(twoStepAuthenticationLoginSuccess(response.data));\n\n    if (response.data.success) {\n      if (response.data.code == 1001) window.location.assign(\"/register/verify\");else {\n        localStorage.setItem(\"userLoginStatus\", true);\n        localStorage.setItem(\"user_picture\", response.data.data.picture);\n        localStorage.setItem(\"user_cover\", response.data.data.cover);\n        localStorage.setItem(\"name\", response.data.data.name);\n        localStorage.setItem(\"username\", response.data.data.username);\n        localStorage.setItem(\"socket\", true);\n        localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n        localStorage.setItem(\"is_document_verified\", response.data.data.is_document_verified);\n        localStorage.setItem(\"is_verified_badge\", response.data.data.is_verified_badge ? response.data.data.is_verified_badge : 0);\n        localStorage.setItem(\"is_content_creator\", response.data.data.is_content_creator);\n        localStorage.setItem(\"default_payment_method\", response.data.data.default_payment_method);\n        localStorage.setItem(\"is_two_step_auth_enabled\", response.data.data.is_two_step_auth_enabled);\n        const notificationMessage = getSuccessNotificationMessage(response.data.message);\n        localStorage.setItem(\"emailId\", response.data.data.email);\n        yield put(createNotification(notificationMessage));\n        window.location.assign(\"/home\");\n        localStorage.setItem(\"userId\", response.data.data.user_id);\n        localStorage.setItem(\"accessToken\", response.data.data.token);\n      }\n    } else {\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n      yield put(twoStepAuthenticationLoginFailure(response.data.error));\n    }\n  } catch (error) {\n    yield put(twoStepAuthenticationLoginFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* twoStepAuthenticationCodeResendAPI(action) {\n  try {\n    const response = yield api.postMethod(\"two_step_auth_resend_code\", action.data);\n\n    if (response.data.success) {\n      yield put(twoStepAuthenticationCodeResendSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(twoStepAuthenticationCodeResendFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(twoStepAuthenticationCodeResendFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.response.data.error);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(FETCH_USER_DETAILS_START, getUserDetailsAPI), yield takeLatest(UPDATE_USER_DETAILS_START, updateUserDetailsAPI), yield takeLatest(UPDATE_USER_SUBSCRIPTION_DETAILS_START, updateUserSubscriptionDetailsAPI), yield takeLatest(LOGIN_START, userLoginAPI), yield takeLatest(REGISTER_START, userRegisterAPI), yield takeLatest(FORGOT_PASSWORD_START, forgotPasswordAPI), yield takeLatest(DELETE_ACCOUNT_START, deleteAccountAPI), yield takeLatest(REGISTER_VERIFY_START, registerVerify), yield takeLatest(REGISTER_VERIFY_RESEND_START, registerVerifyResend), yield takeLatest(NOTIFICATION_STATUS_UPDATE_START, notificationStatusUpdateAPI), yield takeLatest(FETCH_PAYMENTS_START, getPaymentsAPI), yield takeLatest(FETCH_BLOCK_USERS_START, fetchBlockUsersAPI), yield takeLatest(SAVE_BLOCK_USER_START, saveBlockUserAPI), yield takeLatest(USER_VERIFY_BADGE_STATUS_START, verificationBadgeStatusUpdateAPI), yield takeLatest(RESET_PASSWORD_START, resetPasswordAPI), yield takeLatest(USERNAME_VALIDATION_START, usernameValidationAPI), yield takeLatest(REFERRAL_VALIDATION_START, referralValidationAPI), yield takeLatest(FETCH_CONTENT_CREATOR_DASHBOARD_START, getContentCreatorDashboardAPI), yield takeLatest(TWO_STEP_AUTH_UPDATE_START, twoStepAuthenticationUpdateAPI), yield takeLatest(TWO_STEP_AUTHENTICATION_LOGIN_START, twoStepAuthenticationLoginAPI), yield takeLatest(TWO_STEP_AUTHENTICATION_CODE_RESEND_START, twoStepAuthenticationCodeResendAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/UserSaga.jsx"],"names":["React","Component","call","select","put","takeLatest","all","fetchUserDetailsSuccess","fetchUserDetailsFailure","updateUserDetailsSuccess","userLoginSuccess","userLoginFailure","userRegisterSuccess","userRegisterFailure","forgotPasswordSuccess","forgotPasswordFailure","deleteAccountSuccess","deleteAccountFailure","updateUserDetailsFailure","registerVerifyFailure","registerVerifyResendFailure","registerVerifySuccess","registerVerifyResendSuccess","notificationStatusUpdateSuccess","notificationStatusUpdateFailure","fetchPaymentsSuccess","fetchPaymentsFailure","saveBlockUserSuccess","saveBlockUserFailure","fetchBlockUsersSuccess","fetchBlockUsersFailure","resetPasswordFailure","resetPasswordSuccess","usernameValidationSuccess","usernameValidationFailure","referralValidationSuccess","referralValidationFailure","fetchContentCreatorDashboardSuccess","fetchContentCreatorDashboardFailure","twoStepAuthUpdateSuccess","twoStepAuthUpdateFAilure","twoStepAuthenticationLoginSuccess","twoStepAuthenticationLoginFailure","twoStepAuthenticationCodeResendSuccess","twoStepAuthenticationCodeResendFailure","api","FETCH_USER_DETAILS_START","UPDATE_USER_DETAILS_START","UPDATE_USER_SUBSCRIPTION_DETAILS_START","LOGIN_START","REGISTER_START","FORGOT_PASSWORD_START","DELETE_ACCOUNT_START","REGISTER_VERIFY_START","REGISTER_VERIFY_RESEND_START","NOTIFICATION_STATUS_UPDATE_START","FETCH_PAYMENTS_START","FETCH_BLOCK_USERS_START","SAVE_BLOCK_USER_START","USER_VERIFY_BADGE_STATUS_START","RESET_PASSWORD_START","USERNAME_VALIDATION_START","REFERRAL_VALIDATION_START","FETCH_CONTENT_CREATOR_DASHBOARD_START","TWO_STEP_AUTH_UPDATE_START","TWO_STEP_AUTHENTICATION_LOGIN_START","TWO_STEP_AUTHENTICATION_CODE_RESEND_START","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","checkLogoutStatus","getUserDetailsAPI","response","postMethod","data","success","localStorage","setItem","picture","user_unique_id","cover","username","name","total_followers","total_followings","is_subscription_enabled","is_document_verified","is_verified_badge","is_content_creator","default_payment_method","is_two_step_auth_enabled","error","notificationMessage","updateUserDetailsAPI","userData","state","users","profileInputData","message","window","location","assign","userLoginAPI","loginInputData","code","email","user_id","token","userRegisterAPI","registerInputData","is_welcome_steps","forgotPasswordAPI","forgotPasswordInputData","undefined","deleteAccountAPI","deleteAccount","inputData","registerVerify","first_name","registerVerifyResend","notificationStatusUpdateAPI","notificationUpdate","verificationBadgeStatusUpdateAPI","verifyBadgeUpdate","getPaymentsAPI","fetchBlockUsersAPI","saveBlockUserAPI","saveBlockUser","is_other_profile","reload","resetPasswordAPI","resetPasswordInputData","usernameValidationAPI","validationInputData","referralValidationAPI","referralInputData","getContentCreatorDashboardAPI","updateUserSubscriptionDetailsAPI","profileSubscriptionInputData","twoStepAuthenticationUpdateAPI","action","twoStepAuthenticationLoginAPI","twoStepAuthenticationCodeResendAPI","pageSaga"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,UAA5B,EAAwCC,GAAxC,QAAmD,oBAAnD;AACA,SACEC,uBADF,EAEEC,uBAFF,EAGEC,wBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,mBANF,EAOEC,mBAPF,EAQEC,qBARF,EASEC,qBATF,EAUEC,oBAVF,EAWEC,oBAXF,EAYEC,wBAZF,EAaEC,qBAbF,EAcEC,2BAdF,EAeEC,qBAfF,EAgBEC,2BAhBF,EAiBEC,+BAjBF,EAkBEC,+BAlBF,EAmBEC,oBAnBF,EAoBEC,oBApBF,EAqBEC,oBArBF,EAsBEC,oBAtBF,EAuBEC,sBAvBF,EAwBEC,sBAxBF,EAyBEC,oBAzBF,EA0BEC,oBA1BF,EA2BEC,yBA3BF,EA4BEC,yBA5BF,EA6BEC,yBA7BF,EA8BEC,yBA9BF,EA+BEC,mCA/BF,EAgCEC,mCAhCF,EAiCEC,wBAjCF,EAkCEC,wBAlCF,EAmCEC,iCAnCF,EAoCEC,iCApCF,EAqCEC,sCArCF,EAsCEC,sCAtCF,QAuCO,uBAvCP;AAyCA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SACEC,wBADF,EAEEC,yBAFF,EAGEC,sCAHF,EAIEC,WAJF,EAKEC,cALF,EAMEC,qBANF,EAOEC,oBAPF,EAQEC,qBARF,EASEC,4BATF,EAUEC,gCAVF,EAWEC,oBAXF,EAYEC,uBAZF,EAaEC,qBAbF,EAcEC,8BAdF,EAeEC,oBAfF,EAgBEC,yBAhBF,EAiBEC,yBAjBF,EAkBEC,qCAlBF,EAmBEC,0BAnBF,EAoBEC,mCApBF,EAqBEC,yCArBF,QAsBO,2BAtBP;AAwBA,SAASC,kBAAT,QAAmC,oBAAnC;AAEA,SACEC,6BADF,EAEEC,2BAFF,QAGO,6CAHP;AAIA,SAASC,iBAAT,QAAkC,wBAAlC;;AAEA,UAAUC,iBAAV,GAA8B;AAC5B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,SAAf,CAAvB;;AAEA,QAAID,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACG,uBAAuB,CAACiE,QAAQ,CAACE,IAAV,CAAxB,CAAT;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBI,OAAxD;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBK,cAA1D;AACAH,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBM,KAAtD;AACAJ,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBO,QAApD;AACAL,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,IAAhD;AACAN,MAAAA,YAAY,CAACC,OAAb,CACE,iBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBS,eAFrB;AAIAP,MAAAA,YAAY,CAACC,OAAb,CACE,kBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBU,gBAFrB;AAIAR,MAAAA,YAAY,CAACC,OAAb,CACE,yBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBW,uBAFrB;AAIAT,MAAAA,YAAY,CAACC,OAAb,CACE,sBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBY,oBAFrB;AAIAV,MAAAA,YAAY,CAACC,OAAb,CACE,mBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBAAnB,GACIf,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBADvB,GAEI,CAJN;AAMAX,MAAAA,YAAY,CAACC,OAAb,CACE,oBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBc,kBAFrB;AAIAZ,MAAAA,YAAY,CAACC,OAAb,CACE,wBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBe,sBAFrB;AAIAb,MAAAA,YAAY,CAACC,OAAb,CACE,0BADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBgB,wBAFrB;AAID,KAzCD,MAyCO;AACL,YAAMtF,GAAG,CAACI,uBAAuB,CAACgE,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAAxB,CAAT;AACA,YAAMvF,GAAG,CAACkE,iBAAiB,CAACE,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAMkB,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GApDD,CAoDE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACI,uBAAuB,CAACmF,KAAD,CAAxB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUC,oBAAV,GAAiC;AAC/B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAM3F,MAAM,CAAE4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,gBAAZ,CAA6BvB,IAAzC,CAA7B;AACA,UAAMF,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,gBAAf,EAAiCqB,QAAjC,CAAvB;;AACA,QAAItB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACK,wBAAwB,CAAC+D,QAAQ,CAACE,IAAV,CAAzB,CAAT;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBI,OAAxD;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBK,cAA1D;AACAH,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBM,KAAtD;AACAJ,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,IAAhD;AACAN,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBO,QAApD;AACAL,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBK,cAA1D;AACAH,MAAAA,YAAY,CAACC,OAAb,CACE,sBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBY,oBAFrB;AAIAV,MAAAA,YAAY,CAACC,OAAb,CACE,mBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBAAnB,GACIf,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBADvB,GAEI,CAJN;AAMAX,MAAAA,YAAY,CAACC,OAAb,CACE,oBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBc,kBAFrB;AAIAZ,MAAAA,YAAY,CAACC,OAAb,CACE,wBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBe,sBAFrB;AAIA,YAAMG,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,YAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACAO,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,UAAvB;AACD,KA/BD,MA+BO;AACL,YAAMT,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACA,YAAMxF,GAAG,CAACc,wBAAwB,CAACsD,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAAzB,CAAT;AACD;AACF,GAzCD,CAyCE,OAAOA,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACc,wBAAwB,CAACyE,KAAD,CAAzB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUU,YAAV,GAAyB;AACvB,MAAI;AACF,UAAMR,QAAQ,GAAG,MAAM3F,MAAM,CAAE4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYO,cAAZ,CAA2B7B,IAAvC,CAA7B;AAEA,UAAMF,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,OAAf,EAAwBqB,QAAxB,CAAvB;AACA,UAAM1F,GAAG,CAACM,gBAAgB,CAAC8D,QAAQ,CAACE,IAAV,CAAjB,CAAT;;AACA,QAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,UAAIH,QAAQ,CAACE,IAAT,CAAc8B,IAAd,IAAsB,IAA1B,EACEL,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,kBAAvB,EADF,KAEK;AACH,YAAG7B,QAAQ,CAACE,IAAT,CAAc8B,IAAd,IAAsB,GAAzB,EAA6B;AAC3B,gBAAMZ,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,gBAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACAO,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,eAAvB;AACAzB,UAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmB+B,KAAnD;AACD,SAPD,MAOK;AACL7B,UAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,IAAxC;AACAD,UAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBI,OAAxD;AACAF,UAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBM,KAAtD;AACAJ,UAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,IAAhD;AACAN,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBO,QAApD;AACAL,UAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACAD,UAAAA,YAAY,CAACC,OAAb,CACE,gBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBK,cAFrB;AAIAH,UAAAA,YAAY,CAACC,OAAb,CACE,sBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBY,oBAFrB;AAIAV,UAAAA,YAAY,CAACC,OAAb,CACE,mBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBAAnB,GACIf,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBADvB,GAEI,CAJN;AAMAX,UAAAA,YAAY,CAACC,OAAb,CACE,oBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBc,kBAFrB;AAIAZ,UAAAA,YAAY,CAACC,OAAb,CACE,wBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBe,sBAFrB;AAIAb,UAAAA,YAAY,CAACC,OAAb,CACE,0BADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBgB,wBAFrB;AAIAd,UAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmB+B,KAAnD;AACA,gBAAMb,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,gBAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACAO,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,OAAvB;AACAzB,UAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBgC,OAAlD;AACA9B,UAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBiC,KAAvD;AACC;AACF;AACF,KAtDD,MAsDO;AACL,YAAMf,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GAjED,CAiEE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACO,gBAAgB,CAACgF,KAAD,CAAjB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CAACsB,KAAK,CAACO,OAAP,CAAvD;AACA,UAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUgB,eAAV,GAA4B;AAC1B,MAAI;AACF,UAAMd,QAAQ,GAAG,MAAM3F,MAAM,CAC1B4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYa,iBAAZ,CAA8BnC,IADd,CAA7B;AAGA,UAAMF,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,UAAf,EAA2BqB,QAA3B,CAAvB;AACA,UAAM1F,GAAG,CAACQ,mBAAmB,CAAC4D,QAAQ,CAACE,IAAV,CAApB,CAAT;;AAEA,QAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,UAAIH,QAAQ,CAACE,IAAT,CAAc8B,IAAd,IAAsB,IAA1B,EACEL,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,kBAAvB,EADF,KAEK;AACHzB,QAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBgC,OAAlD;AACA9B,QAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBiC,KAAvD;AACA/B,QAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,IAAxC;AACAD,QAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBI,OAAxD;AACAF,QAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBM,KAAtD;AACAJ,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBO,QAApD;AACAL,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,IAAhD;AACAN,QAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACAD,QAAAA,YAAY,CAACC,OAAb,CACE,gBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBK,cAFrB;AAIAH,QAAAA,YAAY,CAACC,OAAb,CACE,sBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBY,oBAFrB;AAIAV,QAAAA,YAAY,CAACC,OAAb,CACE,mBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBAAnB,GACIf,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBADvB,GAEI,CAJN;AAMAX,QAAAA,YAAY,CAACC,OAAb,CACE,0BADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBgB,wBAFrB;AAIA,cAAME,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,cAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;;AACA,YAAIpB,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBoC,gBAAnB,IAAuC,CAA3C,EAA8C;AAC5CX,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,yBAAvB;AACD,SAFD,MAEO;AACLF,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,OAAvB;AACD;AACF;AAEF,KAzCD,MAyCO;AACL,YAAMT,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GAtDD,CAsDE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACS,mBAAmB,CAAC8E,KAAD,CAApB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUmB,iBAAV,GAA8B;AAC5B,MAAI;AACF,UAAMjB,QAAQ,GAAG,MAAM3F,MAAM,CAC1B4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYgB,uBAAZ,CAAoCtC,IADpB,CAA7B;;AAIA,QACE,CAACoB,QAAQ,CAACW,KAAV,IACAX,QAAQ,CAACW,KAAT,IAAkBQ,SADlB,IAEAnB,QAAQ,CAACW,KAAT,IAAkB,IAHpB,EAIE;AACA,YAAMb,mBAAmB,GAAGvB,2BAA2B,CACrD,gCADqD,CAAvD;AAGA,YAAMjE,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACA,YAAMxF,GAAG,CAACW,qBAAqB,EAAtB,CAAT;AACD,KAVD,MAUO;AACL,YAAMyD,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,iBAAf,EAAkCqB,QAAlC,CAAvB;AACA,YAAM1F,GAAG,CAACU,qBAAqB,CAAC0D,QAAQ,CAACE,IAAV,CAAtB,CAAT;;AACA,UAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,cAAMiB,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,cAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACAO,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD,OAND,MAMO;AACL,cAAMT,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,cAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;AACF,GA/BD,CA+BE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACW,qBAAqB,CAAC4E,KAAD,CAAtB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUsB,gBAAV,GAA6B;AAC3B,MAAI;AACF,UAAMpB,QAAQ,GAAG,MAAM3F,MAAM,CAC1B4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYmB,aAAZ,CAA0BC,SADV,CAA7B;AAGA,UAAM5C,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,gBAAf,EAAiCqB,QAAjC,CAAvB;AACA,UAAM1F,GAAG,CAACY,oBAAoB,CAACwD,QAAQ,CAACE,IAAV,CAArB,CAAT;;AACA,QAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMiB,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,YAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACAO,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD,KAND,MAMO;AACL,YAAMT,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GAlBD,CAkBE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACa,oBAAoB,CAAC0E,KAAD,CAArB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUyB,cAAV,GAA2B;AACzB,MAAI;AACF,UAAMD,SAAS,GAAG,MAAMjH,MAAM,CAC3B4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYqB,cAAZ,CAA2BD,SADV,CAA9B;AAIA,UAAM5C,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,cAAf,EAA+B2C,SAA/B,CAAvB;;AAEA,QAAI5C,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACiB,qBAAqB,CAACmD,QAAQ,CAACE,IAAV,CAAtB,CAAT;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBgC,OAAlD;AACA9B,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBK,cAA1D;AACAH,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBiC,KAAvD;AACA/B,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,IAAxC;AACAD,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBI,OAAxD;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmB4C,UAApD;AACA1C,MAAAA,YAAY,CAACC,OAAb,CACE,mBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBAAnB,GACIf,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBADvB,GAEI,CAJN;AAMAX,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACA,YAAMe,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,YAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACAO,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,UAAvB;AACD,KApBD,MAoBO;AACL,YAAMjG,GAAG,CAACe,qBAAqB,CAACqD,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAAtB,CAAT;AACA,YAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GAlCD,CAkCE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACe,qBAAqB,CAACwE,KAAD,CAAtB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CAACsB,KAAK,CAACO,OAAP,CAAvD;AACA,UAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU2B,oBAAV,GAAiC;AAC/B,MAAI;AACF,UAAM/C,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,oCAAf,CAAvB;;AAEA,QAAID,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACkB,2BAA2B,CAACkD,QAAQ,CAACE,IAAV,CAA5B,CAAT;AACA,YAAMkB,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,YAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD,KAND,MAMO;AACL,YAAMxF,GAAG,CAACgB,2BAA2B,CAACoD,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAA5B,CAAT;AACA,YAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GAhBD,CAgBE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACgB,2BAA2B,CAACuE,KAAD,CAA5B,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU4B,2BAAV,GAAwC;AACtC,MAAI;AACF,UAAM1B,QAAQ,GAAG,MAAM3F,MAAM,CAC1B4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYyB,kBAAZ,CAA+BL,SADf,CAA7B;AAGA,UAAM5C,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CACrB,6BADqB,EAErBqB,QAFqB,CAAvB;;AAIA,QAAItB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACmB,+BAA+B,CAACiD,QAAQ,CAACE,IAAV,CAAhC,CAAT;AACA,YAAMkB,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,YAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD,KAND,MAMO;AACL,YAAMA,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACA,YAAMxF,GAAG,CAACoB,+BAA+B,CAACgD,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAAhC,CAAT;AACD;AACF,GArBD,CAqBE,OAAOA,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACoB,+BAA+B,CAACmE,KAAD,CAAhC,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU8B,gCAAV,GAA6C;AAC3C,MAAI;AACF,UAAM5B,QAAQ,GAAG,MAAM3F,MAAM,CAC1B4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAY2B,iBAAZ,CAA8BP,SADd,CAA7B;AAGA,UAAM5C,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,uBAAf,EAAwCqB,QAAxC,CAAvB;;AACA,QAAItB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACmB,+BAA+B,CAACiD,QAAQ,CAACE,IAAV,CAAhC,CAAT;AACA,YAAMkB,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGAtB,MAAAA,YAAY,CAACC,OAAb,CACE,mBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBAAnB,GACIf,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBADvB,GAEI,CAJN;AAMA,YAAMnF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD,KAZD,MAYO;AACL,YAAMA,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACA,YAAMxF,GAAG,CAACoB,+BAA+B,CAACgD,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAAhC,CAAT;AACD;AACF,GAxBD,CAwBE,OAAOA,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACoB,+BAA+B,CAACmE,KAAD,CAAhC,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUgC,cAAV,GAA2B;AACzB,MAAI;AACF,UAAMpD,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,gBAAf,CAAvB;;AAEA,QAAID,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACqB,oBAAoB,CAAC+C,QAAQ,CAACE,IAAV,CAArB,CAAT;AACD,KAFD,MAEO;AACL,YAAMtE,GAAG,CAACsB,oBAAoB,CAAC8C,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAArB,CAAT;AACA,YAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GAZD,CAYE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACsB,oBAAoB,CAACiE,KAAD,CAArB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUiC,kBAAV,GAA+B;AAC7B,MAAI;AACF,UAAMrD,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,aAAf,CAAvB;;AACA,QAAID,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACyB,sBAAsB,CAAC2C,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAvB,CAAT;AACD,KAFD,MAEO;AACL,YAAMtE,GAAG,CAAC0B,sBAAsB,CAAC0C,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAAvB,CAAT;AACA,YAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GAXD,CAWE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAAC0B,sBAAsB,CAAC6D,KAAD,CAAvB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CAACsB,KAAK,CAACO,OAAP,CAAvD;AACA,UAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUkC,gBAAV,GAA6B;AAC3B,MAAI;AACF,UAAMV,SAAS,GAAG,MAAMjH,MAAM,CAC3B4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAY+B,aAAZ,CAA0BX,SADT,CAA9B;AAGA,UAAM5C,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,kBAAf,EAAmC2C,SAAnC,CAAvB;;AACA,QAAI5C,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACuB,oBAAoB,CAAC6C,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAArB,CAAT;AACA,YAAMkB,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,YAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AAEAhB,MAAAA,YAAY,CAACC,OAAb,CACE,iBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBS,eAFrB;AAIAP,MAAAA,YAAY,CAACC,OAAb,CACE,kBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBU,gBAFrB;;AAKA,UAAIgC,SAAS,CAACY,gBAAV,IAA8B,CAAlC,EAAqC;AACnC7B,QAAAA,MAAM,CAACC,QAAP,CAAgB6B,MAAhB;AACD;AACF,KAnBD,MAmBO;AACL,YAAM7H,GAAG,CAACwB,oBAAoB,CAAC4C,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAArB,CAAT;AACA,YAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GA/BD,CA+BE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACwB,oBAAoB,CAAC+D,KAAD,CAArB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CAACsB,KAAK,CAACO,OAAP,CAAvD;AACA,UAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUsC,gBAAV,GAA6B;AAC3B,MAAI;AACF,UAAMd,SAAS,GAAG,MAAMjH,MAAM,CAC3B4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYmC,sBAAZ,CAAmCf,SADlB,CAA9B;AAGA,UAAM5C,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,gBAAf,EAAiC2C,SAAjC,CAAvB;AACA,UAAMhH,GAAG,CAAC4B,oBAAoB,CAACwC,QAAQ,CAACE,IAAV,CAArB,CAAT;;AACA,QAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzBC,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,IAAxC;AACAD,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBI,OAAxD;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBM,KAAtD;AACAJ,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,IAAhD;AACAN,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBO,QAApD;AACAL,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACAD,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBK,cAA1D;AACAH,MAAAA,YAAY,CAACC,OAAb,CACE,sBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBY,oBAFrB;AAIAV,MAAAA,YAAY,CAACC,OAAb,CACE,mBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBAAnB,GACIf,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBADvB,GAEI,CAJN;AAMA,YAAMK,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGAtB,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBgC,OAAlD;AACA9B,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBiC,KAAvD;AACA,YAAMvG,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACAO,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,OAAvB;AACD,KAzBD,MAyBO;AACL,YAAMT,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GArCD,CAqCE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAAC2B,oBAAoB,CAAC4D,KAAD,CAArB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CAACsB,KAAK,CAACO,OAAP,CAAvD;AACA,UAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUwC,qBAAV,GAAkC;AAChC,MAAI;AACF,UAAMhB,SAAS,GAAG,MAAMjH,MAAM,CAC3B4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYqC,mBAAZ,CAAgC3D,IADf,CAA9B;AAGA,UAAMF,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,qBAAf,EAAsC2C,SAAtC,CAAvB;AACA,UAAMhH,GAAG,CAAC6B,yBAAyB,CAACuC,QAAQ,CAACE,IAAV,CAA1B,CAAT;;AACA,QAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B,CAC1B,CADD,MACO;AACL,YAAMvE,GAAG,CAAC8B,yBAAyB,CAACsC,QAAD,CAA1B,CAAT,CADK,CAEL;AACA;AACA;AACA;AACD;AACF,GAdD,CAcE,OAAOmB,KAAP,EAAc;AACd,UAAMvF,GAAG,CAAC8B,yBAAyB,CAACyD,KAAD,CAA1B,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CAACsB,KAAK,CAACO,OAAP,CAAvD;AACA,UAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU0C,qBAAV,GAAkC;AAChC,MAAI;AACF,UAAMlB,SAAS,GAAG,MAAMjH,MAAM,CAC3B4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYuC,iBAAZ,CAA8B7D,IADb,CAA9B;AAGA,UAAMF,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,wBAAf,EAAyC2C,SAAzC,CAAvB;AACA,UAAMhH,GAAG,CAAC+B,yBAAyB,CAACqC,QAAQ,CAACE,IAAV,CAA1B,CAAT;;AACA,QAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AAEzB,YAAMiB,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,YAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AAED,KAPD,MAOO;AACL,YAAMxF,GAAG,CAACgC,yBAAyB,CAACoC,QAAD,CAA1B,CAAT;AACA,YAAMoB,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GApBD,CAoBE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACgC,yBAAyB,CAACuD,KAAD,CAA1B,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CAACsB,KAAK,CAACO,OAAP,CAAvD;AACA,UAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU4C,6BAAV,GAA0C;AACxC,MAAI;AACF,UAAMhE,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,4BAAf,CAAvB;;AAEA,QAAID,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACiC,mCAAmC,CAACmC,QAAQ,CAACE,IAAV,CAApC,CAAT;AACD,KAFD,MAEO;AACL,YAAMtE,GAAG,CAACkC,mCAAmC,CAACkC,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAApC,CAAT;AACA,YAAMvF,GAAG,CAACkE,iBAAiB,CAACE,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAMkB,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GAbD,CAaE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACkC,mCAAmC,CAACqD,KAAD,CAApC,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU6C,gCAAV,GAA6C;AAC3C,MAAI;AACF,UAAM3C,QAAQ,GAAG,MAAM3F,MAAM,CAAE4F,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAY0C,4BAAZ,CAAyChE,IAArD,CAA7B;AACA,UAAMF,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,gBAAf,EAAiCqB,QAAjC,CAAvB;;AACA,QAAItB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACK,wBAAwB,CAAC+D,QAAQ,CAACE,IAAV,CAAzB,CAAT;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBI,OAAxD;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBK,cAA1D;AACAH,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBM,KAAtD;AACAJ,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,IAAhD;AACAN,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBO,QAApD;AACAL,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBK,cAA1D;AACAH,MAAAA,YAAY,CAACC,OAAb,CACE,sBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBY,oBAFrB;AAIAV,MAAAA,YAAY,CAACC,OAAb,CACE,mBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBAAnB,GACIf,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBADvB,GAEI,CAJN;AAMAX,MAAAA,YAAY,CAACC,OAAb,CACE,oBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBc,kBAFrB;AAIAZ,MAAAA,YAAY,CAACC,OAAb,CACE,wBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBe,sBAFrB;AAIA,YAAMG,mBAAmB,GAAGxB,6BAA6B,CAAC,mCAAD,CAAzD;AACA,YAAMhE,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD,KA5BD,MA4BO;AACL,YAAMA,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACA,YAAMxF,GAAG,CAACc,wBAAwB,CAACsD,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAAzB,CAAT;AACD;AACF,GAtCD,CAsCE,OAAOA,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACc,wBAAwB,CAACyE,KAAD,CAAzB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAU+C,8BAAV,CAAyCC,MAAzC,EAAiD;AAC/C,MAAI;AACF,UAAMpE,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,sBAAf,EAAwCmE,MAAM,CAAClE,IAA/C,CAAvB;;AAEA,QAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACmC,wBAAwB,CAACiC,QAAQ,CAACE,IAAV,CAAzB,CAAT;AACAE,MAAAA,YAAY,CAACC,OAAb,CACE,0BADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBgB,wBAFrB;AAIA,YAAME,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,YAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD,KAVD,MAUO;AACL,YAAMxF,GAAG,CAACoC,wBAAwB,CAACgC,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAAzB,CAAT;AACA,YAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GApBD,CAoBE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACoC,wBAAwB,CAACmD,KAAD,CAAzB,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUiD,6BAAV,CAAwCD,MAAxC,EAAgD;AAC9C,MAAI;AACF,UAAMpE,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,qBAAf,EAAsCmE,MAAM,CAAClE,IAA7C,CAAvB;AACA,UAAMtE,GAAG,CAACqC,iCAAiC,CAAC+B,QAAQ,CAACE,IAAV,CAAlC,CAAT;;AACA,QAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,UAAIH,QAAQ,CAACE,IAAT,CAAc8B,IAAd,IAAsB,IAA1B,EACEL,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,kBAAvB,EADF,KAEK;AACHzB,QAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,IAAxC;AACAD,QAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBI,OAAxD;AACAF,QAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBM,KAAtD;AACAJ,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,IAAhD;AACAN,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBO,QAApD;AACAL,QAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACAD,QAAAA,YAAY,CAACC,OAAb,CACE,gBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBK,cAFrB;AAIAH,QAAAA,YAAY,CAACC,OAAb,CACE,sBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBY,oBAFrB;AAIAV,QAAAA,YAAY,CAACC,OAAb,CACE,mBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBAAnB,GACIf,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,iBADvB,GAEI,CAJN;AAMAX,QAAAA,YAAY,CAACC,OAAb,CACE,oBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBc,kBAFrB;AAIAZ,QAAAA,YAAY,CAACC,OAAb,CACE,wBADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBe,sBAFrB;AAIAb,QAAAA,YAAY,CAACC,OAAb,CACE,0BADF,EAEEL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBgB,wBAFrB;AAIA,cAAME,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGAtB,QAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmB+B,KAAnD;AACA,cAAMrG,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACAO,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,OAAvB;AACAzB,QAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBgC,OAAlD;AACA9B,QAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCL,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBiC,KAAvD;AACD;AACF,KA7CD,MA6CO;AACL,YAAMf,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACA,YAAMxF,GAAG,CAACsC,iCAAiC,CAAC8B,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAAlC,CAAT;AACD;AACF,GAvDD,CAuDE,OAAOA,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACsC,iCAAiC,CAACiD,KAAD,CAAlC,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CAACsB,KAAK,CAACO,OAAP,CAAvD;AACA,UAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUkD,kCAAV,CAA6CF,MAA7C,EAAqD;AACnD,MAAI;AACF,UAAMpE,QAAQ,GAAG,MAAM3B,GAAG,CAAC4B,UAAJ,CAAe,2BAAf,EAA6CmE,MAAM,CAAClE,IAApD,CAAvB;;AAEA,QAAIF,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAMvE,GAAG,CAACuC,sCAAsC,CAAC6B,QAAQ,CAACE,IAAV,CAAvC,CAAT;AACA,YAAMkB,mBAAmB,GAAGxB,6BAA6B,CACvDI,QAAQ,CAACE,IAAT,CAAcwB,OADyC,CAAzD;AAGA,YAAM9F,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD,KAND,MAMO;AACL,YAAMxF,GAAG,CAACwC,sCAAsC,CAAC4B,QAAQ,CAACE,IAAT,CAAciB,KAAf,CAAvC,CAAT;AACA,YAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDG,QAAQ,CAACE,IAAT,CAAciB,KADuC,CAAvD;AAGA,YAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF,GAhBD,CAgBE,OAAOD,KAAP,EAAc;AACd,UAAMvF,GAAG,CAACwC,sCAAsC,CAAC+C,KAAD,CAAvC,CAAT;AACA,UAAMC,mBAAmB,GAAGvB,2BAA2B,CACrDsB,KAAK,CAACnB,QAAN,CAAeE,IAAf,CAAoBiB,KADiC,CAAvD;AAGA,UAAMvF,GAAG,CAAC+D,kBAAkB,CAACyB,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,eAAe,UAAUmD,QAAV,GAAqB;AAClC,QAAMzI,GAAG,CAAC,CACR,MAAMD,UAAU,CAACyC,wBAAD,EAA2ByB,iBAA3B,CADR,EAER,MAAMlE,UAAU,CAAC0C,yBAAD,EAA4B8C,oBAA5B,CAFR,EAGR,MAAMxF,UAAU,CAAC2C,sCAAD,EAAyCyF,gCAAzC,CAHR,EAIR,MAAMpI,UAAU,CAAC4C,WAAD,EAAcqD,YAAd,CAJR,EAKR,MAAMjG,UAAU,CAAC6C,cAAD,EAAiB0D,eAAjB,CALR,EAMR,MAAMvG,UAAU,CAAC8C,qBAAD,EAAwB4D,iBAAxB,CANR,EAOR,MAAM1G,UAAU,CAAC+C,oBAAD,EAAuB8D,gBAAvB,CAPR,EAQR,MAAM7G,UAAU,CAACgD,qBAAD,EAAwBgE,cAAxB,CARR,EASR,MAAMhH,UAAU,CAACiD,4BAAD,EAA+BiE,oBAA/B,CATR,EAUR,MAAMlH,UAAU,CACdkD,gCADc,EAEdiE,2BAFc,CAVR,EAcR,MAAMnH,UAAU,CAACmD,oBAAD,EAAuBoE,cAAvB,CAdR,EAeR,MAAMvH,UAAU,CAACoD,uBAAD,EAA0BoE,kBAA1B,CAfR,EAgBR,MAAMxH,UAAU,CAACqD,qBAAD,EAAwBoE,gBAAxB,CAhBR,EAiBR,MAAMzH,UAAU,CACdsD,8BADc,EAEd+D,gCAFc,CAjBR,EAqBR,MAAMrH,UAAU,CAACuD,oBAAD,EAAuBsE,gBAAvB,CArBR,EAsBR,MAAM7H,UAAU,CAACwD,yBAAD,EAA4BuE,qBAA5B,CAtBR,EAuBR,MAAM/H,UAAU,CAACyD,yBAAD,EAA4BwE,qBAA5B,CAvBR,EAwBR,MAAMjI,UAAU,CAAC0D,qCAAD,EAAwCyE,6BAAxC,CAxBR,EAyBR,MAAMnI,UAAU,CAAC2D,0BAAD,EAA6B2E,8BAA7B,CAzBR,EA0BR,MAAMtI,UAAU,CAAC4D,mCAAD,EAAsC4E,6BAAtC,CA1BR,EA2BR,MAAMxI,UAAU,CAAC6D,yCAAD,EAA4C4E,kCAA5C,CA3BR,CAAD,CAAT;AA6BD","sourcesContent":["import React, { Component } from \"react\";\nimport { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport {\n  fetchUserDetailsSuccess,\n  fetchUserDetailsFailure,\n  updateUserDetailsSuccess,\n  userLoginSuccess,\n  userLoginFailure,\n  userRegisterSuccess,\n  userRegisterFailure,\n  forgotPasswordSuccess,\n  forgotPasswordFailure,\n  deleteAccountSuccess,\n  deleteAccountFailure,\n  updateUserDetailsFailure,\n  registerVerifyFailure,\n  registerVerifyResendFailure,\n  registerVerifySuccess,\n  registerVerifyResendSuccess,\n  notificationStatusUpdateSuccess,\n  notificationStatusUpdateFailure,\n  fetchPaymentsSuccess,\n  fetchPaymentsFailure,\n  saveBlockUserSuccess,\n  saveBlockUserFailure,\n  fetchBlockUsersSuccess,\n  fetchBlockUsersFailure,\n  resetPasswordFailure,\n  resetPasswordSuccess,\n  usernameValidationSuccess,\n  usernameValidationFailure,\n  referralValidationSuccess,\n  referralValidationFailure,\n  fetchContentCreatorDashboardSuccess,\n  fetchContentCreatorDashboardFailure,\n  twoStepAuthUpdateSuccess,\n  twoStepAuthUpdateFAilure,\n  twoStepAuthenticationLoginSuccess,\n  twoStepAuthenticationLoginFailure,\n  twoStepAuthenticationCodeResendSuccess,\n  twoStepAuthenticationCodeResendFailure\n} from \"../actions/UserAction\";\n\nimport api from \"../../Environment\";\nimport {\n  FETCH_USER_DETAILS_START,\n  UPDATE_USER_DETAILS_START,\n  UPDATE_USER_SUBSCRIPTION_DETAILS_START,\n  LOGIN_START,\n  REGISTER_START,\n  FORGOT_PASSWORD_START,\n  DELETE_ACCOUNT_START,\n  REGISTER_VERIFY_START,\n  REGISTER_VERIFY_RESEND_START,\n  NOTIFICATION_STATUS_UPDATE_START,\n  FETCH_PAYMENTS_START,\n  FETCH_BLOCK_USERS_START,\n  SAVE_BLOCK_USER_START,\n  USER_VERIFY_BADGE_STATUS_START,\n  RESET_PASSWORD_START,\n  USERNAME_VALIDATION_START,\n  REFERRAL_VALIDATION_START,\n  FETCH_CONTENT_CREATOR_DASHBOARD_START,\n  TWO_STEP_AUTH_UPDATE_START,\n  TWO_STEP_AUTHENTICATION_LOGIN_START,\n  TWO_STEP_AUTHENTICATION_CODE_RESEND_START\n} from \"../actions/ActionConstant\";\n\nimport { createNotification } from \"react-redux-notify\";\n\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* getUserDetailsAPI() {\n  try {\n    const response = yield api.postMethod(\"profile\");\n\n    if (response.data.success) {\n      yield put(fetchUserDetailsSuccess(response.data));\n      localStorage.setItem(\"user_picture\", response.data.data.picture);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"user_cover\", response.data.data.cover);\n      localStorage.setItem(\"username\", response.data.data.username);\n      localStorage.setItem(\"name\", response.data.data.name);\n      localStorage.setItem(\n        \"total_followers\",\n        response.data.data.total_followers\n      );\n      localStorage.setItem(\n        \"total_followings\",\n        response.data.data.total_followings\n      );\n      localStorage.setItem(\n        \"is_subscription_enabled\",\n        response.data.data.is_subscription_enabled\n      );\n      localStorage.setItem(\n        \"is_document_verified\",\n        response.data.data.is_document_verified\n      );\n      localStorage.setItem(\n        \"is_verified_badge\",\n        response.data.data.is_verified_badge\n          ? response.data.data.is_verified_badge\n          : 0\n      );\n      localStorage.setItem(\n        \"is_content_creator\",\n        response.data.data.is_content_creator\n      );\n      localStorage.setItem(\n        \"default_payment_method\",\n        response.data.data.default_payment_method\n      );\n      localStorage.setItem(\n        \"is_two_step_auth_enabled\",\n        response.data.data.is_two_step_auth_enabled\n      );\n    } else {\n      yield put(fetchUserDetailsFailure(response.data.error));\n      yield put(checkLogoutStatus(response.data));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchUserDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* updateUserDetailsAPI() {\n  try {\n    const userData = yield select((state) => state.users.profileInputData.data);\n    const response = yield api.postMethod(\"update_profile\", userData);\n    if (response.data.success) {\n      yield put(updateUserDetailsSuccess(response.data));\n      localStorage.setItem(\"user_picture\", response.data.data.picture);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"user_cover\", response.data.data.cover);\n      localStorage.setItem(\"name\", response.data.data.name);\n      localStorage.setItem(\"username\", response.data.data.username);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\n        \"is_document_verified\",\n        response.data.data.is_document_verified\n      );\n      localStorage.setItem(\n        \"is_verified_badge\",\n        response.data.data.is_verified_badge\n          ? response.data.data.is_verified_badge\n          : 0\n      );\n      localStorage.setItem(\n        \"is_content_creator\",\n        response.data.data.is_content_creator\n      );\n      localStorage.setItem(\n        \"default_payment_method\",\n        response.data.data.default_payment_method\n      );\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/profile\");\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(updateUserDetailsFailure(response.data.error));\n    }\n  } catch (error) {\n    yield put(updateUserDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* userLoginAPI() {\n  try {\n    const userData = yield select((state) => state.users.loginInputData.data);\n\n    const response = yield api.postMethod(\"login\", userData);\n    yield put(userLoginSuccess(response.data));\n    if (response.data.success) {\n      if (response.data.code == 1001)\n        window.location.assign(\"/register/verify\");\n      else {\n        if(response.data.code == 240){\n          const notificationMessage = getSuccessNotificationMessage(\n            response.data.message\n          );\n          yield put(createNotification(notificationMessage));\n          window.location.assign(\"/verification\");\n          localStorage.setItem(\"emailId\", response.data.data.email);\n        }else{\n        localStorage.setItem(\"userLoginStatus\", true);\n        localStorage.setItem(\"user_picture\", response.data.data.picture);\n        localStorage.setItem(\"user_cover\", response.data.data.cover);\n        localStorage.setItem(\"name\", response.data.data.name);\n        localStorage.setItem(\"username\", response.data.data.username);\n        localStorage.setItem(\"socket\", true);\n        localStorage.setItem(\n          \"user_unique_id\",\n          response.data.data.user_unique_id\n        );\n        localStorage.setItem(\n          \"is_document_verified\",\n          response.data.data.is_document_verified\n        );\n        localStorage.setItem(\n          \"is_verified_badge\",\n          response.data.data.is_verified_badge\n            ? response.data.data.is_verified_badge\n            : 0\n        );\n        localStorage.setItem(\n          \"is_content_creator\",\n          response.data.data.is_content_creator\n        );\n        localStorage.setItem(\n          \"default_payment_method\",\n          response.data.data.default_payment_method\n        );\n        localStorage.setItem(\n          \"is_two_step_auth_enabled\",\n          response.data.data.is_two_step_auth_enabled\n        );\n        localStorage.setItem(\"emailId\", response.data.data.email);\n        const notificationMessage = getSuccessNotificationMessage(\n          response.data.message\n        );\n        yield put(createNotification(notificationMessage));\n        window.location.assign(\"/home\");\n        localStorage.setItem(\"userId\", response.data.data.user_id);\n        localStorage.setItem(\"accessToken\", response.data.data.token);\n        }\n      }\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(userLoginFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* userRegisterAPI() {\n  try {\n    const userData = yield select(\n      (state) => state.users.registerInputData.data\n    );\n    const response = yield api.postMethod(\"register\", userData);\n    yield put(userRegisterSuccess(response.data));\n\n    if (response.data.success) {\n      if (response.data.code == 1001)\n        window.location.assign(\"/register/verify\");\n      else {\n        localStorage.setItem(\"userId\", response.data.data.user_id);\n        localStorage.setItem(\"accessToken\", response.data.data.token);\n        localStorage.setItem(\"userLoginStatus\", true);\n        localStorage.setItem(\"user_picture\", response.data.data.picture);\n        localStorage.setItem(\"user_cover\", response.data.data.cover);\n        localStorage.setItem(\"username\", response.data.data.username);\n        localStorage.setItem(\"name\", response.data.data.name);\n        localStorage.setItem(\"socket\", true);\n        localStorage.setItem(\n          \"user_unique_id\",\n          response.data.data.user_unique_id\n        );\n        localStorage.setItem(\n          \"is_document_verified\",\n          response.data.data.is_document_verified\n        );\n        localStorage.setItem(\n          \"is_verified_badge\",\n          response.data.data.is_verified_badge\n            ? response.data.data.is_verified_badge\n            : 0\n        );\n        localStorage.setItem(\n          \"is_two_step_auth_enabled\",\n          response.data.data.is_two_step_auth_enabled\n        );\n        const notificationMessage = getSuccessNotificationMessage(\n          response.data.message\n        );\n        yield put(createNotification(notificationMessage));\n        if (response.data.data.is_welcome_steps == 1) {\n          window.location.assign(\"/upload-profile-picture\");\n        } else {\n          window.location.assign(\"/home\");\n        }\n      }\n      \n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(userRegisterFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* forgotPasswordAPI() {\n  try {\n    const userData = yield select(\n      (state) => state.users.forgotPasswordInputData.data\n    );\n\n    if (\n      !userData.email ||\n      userData.email == undefined ||\n      userData.email == null\n    ) {\n      const notificationMessage = getErrorNotificationMessage(\n        \"Please enter the email address\"\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(forgotPasswordFailure());\n    } else {\n      const response = yield api.postMethod(\"forgot_password\", userData);\n      yield put(forgotPasswordSuccess(response.data));\n      if (response.data.success) {\n        const notificationMessage = getSuccessNotificationMessage(\n          response.data.message\n        );\n        yield put(createNotification(notificationMessage));\n        window.location.assign(\"/\");\n      } else {\n        const notificationMessage = getErrorNotificationMessage(\n          response.data.error\n        );\n        yield put(createNotification(notificationMessage));\n      }\n    }\n  } catch (error) {\n    yield put(forgotPasswordFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* deleteAccountAPI() {\n  try {\n    const userData = yield select(\n      (state) => state.users.deleteAccount.inputData\n    );\n    const response = yield api.postMethod(\"delete_account\", userData);\n    yield put(deleteAccountSuccess(response.data));\n    if (response.data.success) {\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/\");\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(deleteAccountFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* registerVerify() {\n  try {\n    const inputData = yield select(\n      (state) => state.users.registerVerify.inputData\n    );\n\n    const response = yield api.postMethod(\"verify_email\", inputData);\n\n    if (response.data.success) {\n      yield put(registerVerifySuccess(response.data));\n      localStorage.setItem(\"userId\", response.data.data.user_id);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"accessToken\", response.data.data.token);\n      localStorage.setItem(\"userLoginStatus\", true);\n      localStorage.setItem(\"user_picture\", response.data.data.picture);\n      localStorage.setItem(\"username\", response.data.data.first_name);\n      localStorage.setItem(\n        \"is_verified_badge\",\n        response.data.data.is_verified_badge\n          ? response.data.data.is_verified_badge\n          : 0\n      );\n      localStorage.setItem(\"socket\", true);\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/welcome\");\n    } else {\n      yield put(registerVerifyFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(registerVerifyFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* registerVerifyResend() {\n  try {\n    const response = yield api.postMethod(\"regenerate_email_verification_code\");\n\n    if (response.data.success) {\n      yield put(registerVerifyResendSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(registerVerifyResendFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(registerVerifyResendFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* notificationStatusUpdateAPI() {\n  try {\n    const userData = yield select(\n      (state) => state.users.notificationUpdate.inputData\n    );\n    const response = yield api.postMethod(\n      \"notifications_status_update\",\n      userData\n    );\n    if (response.data.success) {\n      yield put(notificationStatusUpdateSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(notificationStatusUpdateFailure(response.data.error));\n    }\n  } catch (error) {\n    yield put(notificationStatusUpdateFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* verificationBadgeStatusUpdateAPI() {\n  try {\n    const userData = yield select(\n      (state) => state.users.verifyBadgeUpdate.inputData\n    );\n    const response = yield api.postMethod(\"verified_badge_status\", userData);\n    if (response.data.success) {\n      yield put(notificationStatusUpdateSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      localStorage.setItem(\n        \"is_verified_badge\",\n        response.data.data.is_verified_badge\n          ? response.data.data.is_verified_badge\n          : 0\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(notificationStatusUpdateFailure(response.data.error));\n    }\n  } catch (error) {\n    yield put(notificationStatusUpdateFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* getPaymentsAPI() {\n  try {\n    const response = yield api.postMethod(\"payments_index\");\n\n    if (response.data.success) {\n      yield put(fetchPaymentsSuccess(response.data));\n    } else {\n      yield put(fetchPaymentsFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchPaymentsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchBlockUsersAPI() {\n  try {\n    const response = yield api.postMethod(\"block_users\");\n    if (response.data.success) {\n      yield put(fetchBlockUsersSuccess(response.data.data));\n    } else {\n      yield put(fetchBlockUsersFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchBlockUsersFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* saveBlockUserAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.users.saveBlockUser.inputData\n    );\n    const response = yield api.postMethod(\"block_users_save\", inputData);\n    if (response.data.success) {\n      yield put(saveBlockUserSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n\n      localStorage.setItem(\n        \"total_followers\",\n        response.data.data.total_followers\n      );\n      localStorage.setItem(\n        \"total_followings\",\n        response.data.data.total_followings\n      );\n\n      if (inputData.is_other_profile == 1) {\n        window.location.reload();\n      }\n    } else {\n      yield put(saveBlockUserFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(saveBlockUserFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* resetPasswordAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.users.resetPasswordInputData.inputData\n    );\n    const response = yield api.postMethod(\"reset_password\", inputData);\n    yield put(resetPasswordSuccess(response.data));\n    if (response.data.success) {\n      localStorage.setItem(\"userLoginStatus\", true);\n      localStorage.setItem(\"user_picture\", response.data.data.picture);\n      localStorage.setItem(\"user_cover\", response.data.data.cover);\n      localStorage.setItem(\"name\", response.data.data.name);\n      localStorage.setItem(\"username\", response.data.data.username);\n      localStorage.setItem(\"socket\", true);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\n        \"is_document_verified\",\n        response.data.data.is_document_verified\n      );\n      localStorage.setItem(\n        \"is_verified_badge\",\n        response.data.data.is_verified_badge\n          ? response.data.data.is_verified_badge\n          : 0\n      );\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      localStorage.setItem(\"userId\", response.data.data.user_id);\n      localStorage.setItem(\"accessToken\", response.data.data.token);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(\"/home\");\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(resetPasswordFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* usernameValidationAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.users.validationInputData.data\n    );\n    const response = yield api.postMethod(\"username_validation\", inputData);\n    yield put(usernameValidationSuccess(response.data));\n    if (response.data.success) {\n    } else {\n      yield put(usernameValidationFailure(response));\n      // const notificationMessage = getErrorNotificationMessage(\n      //   response.data.error\n      // );\n      // yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(usernameValidationFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* referralValidationAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.users.referralInputData.data\n    );\n    const response = yield api.postMethod(\"referral_code_validate\", inputData);\n    yield put(referralValidationSuccess(response.data));\n    if (response.data.success) {\n\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      \n    } else {\n      yield put(referralValidationFailure(response));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(referralValidationFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* getContentCreatorDashboardAPI() {\n  try {\n    const response = yield api.postMethod(\"content_creators_dashboard\");\n\n    if (response.data.success) {\n      yield put(fetchContentCreatorDashboardSuccess(response.data));\n    } else {\n      yield put(fetchContentCreatorDashboardFailure(response.data.error));\n      yield put(checkLogoutStatus(response.data));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchContentCreatorDashboardFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* updateUserSubscriptionDetailsAPI() {\n  try {\n    const userData = yield select((state) => state.users.profileSubscriptionInputData.data);\n    const response = yield api.postMethod(\"update_profile\", userData);\n    if (response.data.success) {\n      yield put(updateUserDetailsSuccess(response.data));\n      localStorage.setItem(\"user_picture\", response.data.data.picture);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\"user_cover\", response.data.data.cover);\n      localStorage.setItem(\"name\", response.data.data.name);\n      localStorage.setItem(\"username\", response.data.data.username);\n      localStorage.setItem(\"user_unique_id\", response.data.data.user_unique_id);\n      localStorage.setItem(\n        \"is_document_verified\",\n        response.data.data.is_document_verified\n      );\n      localStorage.setItem(\n        \"is_verified_badge\",\n        response.data.data.is_verified_badge\n          ? response.data.data.is_verified_badge\n          : 0\n      );\n      localStorage.setItem(\n        \"is_content_creator\",\n        response.data.data.is_content_creator\n      );\n      localStorage.setItem(\n        \"default_payment_method\",\n        response.data.data.default_payment_method\n      );\n      const notificationMessage = getSuccessNotificationMessage(\"User Subscription Details Updated\");\n      yield put(createNotification(notificationMessage));\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(updateUserDetailsFailure(response.data.error));\n    }\n  } catch (error) {\n    yield put(updateUserDetailsFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* twoStepAuthenticationUpdateAPI(action) {\n  try {\n    const response = yield api.postMethod(\"two_step_auth_update\" , action.data);\n\n    if (response.data.success) {\n      yield put(twoStepAuthUpdateSuccess(response.data));\n      localStorage.setItem(\n        \"is_two_step_auth_enabled\",\n        response.data.data.is_two_step_auth_enabled\n      );\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(twoStepAuthUpdateFAilure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(twoStepAuthUpdateFAilure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* twoStepAuthenticationLoginAPI(action) {\n  try {\n    const response = yield api.postMethod(\"two_step_auth_login\", action.data);\n    yield put(twoStepAuthenticationLoginSuccess(response.data));\n    if (response.data.success) {\n      if (response.data.code == 1001)\n        window.location.assign(\"/register/verify\");\n      else {\n        localStorage.setItem(\"userLoginStatus\", true);\n        localStorage.setItem(\"user_picture\", response.data.data.picture);\n        localStorage.setItem(\"user_cover\", response.data.data.cover);\n        localStorage.setItem(\"name\", response.data.data.name);\n        localStorage.setItem(\"username\", response.data.data.username);\n        localStorage.setItem(\"socket\", true);\n        localStorage.setItem(\n          \"user_unique_id\",\n          response.data.data.user_unique_id\n        );\n        localStorage.setItem(\n          \"is_document_verified\",\n          response.data.data.is_document_verified\n        );\n        localStorage.setItem(\n          \"is_verified_badge\",\n          response.data.data.is_verified_badge\n            ? response.data.data.is_verified_badge\n            : 0\n        );\n        localStorage.setItem(\n          \"is_content_creator\",\n          response.data.data.is_content_creator\n        );\n        localStorage.setItem(\n          \"default_payment_method\",\n          response.data.data.default_payment_method\n        );\n        localStorage.setItem(\n          \"is_two_step_auth_enabled\",\n          response.data.data.is_two_step_auth_enabled\n        );\n        const notificationMessage = getSuccessNotificationMessage(\n          response.data.message\n        );\n        localStorage.setItem(\"emailId\", response.data.data.email);\n        yield put(createNotification(notificationMessage));\n        window.location.assign(\"/home\");\n        localStorage.setItem(\"userId\", response.data.data.user_id);\n        localStorage.setItem(\"accessToken\", response.data.data.token);\n      }\n    } else {\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n      yield put(twoStepAuthenticationLoginFailure(response.data.error));\n    }\n  } catch (error) {\n    yield put(twoStepAuthenticationLoginFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* twoStepAuthenticationCodeResendAPI(action) {\n  try {\n    const response = yield api.postMethod(\"two_step_auth_resend_code\" , action.data);\n\n    if (response.data.success) {\n      yield put(twoStepAuthenticationCodeResendSuccess(response.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n    } else {\n      yield put(twoStepAuthenticationCodeResendFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(twoStepAuthenticationCodeResendFailure(error));\n    const notificationMessage = getErrorNotificationMessage(\n      error.response.data.error\n    );\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([\n    yield takeLatest(FETCH_USER_DETAILS_START, getUserDetailsAPI),\n    yield takeLatest(UPDATE_USER_DETAILS_START, updateUserDetailsAPI),\n    yield takeLatest(UPDATE_USER_SUBSCRIPTION_DETAILS_START, updateUserSubscriptionDetailsAPI),\n    yield takeLatest(LOGIN_START, userLoginAPI),\n    yield takeLatest(REGISTER_START, userRegisterAPI),\n    yield takeLatest(FORGOT_PASSWORD_START, forgotPasswordAPI),\n    yield takeLatest(DELETE_ACCOUNT_START, deleteAccountAPI),\n    yield takeLatest(REGISTER_VERIFY_START, registerVerify),\n    yield takeLatest(REGISTER_VERIFY_RESEND_START, registerVerifyResend),\n    yield takeLatest(\n      NOTIFICATION_STATUS_UPDATE_START,\n      notificationStatusUpdateAPI\n    ),\n    yield takeLatest(FETCH_PAYMENTS_START, getPaymentsAPI),\n    yield takeLatest(FETCH_BLOCK_USERS_START, fetchBlockUsersAPI),\n    yield takeLatest(SAVE_BLOCK_USER_START, saveBlockUserAPI),\n    yield takeLatest(\n      USER_VERIFY_BADGE_STATUS_START,\n      verificationBadgeStatusUpdateAPI\n    ),\n    yield takeLatest(RESET_PASSWORD_START, resetPasswordAPI),\n    yield takeLatest(USERNAME_VALIDATION_START, usernameValidationAPI),\n    yield takeLatest(REFERRAL_VALIDATION_START, referralValidationAPI),\n    yield takeLatest(FETCH_CONTENT_CREATOR_DASHBOARD_START, getContentCreatorDashboardAPI),\n    yield takeLatest(TWO_STEP_AUTH_UPDATE_START, twoStepAuthenticationUpdateAPI),\n    yield takeLatest(TWO_STEP_AUTHENTICATION_LOGIN_START, twoStepAuthenticationLoginAPI),\n    yield takeLatest(TWO_STEP_AUTHENTICATION_CODE_RESEND_START, twoStepAuthenticationCodeResendAPI)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}