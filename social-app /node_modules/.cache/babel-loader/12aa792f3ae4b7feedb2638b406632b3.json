{"ast":null,"code":"import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport { videoCallBroadcastFailure, videoCallBroadcastSuccess, fetchLiveVideosSuccess, fetchLiveVideosFailure, fetchLiveVideosHistorySuccess, fetchLiveVideosHistoryFailure, fetchSingleLiveVideoSuccess, fetchSingleLiveVideoFailure, joinLiveVideosSuccess, joinLiveVideosFailure, livePaymentPaypalSuccess, livePaymentPaypalFailure, livePaymentStripeSuccess, livePaymentStripeFailure, liveViewerUpdateSuccess, liveViewerUpdateFailure, liveVideoEndSuccess, liveVideoEndFailure, livePaymentWalletSuccess, livePaymentWalletFailure } from \"../actions/LiveVideoAction\";\nimport { VIDEO_CALL_BROADCAST_START, FETCH_LIVE_VIDEOS_START, FETCH_LIVE_VIDEOS_HISTORY_START, JOIN_LIVE_VIDEOS_START, FETCH_SINGLE_LIVE_VIDEOS_START, LIVE_VIDEOS_PAYMENT_BY_STRIPE_START, LIVE_VIDEOS_PAYMENT_BY_PAYPAL_START, LIVE_VIDEOS_VIEWER_UPDATE_START, LIVE_VIDEOS_END_START, LIVE_VIDEOS_PAYMENT_BY_WALLET_START } from \"../actions/ActionConstant\";\nimport { checkLogoutStatus } from \"../actions/ErrorAction\";\n\nfunction* liveVideoSaveAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.saveLiveVideo.inputData);\n    const response = yield api.postMethod(\"live_videos_broadcast_start\", inputData);\n\n    if (response.data.success) {\n      yield put(videoCallBroadcastSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin + \"/join/\" + response.data.data.live_video_unique_id);\n    } else {\n      yield put(videoCallBroadcastFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallBroadcastFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveVideosAPI() {\n  try {\n    const skipCount = yield select(state => state.liveVideo.liveVideos.skip);\n    const response = yield api.postMethod(\"live_videos\", {\n      skip: skipCount\n    });\n\n    if (response.data.success) {\n      yield put(fetchLiveVideosSuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideosFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideosFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveVideosHistoryAPI() {\n  try {\n    const skipCount = yield select(state => state.liveVideo.liveVideosHistory.skip);\n    const response = yield api.postMethod(\"live_videos_owner_list\", {\n      skip: skipCount\n    });\n\n    if (response.data.success) {\n      yield put(fetchLiveVideosHistorySuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideosHistoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideosHistoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSingleLiveVideoAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.singleLiveVideo.inputData);\n    const response = yield api.postMethod(\"live_videos_view\", inputData);\n\n    if (response.data.success) {\n      yield put(fetchSingleLiveVideoSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleLiveVideoFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleLiveVideoFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveStripeAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.liveStripe.inputData);\n    const response = yield api.postMethod(\"live_videos_payment_by_card\", inputData);\n\n    if (response.data.success) {\n      yield put(livePaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin + \"/live-video/\" + response.data.data.live_video_unique_id);\n    } else {\n      yield put(livePaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* livePaypalAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.livePaypal.inputData);\n    const response = yield api.postMethod(\"live_videos_payment_by_paypal\", inputData);\n\n    if (response.data.success) {\n      yield put(livePaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin + \"/live-video/\" + response.data.data.live_video_unique_id);\n    } else {\n      yield put(livePaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveViewerUpdateAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.liveViewerUpdate.inputData);\n    const response = yield api.postMethod(\"live_videos_viewer_update\", inputData);\n\n    if (response.data.success) {\n      yield put(liveViewerUpdateSuccess(response.data.data)); // const notificationMessage = getSuccessNotificationMessage(\n      //   response.data.message\n      // );\n      // yield put(createNotification(notificationMessage));\n    } else {\n      yield put(liveViewerUpdateFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(liveViewerUpdateFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveEndAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.liveEnd.inputData);\n    const response = yield api.postMethod(\"live_videos_broadcast_stop\", inputData);\n\n    if (response.data.success) {\n      yield put(liveVideoEndSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin + \"/live-videos\");\n    } else {\n      yield put(liveVideoEndFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(liveVideoEndFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveWalletAPI() {\n  try {\n    const inputData = yield select(state => state.liveVideo.liveWallet.inputData);\n    const response = yield api.postMethod(\"live_videos_payment_by_wallet\", inputData);\n\n    if (response.data.success) {\n      yield put(livePaymentWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(response.data.message);\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin + \"/live-video/\" + response.data.data.live_video_unique_id);\n    } else {\n      yield put(livePaymentWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(response.data.error);\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(VIDEO_CALL_BROADCAST_START, liveVideoSaveAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_VIDEOS_START, liveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_VIDEOS_HISTORY_START, liveVideosHistoryAPI)]); // yield all([yield takeLatest(JOIN_LIVE_VIDEOS_START, joinLiveVideosAPI)]);\n\n  yield all([yield takeLatest(FETCH_SINGLE_LIVE_VIDEOS_START, fetchSingleLiveVideoAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_STRIPE_START, liveStripeAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_PAYPAL_START, livePaypalAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_VIEWER_UPDATE_START, liveViewerUpdateAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_END_START, liveEndAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_WALLET_START, liveWalletAPI)]);\n}","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/store/sagas/LiveVideoSaga.jsx"],"names":["call","select","put","takeLatest","all","api","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","videoCallBroadcastFailure","videoCallBroadcastSuccess","fetchLiveVideosSuccess","fetchLiveVideosFailure","fetchLiveVideosHistorySuccess","fetchLiveVideosHistoryFailure","fetchSingleLiveVideoSuccess","fetchSingleLiveVideoFailure","joinLiveVideosSuccess","joinLiveVideosFailure","livePaymentPaypalSuccess","livePaymentPaypalFailure","livePaymentStripeSuccess","livePaymentStripeFailure","liveViewerUpdateSuccess","liveViewerUpdateFailure","liveVideoEndSuccess","liveVideoEndFailure","livePaymentWalletSuccess","livePaymentWalletFailure","VIDEO_CALL_BROADCAST_START","FETCH_LIVE_VIDEOS_START","FETCH_LIVE_VIDEOS_HISTORY_START","JOIN_LIVE_VIDEOS_START","FETCH_SINGLE_LIVE_VIDEOS_START","LIVE_VIDEOS_PAYMENT_BY_STRIPE_START","LIVE_VIDEOS_PAYMENT_BY_PAYPAL_START","LIVE_VIDEOS_VIEWER_UPDATE_START","LIVE_VIDEOS_END_START","LIVE_VIDEOS_PAYMENT_BY_WALLET_START","checkLogoutStatus","liveVideoSaveAPI","inputData","state","liveVideo","saveLiveVideo","response","postMethod","data","success","notificationMessage","message","window","location","assign","origin","live_video_unique_id","error","liveVideosAPI","skipCount","liveVideos","skip","liveVideosHistoryAPI","liveVideosHistory","fetchSingleLiveVideoAPI","singleLiveVideo","liveStripeAPI","liveStripe","livePaypalAPI","livePaypal","liveViewerUpdateAPI","liveViewerUpdate","liveEndAPI","liveEnd","liveWalletAPI","liveWallet","pageSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,UAA5B,EAAwCC,GAAxC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SACEC,6BADF,EAEEC,2BAFF,QAGO,6CAHP;AAIA,SACIC,yBADJ,EAEIC,yBAFJ,EAGIC,sBAHJ,EAIIC,sBAJJ,EAKIC,6BALJ,EAMIC,6BANJ,EAOIC,2BAPJ,EAQIC,2BARJ,EASIC,qBATJ,EAUIC,qBAVJ,EAWIC,wBAXJ,EAYIC,wBAZJ,EAaIC,wBAbJ,EAcIC,wBAdJ,EAeIC,uBAfJ,EAgBIC,uBAhBJ,EAiBIC,mBAjBJ,EAkBIC,mBAlBJ,EAmBIC,wBAnBJ,EAoBIC,wBApBJ,QAqBO,4BArBP;AAsBA,SACIC,0BADJ,EAEIC,uBAFJ,EAGIC,+BAHJ,EAIIC,sBAJJ,EAKIC,8BALJ,EAMIC,mCANJ,EAOIC,mCAPJ,EAQIC,+BARJ,EASIC,qBATJ,EAUIC,mCAVJ,QAWO,2BAXP;AAaA,SACEC,iBADF,QAEO,wBAFP;;AAIA,UAAUC,gBAAV,GAA6B;AAC3B,MAAI;AACF,UAAMC,SAAS,GAAG,MAAMxC,MAAM,CAAEyC,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBC,aAAhB,CAA8BH,SAA1C,CAA9B;AACA,UAAMI,QAAQ,GAAG,MAAMxC,GAAG,CAACyC,UAAJ,CAAe,6BAAf,EAA8CL,SAA9C,CAAvB;;AACA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM9C,GAAG,CAACQ,yBAAyB,CAACmC,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAA1B,CAAT;AACA,YAAME,mBAAmB,GAAG1C,6BAA6B,CACvDsC,QAAQ,CAACE,IAAT,CAAcG,OADyC,CAAzD;AAGA,YAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACAE,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBF,MAAM,CAACC,QAAP,CAAgBE,MAAhB,GAAwB,QAAxB,GAAkCT,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,oBAA5E;AACD,KAPD,MAOO;AACL,YAAMrD,GAAG,CAACO,yBAAyB,CAACoC,QAAQ,CAACE,IAAT,CAAcS,KAAf,CAA1B,CAAT;AACA,YAAMP,mBAAmB,GAAGzC,2BAA2B,CACrDqC,QAAQ,CAACE,IAAT,CAAcS,KADuC,CAAvD;AAGA,YAAMtD,GAAG,CAACqC,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM7C,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF,GAlBD,CAkBE,OAAOO,KAAP,EAAc;AACd,UAAMtD,GAAG,CAACO,yBAAyB,CAAC+C,KAAD,CAA1B,CAAT;AACA,UAAMP,mBAAmB,GAAGzC,2BAA2B,CAACgD,KAAK,CAACN,OAAP,CAAvD;AACA,UAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUQ,aAAV,GAA0B;AACxB,MAAI;AACF,UAAMC,SAAS,GAAG,MAAMzD,MAAM,CAAEyC,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBgB,UAAhB,CAA2BC,IAAvC,CAA9B;AACA,UAAMf,QAAQ,GAAG,MAAMxC,GAAG,CAACyC,UAAJ,CAAe,aAAf,EAA8B;AACnDc,MAAAA,IAAI,EAAEF;AAD6C,KAA9B,CAAvB;;AAGA,QAAIb,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM9C,GAAG,CAACS,sBAAsB,CAACkC,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAvB,CAAT;AACD,KAFD,MAEO;AACL,YAAM7C,GAAG,CAACU,sBAAsB,CAACiC,QAAQ,CAACE,IAAT,CAAcS,KAAf,CAAvB,CAAT;AACA,YAAMP,mBAAmB,GAAGzC,2BAA2B,CACrDqC,QAAQ,CAACE,IAAT,CAAcS,KADuC,CAAvD;AAGA,YAAMtD,GAAG,CAACqC,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM7C,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF,GAfD,CAeE,OAAOO,KAAP,EAAc;AACd,UAAMtD,GAAG,CAACU,sBAAsB,CAAC4C,KAAD,CAAvB,CAAT;AACA,UAAMP,mBAAmB,GAAGzC,2BAA2B,CAACgD,KAAK,CAACN,OAAP,CAAvD;AACA,UAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUY,oBAAV,GAAiC;AAC/B,MAAI;AACF,UAAMH,SAAS,GAAG,MAAMzD,MAAM,CAAEyC,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBmB,iBAAhB,CAAkCF,IAA9C,CAA9B;AACA,UAAMf,QAAQ,GAAG,MAAMxC,GAAG,CAACyC,UAAJ,CAAe,wBAAf,EAAyC;AAC9Dc,MAAAA,IAAI,EAAEF;AADwD,KAAzC,CAAvB;;AAGA,QAAIb,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM9C,GAAG,CAACW,6BAA6B,CAACgC,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAA9B,CAAT;AACD,KAFD,MAEO;AACL,YAAM7C,GAAG,CAACY,6BAA6B,CAAC+B,QAAQ,CAACE,IAAT,CAAcS,KAAf,CAA9B,CAAT;AACA,YAAMP,mBAAmB,GAAGzC,2BAA2B,CACrDqC,QAAQ,CAACE,IAAT,CAAcS,KADuC,CAAvD;AAGA,YAAMtD,GAAG,CAACqC,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM7C,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF,GAfD,CAeE,OAAOO,KAAP,EAAc;AACd,UAAMtD,GAAG,CAACY,6BAA6B,CAAC0C,KAAD,CAA9B,CAAT;AACA,UAAMP,mBAAmB,GAAGzC,2BAA2B,CAACgD,KAAK,CAACN,OAAP,CAAvD;AACA,UAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUc,uBAAV,GAAoC;AAClC,MAAI;AACF,UAAMtB,SAAS,GAAG,MAAMxC,MAAM,CAC3ByC,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBqB,eAAhB,CAAgCvB,SADf,CAA9B;AAGA,UAAMI,QAAQ,GAAG,MAAMxC,GAAG,CAACyC,UAAJ,CAAe,kBAAf,EAAmCL,SAAnC,CAAvB;;AACA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM9C,GAAG,CAACa,2BAA2B,CAAC8B,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAA5B,CAAT;AACD,KAFD,MAEO;AACL,YAAM7C,GAAG,CAACc,2BAA2B,CAAC6B,QAAQ,CAACE,IAAT,CAAcS,KAAf,CAA5B,CAAT;AACA,YAAMP,mBAAmB,GAAGzC,2BAA2B,CACrDqC,QAAQ,CAACE,IAAT,CAAcS,KADuC,CAAvD;AAGA,YAAMtD,GAAG,CAACqC,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM7C,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF,GAfD,CAeE,OAAOO,KAAP,EAAc;AACd,UAAMtD,GAAG,CAACc,2BAA2B,CAACwC,KAAD,CAA5B,CAAT;AACA,UAAMP,mBAAmB,GAAGzC,2BAA2B,CAACgD,KAAK,CAACN,OAAP,CAAvD;AACA,UAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUgB,aAAV,GAA0B;AACxB,MAAI;AACF,UAAMxB,SAAS,GAAG,MAAMxC,MAAM,CAC3ByC,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBuB,UAAhB,CAA2BzB,SADV,CAA9B;AAGA,UAAMI,QAAQ,GAAG,MAAMxC,GAAG,CAACyC,UAAJ,CACrB,6BADqB,EAErBL,SAFqB,CAAvB;;AAIA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM9C,GAAG,CAACmB,wBAAwB,CAACwB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAzB,CAAT;AACA,YAAME,mBAAmB,GAAG1C,6BAA6B,CACvDsC,QAAQ,CAACE,IAAT,CAAcG,OADyC,CAAzD;AAGA,YAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACAE,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBF,MAAM,CAACC,QAAP,CAAgBE,MAAhB,GAAwB,cAAxB,GACrBT,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,oBADrB;AAED,KARD,MAQO;AACL,YAAMrD,GAAG,CAACoB,wBAAwB,CAACuB,QAAQ,CAACE,IAAT,CAAcS,KAAf,CAAzB,CAAT;AACA,YAAMP,mBAAmB,GAAGzC,2BAA2B,CACrDqC,QAAQ,CAACE,IAAT,CAAcS,KADuC,CAAvD;AAGA,YAAMtD,GAAG,CAACqC,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM7C,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF,GAxBD,CAwBE,OAAOO,KAAP,EAAc;AACd,UAAMtD,GAAG,CAACoB,wBAAwB,CAACkC,KAAD,CAAzB,CAAT;AACA,UAAMP,mBAAmB,GAAGzC,2BAA2B,CAACgD,KAAK,CAACN,OAAP,CAAvD;AACA,UAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUkB,aAAV,GAA0B;AACxB,MAAI;AACF,UAAM1B,SAAS,GAAG,MAAMxC,MAAM,CAC3ByC,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgByB,UAAhB,CAA2B3B,SADV,CAA9B;AAGA,UAAMI,QAAQ,GAAG,MAAMxC,GAAG,CAACyC,UAAJ,CACrB,+BADqB,EAErBL,SAFqB,CAAvB;;AAIA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM9C,GAAG,CAACiB,wBAAwB,CAAC0B,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAzB,CAAT;AACA,YAAME,mBAAmB,GAAG1C,6BAA6B,CACvDsC,QAAQ,CAACE,IAAT,CAAcG,OADyC,CAAzD;AAGA,YAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AAEAE,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBF,MAAM,CAACC,QAAP,CAAgBE,MAAhB,GAAwB,cAAxB,GACrBT,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,oBADrB;AAGD,KAVD,MAUO;AACL,YAAMrD,GAAG,CAACkB,wBAAwB,CAACyB,QAAQ,CAACE,IAAT,CAAcS,KAAf,CAAzB,CAAT;AACA,YAAMP,mBAAmB,GAAGzC,2BAA2B,CACrDqC,QAAQ,CAACE,IAAT,CAAcS,KADuC,CAAvD;AAGA,YAAMtD,GAAG,CAACqC,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM7C,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF,GA1BD,CA0BE,OAAOO,KAAP,EAAc;AACd,UAAMtD,GAAG,CAACkB,wBAAwB,CAACoC,KAAD,CAAzB,CAAT;AACA,UAAMP,mBAAmB,GAAGzC,2BAA2B,CAACgD,KAAK,CAACN,OAAP,CAAvD;AACA,UAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUoB,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAM5B,SAAS,GAAG,MAAMxC,MAAM,CAC3ByC,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgB2B,gBAAhB,CAAiC7B,SADhB,CAA9B;AAGA,UAAMI,QAAQ,GAAG,MAAMxC,GAAG,CAACyC,UAAJ,CACrB,2BADqB,EAErBL,SAFqB,CAAvB;;AAIA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM9C,GAAG,CAACqB,uBAAuB,CAACsB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAxB,CAAT,CADyB,CAEzB;AACA;AACA;AACA;AAED,KAPD,MAOO;AACL,YAAM7C,GAAG,CAACsB,uBAAuB,CAACqB,QAAQ,CAACE,IAAT,CAAcS,KAAf,CAAxB,CAAT;AACA,YAAMP,mBAAmB,GAAGzC,2BAA2B,CACrDqC,QAAQ,CAACE,IAAT,CAAcS,KADuC,CAAvD;AAGA,YAAMtD,GAAG,CAACqC,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM7C,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF,GAvBD,CAuBE,OAAOO,KAAP,EAAc;AACd,UAAMtD,GAAG,CAACsB,uBAAuB,CAACgC,KAAD,CAAxB,CAAT;AACA,UAAMP,mBAAmB,GAAGzC,2BAA2B,CAACgD,KAAK,CAACN,OAAP,CAAvD;AACA,UAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUsB,UAAV,GAAuB;AACrB,MAAI;AACF,UAAM9B,SAAS,GAAG,MAAMxC,MAAM,CAC3ByC,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgB6B,OAAhB,CAAwB/B,SADP,CAA9B;AAGA,UAAMI,QAAQ,GAAG,MAAMxC,GAAG,CAACyC,UAAJ,CACrB,4BADqB,EAErBL,SAFqB,CAAvB;;AAIA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM9C,GAAG,CAACuB,mBAAmB,CAACoB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAApB,CAAT;AACA,YAAME,mBAAmB,GAAG1C,6BAA6B,CACvDsC,QAAQ,CAACE,IAAT,CAAcG,OADyC,CAAzD;AAGA,YAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AAEAE,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBF,MAAM,CAACC,QAAP,CAAgBE,MAAhB,GAAwB,cAA/C;AAED,KATD,MASO;AACL,YAAMpD,GAAG,CAACwB,mBAAmB,CAACmB,QAAQ,CAACE,IAAT,CAAcS,KAAf,CAApB,CAAT;AACA,YAAMP,mBAAmB,GAAGzC,2BAA2B,CACrDqC,QAAQ,CAACE,IAAT,CAAcS,KADuC,CAAvD;AAGA,YAAMtD,GAAG,CAACqC,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM7C,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF,GAzBD,CAyBE,OAAOO,KAAP,EAAc;AACd,UAAMtD,GAAG,CAACwB,mBAAmB,CAAC8B,KAAD,CAApB,CAAT;AACA,UAAMP,mBAAmB,GAAGzC,2BAA2B,CAACgD,KAAK,CAACN,OAAP,CAAvD;AACA,UAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAED,UAAUwB,aAAV,GAA0B;AACxB,MAAI;AACF,UAAMhC,SAAS,GAAG,MAAMxC,MAAM,CAC3ByC,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgB+B,UAAhB,CAA2BjC,SADV,CAA9B;AAGA,UAAMI,QAAQ,GAAG,MAAMxC,GAAG,CAACyC,UAAJ,CACrB,+BADqB,EAErBL,SAFqB,CAAvB;;AAIA,QAAII,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;AACzB,YAAM9C,GAAG,CAACyB,wBAAwB,CAACkB,QAAQ,CAACE,IAAT,CAAcA,IAAf,CAAzB,CAAT;AACA,YAAME,mBAAmB,GAAG1C,6BAA6B,CACvDsC,QAAQ,CAACE,IAAT,CAAcG,OADyC,CAAzD;AAGA,YAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACAE,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBF,MAAM,CAACC,QAAP,CAAgBE,MAAhB,GAAwB,cAAxB,GAAwCT,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,oBAAlF;AAED,KARD,MAQO;AACL,YAAMrD,GAAG,CAAC0B,wBAAwB,CAACiB,QAAQ,CAACE,IAAT,CAAcS,KAAf,CAAzB,CAAT;AACA,YAAMP,mBAAmB,GAAGzC,2BAA2B,CACrDqC,QAAQ,CAACE,IAAT,CAAcS,KADuC,CAAvD;AAGA,YAAMtD,GAAG,CAACqC,iBAAiB,CAACM,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACA,YAAM7C,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF,GAxBD,CAwBE,OAAOO,KAAP,EAAc;AACd,UAAMtD,GAAG,CAAC0B,wBAAwB,CAAC4B,KAAD,CAAzB,CAAT;AACA,UAAMP,mBAAmB,GAAGzC,2BAA2B,CAACgD,KAAK,CAACN,OAAP,CAAvD;AACA,UAAMhD,GAAG,CAACI,kBAAkB,CAAC2C,mBAAD,CAAnB,CAAT;AACD;AACF;;AAGD,eAAe,UAAU0B,QAAV,GAAqB;AAClC,QAAMvE,GAAG,CAAC,CAAC,MAAMD,UAAU,CAAC0B,0BAAD,EAA6BW,gBAA7B,CAAjB,CAAD,CAAT;AACA,QAAMpC,GAAG,CAAC,CAAC,MAAMD,UAAU,CAAC2B,uBAAD,EAA0B2B,aAA1B,CAAjB,CAAD,CAAT;AACA,QAAMrD,GAAG,CAAC,CAAC,MAAMD,UAAU,CAAC4B,+BAAD,EAAkC8B,oBAAlC,CAAjB,CAAD,CAAT,CAHkC,CAIlC;;AACA,QAAMzD,GAAG,CAAC,CAAC,MAAMD,UAAU,CAAC8B,8BAAD,EAAiC8B,uBAAjC,CAAjB,CAAD,CAAT;AACA,QAAM3D,GAAG,CAAC,CAAC,MAAMD,UAAU,CAAC+B,mCAAD,EAAsC+B,aAAtC,CAAjB,CAAD,CAAT;AACA,QAAM7D,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACgC,mCAAD,EAAsCgC,aAAtC,CAAjB,CAAD,CAAT;AACA,QAAM/D,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACiC,+BAAD,EAAkCiC,mBAAlC,CAAjB,CAAD,CAAT;AACA,QAAMjE,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACkC,qBAAD,EAAwBkC,UAAxB,CAAjB,CAAD,CAAT;AACA,QAAMnE,GAAG,CAAC,CAAC,MAAMD,UAAU,CAACmC,mCAAD,EAAsCmC,aAAtC,CAAjB,CAAD,CAAT;AACD","sourcesContent":["import { call, select, put, takeLatest, all } from \"redux-saga/effects\";\nimport api from \"../../Environment\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport {\n    videoCallBroadcastFailure,\n    videoCallBroadcastSuccess,\n    fetchLiveVideosSuccess,\n    fetchLiveVideosFailure,\n    fetchLiveVideosHistorySuccess,\n    fetchLiveVideosHistoryFailure,\n    fetchSingleLiveVideoSuccess,\n    fetchSingleLiveVideoFailure,\n    joinLiveVideosSuccess,\n    joinLiveVideosFailure,\n    livePaymentPaypalSuccess,\n    livePaymentPaypalFailure,\n    livePaymentStripeSuccess,\n    livePaymentStripeFailure,\n    liveViewerUpdateSuccess,\n    liveViewerUpdateFailure,\n    liveVideoEndSuccess,\n    liveVideoEndFailure,\n    livePaymentWalletSuccess,\n    livePaymentWalletFailure,\n} from \"../actions/LiveVideoAction\";\nimport {\n    VIDEO_CALL_BROADCAST_START,\n    FETCH_LIVE_VIDEOS_START,\n    FETCH_LIVE_VIDEOS_HISTORY_START,\n    JOIN_LIVE_VIDEOS_START,\n    FETCH_SINGLE_LIVE_VIDEOS_START,\n    LIVE_VIDEOS_PAYMENT_BY_STRIPE_START,\n    LIVE_VIDEOS_PAYMENT_BY_PAYPAL_START,\n    LIVE_VIDEOS_VIEWER_UPDATE_START,\n    LIVE_VIDEOS_END_START,\n    LIVE_VIDEOS_PAYMENT_BY_WALLET_START,\n} from \"../actions/ActionConstant\";\n\nimport {\n  checkLogoutStatus,\n} from \"../actions/ErrorAction\";\n\nfunction* liveVideoSaveAPI() {\n  try {\n    const inputData = yield select((state) => state.liveVideo.saveLiveVideo.inputData);\n    const response = yield api.postMethod(\"live_videos_broadcast_start\", inputData);\n    if (response.data.success) {\n      yield put(videoCallBroadcastSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin +\"/join/\" +response.data.data.live_video_unique_id);\n    } else {\n      yield put(videoCallBroadcastFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(videoCallBroadcastFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveVideosAPI() {\n  try {\n    const skipCount = yield select((state) => state.liveVideo.liveVideos.skip);\n    const response = yield api.postMethod(\"live_videos\", {\n      skip: skipCount,\n    });\n    if (response.data.success) {\n      yield put(fetchLiveVideosSuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideosFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideosFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveVideosHistoryAPI() {\n  try {\n    const skipCount = yield select((state) => state.liveVideo.liveVideosHistory.skip);\n    const response = yield api.postMethod(\"live_videos_owner_list\", {\n      skip: skipCount,\n    });\n    if (response.data.success) {\n      yield put(fetchLiveVideosHistorySuccess(response.data.data));\n    } else {\n      yield put(fetchLiveVideosHistoryFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchLiveVideosHistoryFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* fetchSingleLiveVideoAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.singleLiveVideo.inputData\n    );\n    const response = yield api.postMethod(\"live_videos_view\", inputData);\n    if (response.data.success) {\n      yield put(fetchSingleLiveVideoSuccess(response.data.data));\n    } else {\n      yield put(fetchSingleLiveVideoFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(fetchSingleLiveVideoFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveStripeAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.liveStripe.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_payment_by_card\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(livePaymentStripeSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin +\"/live-video/\" +\n        response.data.data.live_video_unique_id);\n    } else {\n      yield put(livePaymentStripeFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentStripeFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* livePaypalAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.livePaypal.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_payment_by_paypal\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(livePaymentPaypalSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n        \n      window.location.assign(window.location.origin +\"/live-video/\" +\n        response.data.data.live_video_unique_id);\n\n    } else {\n      yield put(livePaymentPaypalFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentPaypalFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveViewerUpdateAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.liveViewerUpdate.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_viewer_update\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(liveViewerUpdateSuccess(response.data.data));\n      // const notificationMessage = getSuccessNotificationMessage(\n      //   response.data.message\n      // );\n      // yield put(createNotification(notificationMessage));\n\n    } else {\n      yield put(liveViewerUpdateFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(liveViewerUpdateFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveEndAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.liveEnd.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_broadcast_stop\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(liveVideoEndSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n        \n      window.location.assign(window.location.origin +\"/live-videos\");\n\n    } else {\n      yield put(liveVideoEndFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(liveVideoEndFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\nfunction* liveWalletAPI() {\n  try {\n    const inputData = yield select(\n      (state) => state.liveVideo.liveWallet.inputData\n    );\n    const response = yield api.postMethod(\n      \"live_videos_payment_by_wallet\",\n      inputData\n    );\n    if (response.data.success) {\n      yield put(livePaymentWalletSuccess(response.data.data));\n      const notificationMessage = getSuccessNotificationMessage(\n        response.data.message\n      );\n      yield put(createNotification(notificationMessage));\n      window.location.assign(window.location.origin +\"/live-video/\" +response.data.data.live_video_unique_id);\n\n    } else {\n      yield put(livePaymentWalletFailure(response.data.error));\n      const notificationMessage = getErrorNotificationMessage(\n        response.data.error\n      );\n      yield put(checkLogoutStatus(response.data));\n      yield put(createNotification(notificationMessage));\n    }\n  } catch (error) {\n    yield put(livePaymentWalletFailure(error));\n    const notificationMessage = getErrorNotificationMessage(error.message);\n    yield put(createNotification(notificationMessage));\n  }\n}\n\n\nexport default function* pageSaga() {\n  yield all([yield takeLatest(VIDEO_CALL_BROADCAST_START, liveVideoSaveAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_VIDEOS_START, liveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_LIVE_VIDEOS_HISTORY_START, liveVideosHistoryAPI)]);\n  // yield all([yield takeLatest(JOIN_LIVE_VIDEOS_START, joinLiveVideosAPI)]);\n  yield all([yield takeLatest(FETCH_SINGLE_LIVE_VIDEOS_START, fetchSingleLiveVideoAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_STRIPE_START, liveStripeAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_PAYPAL_START, livePaypalAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_VIEWER_UPDATE_START, liveViewerUpdateAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_END_START, liveEndAPI)]);\n  yield all([yield takeLatest(LIVE_VIDEOS_PAYMENT_BY_WALLET_START, liveWalletAPI)]);\n}\n"]},"metadata":{},"sourceType":"module"}