{"ast":null,"code":"var _jsxFileName = \"/Users/devsmac/Downloads/fx-frontend/src/components/helper/AssetPaymentModal.jsx\";\nimport React, { useState } from \"react\";\nimport { Form, Button, Image, Modal } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { chatAssetPaymentStripeStart, chatAssetPaymentPaypalStart } from \"../../store/actions/ChatAssetAction\";\nimport PaypalExpressBtn from \"react-paypal-express-checkout\";\nimport { createNotification } from \"react-redux-notify\";\nimport { getSuccessNotificationMessage, getErrorNotificationMessage } from \"../../components/helper/NotificationMessage\";\nimport configuration from \"react-global-configuration\";\nimport { translate, t } from \"react-multi-lang\";\n\nconst AssetPaymentModal = props => {\n  const [paymentType, setPaymentType] = useState(localStorage.getItem(\"default_payment_method\"));\n  const [showPayPal, payPal] = useState(false);\n  let env = configuration.get(\"configData.PAYPAL_MODE\"); // you can set here to 'production' for production\n\n  let currency = \"USD\"; // or you can set this value from your props or state\n\n  const client = {\n    sandbox: configuration.get(\"configData.PAYPAL_ID\"),\n    production: configuration.get(\"configData.PAYPAL_ID\")\n  };\n\n  const choosePaymentOption = event => {\n    setPaymentType(event);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (paymentType === \"CARD\") props.dispatch(chatAssetPaymentStripeStart({\n      chat_message_id: props.paymentData.chat_message_id\n    }));\n    if (paymentType === \"PAYPAL\") showPayPal(true);\n    props.closePaymentModal();\n  };\n\n  const paypalOnSuccess = payment => {\n    console.log(payment);\n    setTimeout(() => {\n      props.dispatch(chatAssetPaymentPaypalStart({\n        payment_id: payment.paymentID,\n        chat_message_id: props.paymentData.chat_message_id\n      }));\n    }, 1000);\n  };\n\n  const paypalOnError = err => {\n    const notificationMessage = getErrorNotificationMessage(err);\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  const paypalOnCancel = data => {\n    const notificationMessage = getErrorNotificationMessage(\"Payment cancelled please try again..\");\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    className: \"modal-dialog-center sent-tip-modal\",\n    size: \"md\",\n    centered: true,\n    show: props.chatPayment,\n    onHide: props.closePaymentModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, props.chatPayment === true ? /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, t(\"chat_message\"))), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-userinfo mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-username-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"pop-username popuser-realname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pop-username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, \"Chat Message Payment\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"floating-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pop-user-username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 19\n    }\n  }, t(\"amount\"), \" - \", props.paymentData.amount)), /*#__PURE__*/React.createElement(Form, {\n    className: \"mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, [\"radio\"].map(type => /*#__PURE__*/React.createElement(\"div\", {\n    key: `custom-inline-${type}`,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, configuration.get(\"configData.is_stripe_enabled\") == 1 && configuration.get(\"configData.stripe_publishable_key\") !== \"\" && configuration.get(\"configData.stripe_secret_key\") !== \"\" ? /*#__PURE__*/React.createElement(Form.Check, {\n    custom: true,\n    inline: true,\n    label: \"Card\",\n    type: type // id={`custom-inline-${type}-2`}\n    ,\n    id: \"card\",\n    value: \"CARD\",\n    name: \"payment_type\",\n    defaultChecked: paymentType == \"CARD\" ? true : false,\n    onChange: event => {\n      choosePaymentOption(event.currentTarget.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }) : null, configuration.get(\"configData.is_paypal_enabled\") == 1 && configuration.get(\"configData.PAYPAL_ID\") !== \"\" ? /*#__PURE__*/React.createElement(Form.Check, {\n    custom: true,\n    inline: true,\n    label: \"Paypal\",\n    type: type,\n    id: \"paypal\",\n    value: \"PAYPAL\",\n    name: \"payment_type\",\n    defaultChecked: paymentType == \"PAYPAL\" ? true : false,\n    onChange: event => {\n      choosePaymentOption(event.currentTarget.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }\n  }) : \"\"))))), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, paymentType === \"PAYPAL\" && props.paymentData.amount_formatted != 0 ? /*#__PURE__*/React.createElement(PaypalExpressBtn, {\n    env: env,\n    client: client,\n    currency: currency,\n    total: props.paymentData.amount_formatted,\n    onError: paypalOnError,\n    onSuccess: paypalOnSuccess,\n    onCancel: paypalOnCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }) : null, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    className: \"btn btn-danger\",\n    \"data-dismiss\": \"modal\",\n    onClick: props.closePaymentModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, t(\"cancel\")), paymentType !== \"PAYPAL\" ? /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    className: \"btn btn-success\",\n    \"data-dismiss\": \"modal\",\n    onClick: handleSubmit,\n    disabled: props.payStripe.buttonDisable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, props.payStripe.loadingButtonContent !== null ? props.payStripe.loadingButtonContent : t(\"pay_now\")) : \"\")) : null));\n};\n\nconst mapStateToPros = state => ({\n  payStripe: state.chatAsset.chatAssetPayStripe\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch\n  };\n}\n\nexport default connect(mapStateToPros, mapDispatchToProps)(translate(AssetPaymentModal));","map":{"version":3,"sources":["/Users/devsmac/Downloads/fx-frontend/src/components/helper/AssetPaymentModal.jsx"],"names":["React","useState","Form","Button","Image","Modal","connect","chatAssetPaymentStripeStart","chatAssetPaymentPaypalStart","PaypalExpressBtn","createNotification","getSuccessNotificationMessage","getErrorNotificationMessage","configuration","translate","t","AssetPaymentModal","props","paymentType","setPaymentType","localStorage","getItem","showPayPal","payPal","env","get","currency","client","sandbox","production","choosePaymentOption","event","handleSubmit","preventDefault","dispatch","chat_message_id","paymentData","closePaymentModal","paypalOnSuccess","payment","console","log","setTimeout","payment_id","paymentID","paypalOnError","err","notificationMessage","paypalOnCancel","data","chatPayment","amount","map","type","currentTarget","value","amount_formatted","payStripe","buttonDisable","loadingButtonContent","mapStateToPros","state","chatAsset","chatAssetPayStripe","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button, Image, Modal } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport {\n    chatAssetPaymentStripeStart,\n    chatAssetPaymentPaypalStart,\n} from \"../../store/actions/ChatAssetAction\";\nimport PaypalExpressBtn from \"react-paypal-express-checkout\";\nimport { createNotification } from \"react-redux-notify\";\nimport {\n  getSuccessNotificationMessage,\n  getErrorNotificationMessage,\n} from \"../../components/helper/NotificationMessage\";\nimport configuration from \"react-global-configuration\";\nimport { translate, t } from \"react-multi-lang\";\n\nconst AssetPaymentModal = (props) => {\n  const [paymentType, setPaymentType] = useState(localStorage.getItem(\"default_payment_method\"));\n\n  const [showPayPal, payPal] = useState(false);\n\n  let env = configuration.get(\"configData.PAYPAL_MODE\"); // you can set here to 'production' for production\n  let currency = \"USD\"; // or you can set this value from your props or state\n\n  const client = {\n    sandbox: configuration.get(\"configData.PAYPAL_ID\"),\n    production: configuration.get(\"configData.PAYPAL_ID\"),\n  };\n\n  const choosePaymentOption = (event) => {\n    setPaymentType(event);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (paymentType === \"CARD\")\n      props.dispatch(\n        chatAssetPaymentStripeStart({\n          chat_message_id: props.paymentData.chat_message_id,\n        })\n      );\n    if (paymentType === \"PAYPAL\") showPayPal(true);\n\n    props.closePaymentModal();\n  };\n\n  const paypalOnSuccess = (payment) => {\n    console.log(payment);\n    setTimeout(() => {\n      props.dispatch(\n        chatAssetPaymentPaypalStart({\n          payment_id: payment.paymentID,\n          chat_message_id: props.paymentData.chat_message_id,\n        })\n      );\n    }, 1000);\n  };\n\n  const paypalOnError = (err) => {\n    const notificationMessage = getErrorNotificationMessage(err);\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  const paypalOnCancel = (data) => {\n    const notificationMessage = getErrorNotificationMessage(\n      \"Payment cancelled please try again..\"\n    );\n    this.props.dispatch(createNotification(notificationMessage));\n  };\n\n  return (\n    <>\n      <Modal\n        className=\"modal-dialog-center sent-tip-modal\"\n        size=\"md\"\n        centered\n        show={props.chatPayment}\n        onHide={props.closePaymentModal}\n      >\n        {props.chatPayment === true ? (\n          <Form onSubmit={handleSubmit}>\n            <Modal.Header closeButton>\n              <Modal.Title>{t(\"chat_message\")}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <div className=\"header-userinfo mb-0\">\n                <div className=\"popup-username-row\">\n                  <span className=\"pop-username popuser-realname\">\n                    <div className=\"pop-username\">Chat Message Payment</div>\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"floating-form\">\n                <div>\n                  <div className=\"pop-user-username\">\n                    {t(\"amount\")} - {props.paymentData.amount}\n                  </div>\n                </div>\n                <Form className=\"mt-4\">\n                  {[\"radio\"].map((type) => (\n                    <div key={`custom-inline-${type}`} className=\"mb-3\">\n                      {configuration.get(\"configData.is_stripe_enabled\") ==\n                      1 && configuration.get(\"configData.stripe_publishable_key\") !== \"\" && configuration.get(\"configData.stripe_secret_key\") !== \"\" ? (\n                        <Form.Check\n                          custom\n                          inline\n                          label=\"Card\"\n                          type={type}\n                          // id={`custom-inline-${type}-2`}\n                          id=\"card\"\n                          value=\"CARD\"\n                          name=\"payment_type\"\n                          defaultChecked={paymentType == \"CARD\" ? true : false}\n                          onChange={(event) => {\n                            choosePaymentOption(event.currentTarget.value);\n                          }}\n                        />\n                      ) : (\n                        null\n                      )}\n                      {configuration.get(\"configData.is_paypal_enabled\") ==\n                      1 && configuration.get(\"configData.PAYPAL_ID\") !== \"\" ? (\n                        <Form.Check\n                          custom\n                          inline\n                          label=\"Paypal\"\n                          type={type}\n                          id=\"paypal\"\n                          value=\"PAYPAL\"\n                          name=\"payment_type\"\n                          defaultChecked={paymentType == \"PAYPAL\" ? true : false}\n                          onChange={(event) => {\n                            choosePaymentOption(event.currentTarget.value);\n                          }}\n                        />\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  ))}\n                </Form>\n              </div>\n            </Modal.Body>\n            <Modal.Footer>\n              {paymentType === \"PAYPAL\" &&\n              props.paymentData.amount_formatted != 0 ? (\n                <PaypalExpressBtn\n                  env={env}\n                  client={client}\n                  currency={currency}\n                  total={props.paymentData.amount_formatted}\n                  onError={paypalOnError}\n                  onSuccess={paypalOnSuccess}\n                  onCancel={paypalOnCancel}\n                />\n              ) : null}\n\n              <Button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                data-dismiss=\"modal\"\n                onClick={props.closePaymentModal}\n              >\n                {t(\"cancel\")}\n              </Button>\n              {paymentType !== \"PAYPAL\" ? (\n                <Button\n                  type=\"button\"\n                  className=\"btn btn-success\"\n                  data-dismiss=\"modal\"\n                  onClick={handleSubmit}\n                  disabled={props.payStripe.buttonDisable}\n                >\n                  {props.payStripe.loadingButtonContent !== null\n                    ? props.payStripe.loadingButtonContent\n                    : t(\"pay_now\")}\n                </Button>\n              ) : (\n                \"\"\n              )}\n            </Modal.Footer>\n          </Form>\n        ) : null}\n      </Modal>\n    </>\n  );\n};\n\nconst mapStateToPros = (state) => ({\n  payStripe: state.chatAsset.chatAssetPayStripe,\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return { dispatch };\n}\n\nexport default connect(mapStateToPros, mapDispatchToProps)(translate(AssetPaymentModal));\n"]},"metadata":{},"sourceType":"module"}